<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Centos 安装 MongoDB </title>
      <link href="/2018-04-13/Centos-%E5%AE%89%E8%A3%85-MongoDB/"/>
      <url>/2018-04-13/Centos-%E5%AE%89%E8%A3%85-MongoDB/</url>
      <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。Mongo 最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p><img src="https://iamdongfei.oss-cn-shenzhen.aliyuncs.com/blog/MongoDB.png" alt="MongoDB"></p><a id="more"></a><p>Packages 包说明<br>MongoDB 官方源中包含以下几个依赖包：<br>mongodb-org: MongoDB 元数据包，安装时自动安装下面四个组件包：</p><ul><li>mongodb-org-server: 包含 MongoDB 守护进程和相关的配置和初始化脚本。</li><li>mongodb-org-mongos: 包含 mongos 的守护进程。</li><li>mongodb-org-shell: 包含 mongo shell。</li><li>mongodb-org-tools: 包含 MongoDB 的工具： mongoimport、 bsondump、 mongodump、 mongoexport、 mongofiles、 mongooplog、 mongoperf、 mongorestore、 mongostat、 and mongotop 。</li></ul><h5 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h5><h6 id="配置-MongoDB-的-yum-源"><a href="#配置-MongoDB-的-yum-源" class="headerlink" title="配置 MongoDB 的 yum 源"></a>配置 MongoDB 的 yum 源</h6><p>创建 yum 源文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/mongodb-org-<span class="number">3.4</span>.repo</span><br></pre></td></tr></table></figure></p><p>添加以下内容：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mongodb-org-3.4]</span>  </span><br><span class="line"><span class="attr">name</span>=MongoDB Repository  </span><br><span class="line"><span class="attr">baseurl</span>=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/<span class="number">3.4</span>/x<span class="number">86_64</span>/  </span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span>  </span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span>  </span><br><span class="line"><span class="attr">gpgkey</span>=https://www.mongodb.org/static/pgp/server-<span class="number">3.4</span>.asc</span><br></pre></td></tr></table></figure></p><p>这里可以修改 <code>gpgcheck=0</code>、 省去 gpg 验证</p><p>安装之前先更新所有包 ：<code>yum update</code> （可选操作）</p><h6 id="安装-MongoDB-命令："><a href="#安装-MongoDB-命令：" class="headerlink" title="安装 MongoDB 命令："></a>安装 MongoDB 命令：</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> mongodb-org</span><br></pre></td></tr></table></figure><p>安装完成后</p><p>查看 mongo 安装位置 <code>whereis mongod</code></p><p>查看修改配置文件 ：<code>vim /etc/mongod.conf</code></p><h5 id="启动-MongoDB-服务"><a href="#启动-MongoDB-服务" class="headerlink" title="启动 MongoDB 服务"></a>启动 MongoDB 服务</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动 mongodb ：systemctl start mongod.service</span><br><span class="line">停止 mongodb ：systemctl stop mongod.service</span><br><span class="line">查看 mongodb 的状态：systemctl status mongod.service</span><br></pre></td></tr></table></figure><h5 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> mongod.service</span><br></pre></td></tr></table></figure><h5 id="外网访问需要关闭防火墙："><a href="#外网访问需要关闭防火墙：" class="headerlink" title="外网访问需要关闭防火墙："></a>外网访问需要关闭防火墙：</h5><p>CentOS 7.0 默认使用的是 firewall 作为防火墙，这里改为 iptables 防火墙。</p><p>关闭 firewall：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld.service    <span class="meta"># 停止firewall</span></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service <span class="meta"># 禁止firewall开机启动</span></span><br></pre></td></tr></table></figure></p><h5 id="启动-Mongo-shell"><a href="#启动-Mongo-shell" class="headerlink" title="启动 Mongo shell"></a>启动 Mongo shell</h5><p>命令：<code>mongo</code> </p><p>查看数据库：<code>show dbs</code></p><h5 id="设置-mongodb-远程访问："><a href="#设置-mongodb-远程访问：" class="headerlink" title="设置 mongodb 远程访问："></a>设置 mongodb 远程访问：</h5><p>编辑 <code>mongod.conf</code> 注释 <code>bindIp</code>、并重启 mongodb.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">------mongod.conf-----</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  # bindIp: 127.0.0.1  # Listen <span class="keyword">to</span> local<span class="built_in"> interface </span>only, comment <span class="keyword">to</span> listen on all interfaces.</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">重启 mongodb：systemctl restart mongod.service</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/web424/p/6928992.html" target="_blank" rel="noopener"> centos7 安装 MongoDB3.4 </a></p><p><a href="https://blog.csdn.net/dhfttkl123/article/details/53284238" target="_blank" rel="noopener"> Mongodb 3.2 开启密码认证 </a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos 配置 Shadowsocks 翻墙</title>
      <link href="/2018-04-13/Centos-%E9%85%8D%E7%BD%AE-Shadowsocks-%E7%BF%BB%E5%A2%99/"/>
      <url>/2018-04-13/Centos-%E9%85%8D%E7%BD%AE-Shadowsocks-%E7%BF%BB%E5%A2%99/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">再牛逼的梦想也抵不住傻逼似得坚持</blockquote><br><img src="https://iamdongfei.oss-cn-shenzhen.aliyuncs.com/blog/shadowsocks.png" alt="shadowsocks"></p><h5 id="Socks5-全局代理"><a href="#Socks5-全局代理" class="headerlink" title="Socks5 全局代理"></a>Socks5 全局代理</h5><h6 id="安装-sslocal"><a href="#安装-sslocal" class="headerlink" title="安装 sslocal"></a>安装 sslocal</h6><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span><span class="keyword">shadowsocks </span><span class="comment"># pip 安装 ss 客户端</span></span><br><span class="line">如果提示 -<span class="keyword">bash: </span>pip: command not found</span><br><span class="line">运行 yum -y <span class="keyword">install </span>python-pip</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="配置-shadowsocks-json"><a href="#配置-shadowsocks-json" class="headerlink" title="配置 shadowsocks.json"></a>配置 shadowsocks.json</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/etc/shadowsocks.json</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="string">shadowsocks.json</span> <span class="meta">---</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    "server":</span><span class="string">"SERVER-IP"</span><span class="string">,</span>   <span class="comment"># 你的服务器ip</span></span><br><span class="line"><span class="attr">    "server_port":</span><span class="string">PORT,</span>    <span class="comment"># 服务器端口</span></span><br><span class="line"><span class="attr">    "local_address":</span> <span class="string">"127.0.0.1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    "local_port":</span><span class="number">1080</span><span class="string">,</span></span><br><span class="line"><span class="attr">    "password":</span><span class="string">"PASSWORD"</span><span class="string">,</span>    <span class="comment"># 密码</span></span><br><span class="line"><span class="attr">    "timeout":</span><span class="number">300</span><span class="string">,</span></span><br><span class="line"><span class="attr">    "method":</span><span class="string">"aes-128-cfb"</span><span class="string">,</span> <span class="comment"># 加密方式</span></span><br><span class="line"><span class="attr">    "fast_open":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">    "workers":</span> <span class="number">1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="string">shadowsocks.json</span> <span class="meta">---</span></span><br></pre></td></tr></table></figure><h6 id="运行-sslocal"><a href="#运行-sslocal" class="headerlink" title="运行 sslocal"></a>运行 sslocal</h6><p>nohup sslocal -c /etc/shadowsocks.json &amp;&gt;&gt; /var/log/sslocal.log &amp;</p><h5 id="Privoxy-篇"><a href="#Privoxy-篇" class="headerlink" title="Privoxy 篇"></a>Privoxy 篇</h5><h6 id="安装-privoxy"><a href="#安装-privoxy" class="headerlink" title="安装 privoxy"></a>安装 privoxy</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> privoxy</span><br></pre></td></tr></table></figure><h6 id="配置-socks5-全局代理"><a href="#配置-socks5-全局代理" class="headerlink" title="配置 socks5 全局代理"></a>配置 socks5 全局代理</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'forward-socks5 / 127.0.0.1:1080 .'</span> <span class="meta">&gt;&gt; </span>/etc/privoxy/config</span><br></pre></td></tr></table></figure><h6 id="设置-http-https-代理"><a href="#设置-http-https-代理" class="headerlink" title="设置 http/https 代理"></a>设置 http/https 代理</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:8118 # privoxy默认监听端口为8118</span><br><span class="line">export https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure><h6 id="运行-privoxy"><a href="#运行-privoxy" class="headerlink" title="运行 privoxy"></a>运行 privoxy</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service privoxy start</span><br></pre></td></tr></table></figure><h6 id="测试-socks5-全局代理"><a href="#测试-socks5-全局代理" class="headerlink" title="测试 socks5 全局代理"></a>测试 socks5 全局代理</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如果出现下面这段输出则代理成功！</span></span></span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;</span><br><span class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF="http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/%3Fgws_rd%3Dcr&amp;amp;ust=1480320257875871&amp;amp;usg=AFQjCNHg9F5zMg83aD2KKHHHf-yecq0nfQ"&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h5 id="简化使用"><a href="#简化使用" class="headerlink" title="简化使用"></a>简化使用</h5><p>进过上面的步骤我们的确代理成功了。但是每次都要输入这么多命令太麻烦<br>这时我们可以利用 <strong>命令别名</strong> 来简化我们的操作<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> ssinit='nohup sslocal -c <span class="string">/etc/shadowsocks.json</span> &amp;&gt;&gt; <span class="string">/var/log/sslocal.log</span> &amp;'</span><br><span class="line"><span class="keyword">alias</span> sson='export http_proxy=http:<span class="string">//127.0.0.1</span><span class="function">:8118</span> &amp;&amp; export https_proxy=http:<span class="string">//127.0.0.1</span><span class="function">:8118</span> &amp;&amp; systemctl start privoxy'</span><br><span class="line"><span class="keyword">alias</span> ssoff='<span class="keyword">unset</span> http_proxy &amp;&amp; <span class="keyword">unset</span> https_proxy &amp;&amp; systemctl stop privoxy &amp;&amp; pkill sslocal'</span><br></pre></td></tr></table></figure></p><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 开启ss代理</span></span></span><br><span class="line">ssinit</span><br><span class="line">sson</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭ss代理</span></span></span><br><span class="line">ssoff</span><br></pre></td></tr></table></figure><p>参考：</p><ol><li><p><a href="https://i.jakeyu.top/2017/03/16/centos%E4%BD%BF%E7%94%A8SS%E7%BF%BB%E5%A2%99/" target="_blank" rel="noopener">centos使用SS翻墙</a></p></li><li><p><a href="https://bodyno.com/tool/2017/09/03/centos-ss.html" target="_blank" rel="noopener">如何使用Shadowsocks让centos翻墙</a></p></li><li><p><a href="https://blog.csdn.net/xwydq/article/details/51274185" target="_blank" rel="noopener">linux下的ss+privoxy代理配置</a></p></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapinghub 的 Scrapy 技巧系列（六）</title>
      <link href="/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://blog.scrapinghub.com/2016/07/20/scrapy-tips-from-the-pros-july-2016/" target="_blank" rel="noopener"> Scrapy Tips from the Pros: July 2016 </a></p><hr><p><a href="http://scrapy.org" target="_blank" rel="noopener"> Scrapy </a>被设计成可扩展，并且组件之间松耦合。你可以轻松地使用自己的中间件或者 pipeline 扩展 Scrapy 的功能。</p><p>这使得 Scrapy 社区可以很容易地开发新的插件来改善现有功能，而不需改变 Scrapy 自身。在这篇文章中，我们将向你展示如何利用 DeltaFetch 插件来进行增量爬取。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/scrapy-tips.png" alt="Scrapy Tips"></p><a id="more"></a><h2 id="使用-Deltafetch-进行增量爬取"><a href="#使用-Deltafetch-进行增量爬取" class="headerlink" title="使用 Deltafetch 进行增量爬取"></a>使用 Deltafetch 进行增量爬取</h2><p>我们开发的一些爬虫设计成一次性爬取并抓取我们所需的数据。另一方面，许多爬虫需要周期性地爬取，以便让我们的数据集保持最新。</p><p>在这些周期爬虫中，我们只对最后一次爬取的最新页面感兴趣。例如，我们有一个从一堆网络媒体网点爬取文章的爬虫。该爬虫一天执行一次，并且它们首先从预定义的首页检索文章URL。然后，从每篇文章上提取标题、作者、日期和内容。这种方法通常会导致许多重复结果，并且使得每次我们运行爬虫时，爬取的数量越来越多。</p><p>幸运的是，我们并不是第一个有这个问题的人。社区已经有了解决方法：<a href="https://github.com/scrapy-plugins/scrapy-deltafetch" target="_blank" rel="noopener"> scrapy-deltafetch插件 </a>。你可以用这个插件进行增量爬取。 DeltaFetch 的主要目的是避免请求那些之前已经爬过的页面，即使它在之前的执行中已经出现了。它只会对那些之前没有提取任何项的页面、爬虫的 <code>start_urls</code> 属性中的URL、或者在爬虫的 <code>start_requests</code> 方法中生成的 Request 进行请求。</p><p>DeltaFetch 的工作原理是，对爬虫回调中生成的每一个 Item 和 Request 对象进行拦截。对于 Item ，它计算相关的 Request 标识符(又名，<a href="https://github.com/scrapy/scrapy/blob/master/scrapy/utils/request.py#L19" target="_blank" rel="noopener"> 指纹(fingerprint) </a>)，并将其存储到一个本地数据库中。对于 Request ，Deltafetch 计算 Request fingerprint ，并在在其已存在数据库的时候丢弃该 Request。</p><p>现在，看看如何为你的 Scrapy 爬虫设置 Deltafetch 。</p><h3 id="开始使用-DeltaFetch"><a href="#开始使用-DeltaFetch" class="headerlink" title="开始使用 DeltaFetch"></a>开始使用 DeltaFetch</h3><p>首先，用 pip 安装 DeltaFetch ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ pip install scrapy-deltafetch</span><br></pre></td></tr></table></figure><p>然后，你必须在你的项目的 settings.py 文件中启用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_deltafetch.DeltaFetch'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line">DELTAFETCH_ENABLED = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="使用-DeltaFetch"><a href="#使用-DeltaFetch" class="headerlink" title="使用 DeltaFetch"></a>使用 DeltaFetch</h3><p><a href="https://github.com/stummjr/books_crawler/" target="_blank" rel="noopener"> 这个爬虫 </a>有一个爬取<a href="http://books.toscrape.com" target="_blank" rel="noopener"> books.toscrape.com </a>的蜘蛛。它通过所有列出的页面进行导航，访问每本书的详细页面，获取一些数据，例如书标题、描述和目录。该爬虫每天执行一次，以捕获对应目录中包含的新书。无需访问那些已经爬过的书页面，因为由爬虫收集的数据通常不会改变。</p><p>想看看 Deltafetch 的使用，<a href="https://github.com/stummjr/books_crawler/" target="_blank" rel="noopener"> clone这个repo </a>，其中，已经在 settings.py 启用了 DeltaFetch ，然后运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ scrapy crawl toscrape</span><br></pre></td></tr></table></figure><p>等它结束，然后看看 Scrapy 在最后记录的统计数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-19</span> <span class="number">10</span>:<span class="number">17</span>:<span class="number">53</span> [scrapy] INFO: Dumping Scrapy stats:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'deltafetch/stored'</span>: <span class="number">1000</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'downloader/request_count'</span>: <span class="number">1051</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'item_scraped_count'</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，你会看到爬虫进行了 1051 次请求来爬取 1000 个项，而 DeltaFetch 存储了 1000 个请求的 fingerprint 。这意味着，只有 51 个页面请求没有生成 item ，因此下次还会继续访问他们。</p><p>现在，再次运行该爬虫，你会看到许多像这样的日志信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-19</span> <span class="number">10</span>:<span class="number">47</span>:<span class="number">10</span> [toscrape] INFO: Ignoring already visited: </span><br><span class="line">&lt;GET http://books.toscrape.com/....../index.html&gt;</span><br></pre></td></tr></table></figure><p>而在统计数据中，你会看到，跳过了 1000 个请求，因为在之前的爬取中，已经爬到了 item 。现在，该爬虫并未提取任何 item ，并且它只进行了 51 次请求，它们所有都是之前没有爬取到 item 的页面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-19</span> <span class="number">10</span>:<span class="number">47</span>:<span class="number">10</span> [scrapy] INFO: Dumping Scrapy stats:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'deltafetch/skipped'</span>: <span class="number">1000</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'downloader/request_count'</span>: <span class="number">51</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改数据库键"><a href="#修改数据库键" class="headerlink" title="修改数据库键"></a>修改数据库键</h3><p>默认情况下，DeltaFetch 使用一个 Request fingerprint 来区分 Request 。该 fingerprint 是一个基于规范 URL、HTTP 方法和请求体计算的哈希值。</p><p>一些网站对于相同的数据会有多个 URL 。例如，一个电子商务网站可能有指向同一个产品的 URL ，如下所示：</p><ul><li><a href="http://www.example.com/product?id=123" target="_blank" rel="noopener">http://www.example.com/product?id=123</a></li><li><a href="http://www.example.com/deals?id=123" target="_blank" rel="noopener">http://www.example.com/deals?id=123</a></li><li><a href="http://www.example.com/category/keyboards?id=123" target="_blank" rel="noopener">http://www.example.com/category/keyboards?id=123</a></li><li><a href="http://www.example.com/category/gaming?id=123" target="_blank" rel="noopener">http://www.example.com/category/gaming?id=123</a></li></ul><p>在这些情况下，Request fingerprint 并不适用，因为规范的 URL 将会不同，即使 item 是相同的。在这个例子中，我们可以使用产品的 ID 作为 DeltaFetch 键。</p><p>DeltaFetch允许我们在初始化Request时，通过传递一个名为<code>deltafetch_key</code>的元参数来自定义键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> w3lib.url <span class="keyword">import</span> url_query_parameter</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> product_url <span class="keyword">in</span> response.css(<span class="string">'a.product_listing'</span>):</span><br><span class="line">        <span class="keyword">yield</span> Request(</span><br><span class="line">            product_url,</span><br><span class="line">            meta=&#123;<span class="string">'deltafetch_key'</span>: url_query_parameter(product_url, <span class="string">'id'</span>)&#125;,</span><br><span class="line">            callback=self.parse_product_page</span><br><span class="line">        )</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>通过这种方式， DeltaFetch 将会忽略对重复页面进行请求，即使它们有不同的 URL 。</p><h3 id="重置-DeltaFetch"><a href="#重置-DeltaFetch" class="headerlink" title="重置 DeltaFetch"></a>重置 DeltaFetch</h3><p>如果你想要重新爬取页面，可以通过传递一个 <code>deltafetch_reset</code> 参数给你的爬虫，来重置 DeltaFetch 缓存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ scrapy crawl example -a deltafetch_reset=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="在-Scrapy-Cloud-上使用-DeltaFetch"><a href="#在-Scrapy-Cloud-上使用-DeltaFetch" class="headerlink" title="在 Scrapy Cloud 上使用 DeltaFetch"></a>在 Scrapy Cloud 上使用 DeltaFetch</h3><p>你也可以对运行在<a href="https://app.scrapinghub.com/account/signup/" target="_blank" rel="noopener"> Scrapy Cloud </a>之上的爬虫使用 DeltaFetch 。仅需在你项目的 Addons 页面启用 DeltaFetch 和 DotScrapy Persistence 插件。后者是用来允许你的爬虫访问 .scrapy 文件夹，该文件夹是 DeltaFetch 存储其数据库的地方。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image00.png" alt="image00"></p><p>Deltafetch 在我们已经看到的那些情况下是非常方便的。<strong>请记住，Deltafetch 只是避免了发送请求到之前已经生成了 item 的页面，并且仅当这些请求尚未由爬虫的s tart_urls 或者 start_requests 生成。</strong>那些来自于没有直接爬取到 item 的页面，在每一次你运行你的爬虫的时候，将仍会抓取。</p><p>你可以看看 github 上该项目页以获取更多信息：<a href="http://github.com/scrapy-plugins/scrapy-deltafetch" target="_blank" rel="noopener">http://github.com/scrapy-plugins/scrapy-deltafetch</a></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>你可以在 Github 的<a href="https://github.com/scrapy-plugins" target="_blank" rel="noopener"> scrapy-plugins </a>页面上找到许多有趣的 Scrapy 插件，你还可以在那里包含自己的插件来回馈社区。</p><p>如果你有问题，或者你想在这个每月专栏上看到某个主题，请在这里（ Ele 注，到原文留言哈）留下评论，让我们知道，或者通过在 Twitter 上<a href="http://twitter.com/scrapinghub" target="_blank" rel="noopener"> @scrapinghub </a>来找到我们。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapinghub 的 Scrapy 技巧系列（五）</title>
      <link href="/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://blog.scrapinghub.com/2016/06/22/scrapy-tips-from-the-pros-june-2016/" target="_blank" rel="noopener"> Scrapy Tips from the Pros June 2016 </a></p><hr><p>欢迎来到 Scrapy 技巧系列！每个月，我们会发布一些技巧和 hack ，来帮助你加快网页抓取和数据提取。作为牵头的 Scrapy 维护者，你可以想象的任何障碍我们都遇到过了，所以别担心，你能在这获益良多。随意到<a href="https://twitter.com/ScrapingHub" target="_blank" rel="noopener"> Twitter </a>或者<a href="https://www.facebook.com/ScrapingHub/" target="_blank" rel="noopener"> Facebook </a>访问我们，提出对未来主题的建议吧。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/scrapy-tips.png" alt="Scrapy Tips"></p><a id="more"></a><h2 id="抓取无限滚动页面"><a href="#抓取无限滚动页面" class="headerlink" title="抓取无限滚动页面"></a>抓取无限滚动页面</h2><p>在单页应用以及每页具有大量 AJAX 请求的时代，很多网站已经用花哨的无限滚动机制取代了 <strong>前一个/下一个</strong>分页按钮。使用这种技术的网站每当用户滚动到页面的底部的时候加载新项（想想微博，Facebook，谷歌图片）。虽然<a href="https://www.smashingmagazine.com/2013/05/infinite-scrolling-lets-get-to-the-bottom-of-this/" target="_blank" rel="noopener"> UX专家 </a>认为，无限滚动为用户提供了海量数据，但是我们看到越来越多的 web 页面诉诸于展示这种无休止的结果列表。</p><p>在开发 web 爬虫时，我们要做的第一件事就是找到能将我们引导到下一页结果的带有链接的 UI 组件。不幸的是，这些链接在无限滚动页面上不存在。</p><p>虽然这种场景可能看起来像诸如<a href="http://scrapinghub.com/splash/" target="_blank" rel="noopener"> Splash </a>或者<a href="http://www.seleniumhq.org/" target="_blank" rel="noopener"> Selenium </a>这样的 JavaScript 引擎的一个经典案例，但是它实际上是一个简单的修复。你所需要做的是在你滚动目标页面的时候检查浏览器的 AJAX 请求，然后在 Scrapy spider 中重新创建这些请求，而不是模拟用于与此类引擎的交互。</p><p>让我们以<a href="http://spidyquotes.herokuapp.com/scroll" target="_blank" rel="noopener"> Spidy Quotes </a>为例，构建一个爬虫来获取上面列出来的所有的项。</p><h2 id="审查页面"><a href="#审查页面" class="headerlink" title="审查页面"></a>审查页面</h2><p>先说重要的事，我们需要理解无限滚动是如何在这个页面工作的，我们可以通过<a href="https://developer.chrome.com/devtools#access" target="_blank" rel="noopener"> 浏览器的开发者工具 </a>中的Network面板来完成此项工作。打开该面板，然后滚动页面，看看浏览器发送了什么请求：</p><p><img src="https://scrapinghub.files.wordpress.com/2016/06/scrapy-tips-from-the-pros-june.png?w=648" alt="scrapy tips from the pros june"></p><p>点开一个请求仔细看看。浏览器发送了一个请求到<code>/api/quotes?page=x</code>，然后接收诸如以下的一个 JSON 对象作为响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"has_next"</span>:true,</span><br><span class="line">   <span class="string">"page"</span>:<span class="number">8</span>,</span><br><span class="line">   <span class="string">"quotes"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"author"</span>:&#123;</span><br><span class="line">            <span class="string">"goodreads_link"</span>:<span class="string">"/author/show/1244.Mark_Twain"</span>,</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"Mark Twain"</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">"tags"</span>:[<span class="string">"individuality"</span>, <span class="string">"majority"</span>, <span class="string">"minority"</span>, <span class="string">"wisdom"</span>],</span><br><span class="line">         <span class="string">"text"</span>:<span class="string">"Whenever you find yourself on the side of the ..."</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"author"</span>:&#123;</span><br><span class="line">            <span class="string">"goodreads_link"</span>:<span class="string">"/author/show/1244.Mark_Twain"</span>,</span><br><span class="line">            <span class="string">"name"</span>:<span class="string">"Mark Twain"</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">"tags"</span>:[<span class="string">"books"</span>, <span class="string">"contentment"</span>, <span class="string">"friends"</span>],</span><br><span class="line">         <span class="string">"text"</span>:<span class="string">"Good friends, good books, and a sleepy ..."</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"tag"</span>:null,</span><br><span class="line">   <span class="string">"top_ten_tags"</span>:[[<span class="string">"love"</span>, <span class="number">49</span>], [<span class="string">"inspirational"</span>, <span class="number">43</span>], ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是我们的爬虫需要的信息了。它所需要做的仅是生成到 <code>/api/quotes?page=x</code>的请求，其中，<code>x</code> 的值不断增加，直到 <code>has_next</code> 字段为 false 。这样做最棒的是，我们甚至无需爬取HTML内容以获取所需数据。这些数据都在一个漂亮的机器可读的 JSON 中。</p><h2 id="构建Spider"><a href="#构建Spider" class="headerlink" title="构建Spider"></a>构建Spider</h2><p>下面是我们的 spider 。它从服务器返回的 JSON 内容提取目标数据。这种方法比挖掘页面的 HTML 树更容易并且更健壮，相信布局的改变不会搞挂我们的 spider 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpidyQuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'spidyquotes'</span></span><br><span class="line">    quotes_base_url = <span class="string">'http://spidyquotes.herokuapp.com/api/quotes?page=%s'</span></span><br><span class="line">    start_urls = [quotes_base_url % <span class="number">1</span>]</span><br><span class="line">    download_delay = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        data = json.loads(response.body)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data.get(<span class="string">'quotes'</span>, []):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: item.get(<span class="string">'text'</span>),</span><br><span class="line">                <span class="string">'author'</span>: item.get(<span class="string">'author'</span>, &#123;&#125;).get(<span class="string">'name'</span>),</span><br><span class="line">                <span class="string">'tags'</span>: item.get(<span class="string">'tags'</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">'has_next'</span>]:</span><br><span class="line">            next_page = data[<span class="string">'page'</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(self.quotes_base_url % next_page)</span><br></pre></td></tr></table></figure><p>要进一步练习这个技巧，你可以做个实验，爬取我们的博客，因为它也是使用无限滚动来加载旧博文的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你被爬取无限滚动网站的前景吓到，那么希望现在你可以有点信心了。下一次你需要处理那种基于用户操作引发的 AJAX 调用的页面时，看一看你的浏览器发送的请求吧，然后将其重放到你的 spider 中。响应往往是 JSON 的格式，这使得你的 spider 甚至更简单了。</p><p>好啦，这就是六月份的！请在<a href="https://twitter.com/ScrapingHub" target="_blank" rel="noopener"> Twitter </a>上联系我们，让我们知道未来你希望看到什么技巧。最近，我们还发布了一个<a href="https://blog.scrapinghub.com/2016/06/09/introducing-the-new-open-data-catalog/" target="_blank" rel="noopener"> 数据集目录 </a>，所以，如果你还苦思要爬取什么，那么看看这个目录获取一些灵感吧。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapinghub 的 Scrapy 技巧系列（四）</title>
      <link href="/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>欢迎来到 Scrapy 技巧系列！每个月，我们会发布一些技巧和 hack ，来帮助你加快网页抓取和数据提取。作为牵头的 Scrapy 维护者，你可以想象的任何障碍我们都遇到过了，所以别担心，你能在这获益良多。随意到<a href="https://twitter.com/ScrapingHub" target="_blank" rel="noopener"> Twitter </a>或者<a href="https://www.facebook.com/ScrapingHub/" target="_blank" rel="noopener"> Facebook </a>访问我们，提出对未来主题的建议吧。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/scrapy-tips.png" alt="Scrapy Tips"></p><a id="more"></a><h1 id="如何调试你的爬虫"><a href="#如何调试你的爬虫" class="headerlink" title="如何调试你的爬虫"></a>如何调试你的爬虫</h1><p>你的爬虫不工作了，但是你想不明白为啥。一个快速识别潜在问题的方法是添加一些打印语句，以找出发生了什么。这通常是我的第一个步骤，而有时我所需要做的是发现那些妨碍我的爬虫正常运行的错误。如果这个方法对你有效，那就太棒了，但是如果这个方法还不够，那么读下去，学学如何处理那些需要更加彻底调查的令人讨厌的 bug 。在这篇文章中，我将向你介绍一些工具，当涉及到调试爬虫时，它们应该在每个 Scrapy 用户的工作区中。</p><h2 id="Scrapy-Shell-是你的好基友"><a href="#Scrapy-Shell-是你的好基友" class="headerlink" title="Scrapy Shell 是你的好基友"></a>Scrapy Shell 是你的好基友</h2><p>Scrapy shell 是一个全功能的 Python shell ，它加载了与你在你的爬虫的回调方法中得到的上下文相同的上下文。你只需要提供一个 URL ，Scrapy Shell 就会让你与那个你的爬虫在它的回调中处理的相同的对象进行交互，包括 response 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ scrapy shell http://blog.scrapinghub.com</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at <span class="number">0x7f0638a2cbd0</span>&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET http://blog.scrapinghub.com&gt;</span><br><span class="line">[s]   response   &lt;<span class="number">200</span> https://blog.scrapinghub.com/&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at <span class="number">0x7f0638a2cb50</span>&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider <span class="string">'default'</span> at <span class="number">0x7f06371f3290</span>&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   shelp()           Shell help (<span class="keyword">print</span> this help)</span><br><span class="line">[s]   fetch(req_or_url) Fetch request (<span class="keyword">or</span> URL) <span class="keyword">and</span> update local objects</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>加载它之后，你可以开始玩玩 response ，以构建选择器来提取所需的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">"div.post-header &gt; h2 ::text"</span>).extract()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果你不熟悉 Scrapy Shell，那么不妨试一试。它与你的开发工作流程可以完美契合，它位于在浏览器中进行页面检查的动作之后。你可以创建并测试爬虫的抽取规则，而一旦你构建了所需的规则，就可以在爬虫代码中使用它们。</p><p>通过官方文档，了解更多关于<a href="http://doc.scrapy.org/en/latest/topics/shell.html" target="_blank" rel="noopener"> Scrapy Shell的细节 </a>。</p><h3 id="从你的-Spider-代码中启动-Scrapy-Shell"><a href="#从你的-Spider-代码中启动-Scrapy-Shell" class="headerlink" title="从你的 Spider 代码中启动 Scrapy Shell"></a>从你的 Spider 代码中启动 Scrapy Shell</h3><p>如果对于某些响应，你的爬虫表现异常，那么在爬虫代码中使用 <code>scrapy.shell.inspect_response</code> 方法，你可以很快地看到发生了什么事。这将打开一个 Scrapy shell 会话，以让你与当前的 response 对象进行交互。</p><p>例如，假设你的爬虫不从某些页面中提取所期望数量的项，而你想要看看网站返回的响应有啥问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BlogSpider</span><span class="params">(scrapy.Spider)</span></span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(response.css(<span class="string">'div.post-header &gt; h2 ::text'</span>)) &gt; EXPECTED:</span><br><span class="line">            <span class="comment"># generate the items</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inspect_response(response, self)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>一旦执行这个 inspect_response 调用，Scrapy Shell 就会被打开，而你就能与 response 进行交互，从而看看发生了啥事。</p><h2 id="快速绑定一个调试器到你的-Spider"><a href="#快速绑定一个调试器到你的-Spider" class="headerlink" title="快速绑定一个调试器到你的 Spider"></a>快速绑定一个调试器到你的 Spider</h2><p>另一个调试爬虫的方法是使用常规的 Python 调试器，例如 pdb 或者 PuDB 。我使用<a href="https://pypi.python.org/pypi/pudb" target="_blank" rel="noopener"> PuDB </a>，因为它是一个相当强大且易于使用的调试器，而要激活它，我所需要的只是将这行代码放在我想要断点的那一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pudb;</span><br><span class="line">pudb.set_trace()</span><br></pre></td></tr></table></figure><p>当到达断点的时候，PuDB 在你的终端中打开一个很酷的文本模式的用户界面，它将带你回到使用 Turbo Pascal 调试器的那些美好的旧时光。</p><p>看一看：<img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image002.png" alt="image00"></p><p>你可以使用 pip 安装 PuDB ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ pip install pudb</span><br></pre></td></tr></table></figure><p>看看这个视频，其中，我们自己的<a href="https://twitter.com/eliasdorneles" target="_blank" rel="noopener"> @eliasdorneles </a>演示了使用 PuDB 的几个小技巧：<a href="https://vimeo.com/166584837" target="_blank" rel="noopener">https://vimeo.com/166584837</a></p><h2 id="Scrapy-解析-CLI-命令"><a href="#Scrapy-解析-CLI-命令" class="headerlink" title="Scrapy 解析 CLI 命令"></a>Scrapy 解析 CLI 命令</h2><p>有些情况下，你需要你的爬虫很长一段时间运行某些爬取项目。但是，在运行了几个小时后，你可能会悲催地在日志中看到，对于一些特​​定的 URL ，爬虫之一有爬取问题。你想要调试爬虫，但你肯定不希望再运行整个抓取过程，并且要等到为该特定的URL调用的具体的回调，这样你就可以启动你的调试器。</p><p>别担心，Scrapy CLI 的<a href="http://doc.scrapy.org/en/latest/topics/commands.html#std:command-parse" target="_blank" rel="noopener"> parse命令 </a>就是为了让你节约时间的！你只需要提供该爬虫的名字，应该使用的爬虫的回调，以及你想要解析的URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ scrapy parse https://blog.scrapinghub.com/comments/bla --spider blog -c parse_comments</span><br></pre></td></tr></table></figure><p>在这种情况下，Scrapy 将会调用 blog 爬虫的 parse_comments 方法来解析 <code>blog.scrapinghub.com/comments/bla</code> URL。如果你不指定爬虫，那么 Scrapy 将会在你的项目中，基于爬虫的 allowed_domains 设置，搜寻能够处理这个 URL 的爬虫。</p><p>然后，它将会向你显示回调的执行摘要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>STATUS DEPTH LEVEL <span class="number">1</span> &lt;&lt;&lt;</span><br><span class="line"><span class="comment"># Scraped Items  ------------------------------------------------------------</span></span><br><span class="line">[&#123;<span class="string">'comments'</span>: [</span><br><span class="line">    &#123;<span class="string">'content'</span>: <span class="string">u"I've seen this language ..."</span>,</span><br><span class="line">     <span class="string">'username'</span>: <span class="string">u'forthemostpart'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'content'</span>: <span class="string">u"It's a ..."</span>,</span><br><span class="line">     <span class="string">'username'</span>: <span class="string">u'YellowAfterlife'</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">    &#123;<span class="string">'content'</span>: <span class="string">u"There is a macro for ..."</span>,</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">u'mrcdk'</span>&#125;]&#125;]</span><br><span class="line"><span class="comment"># Requests  -----------------------------------------------------------------</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>你也可以在方法里面附加一个调试器，以帮助你弄清楚发生了什么（见前面的提示）。</p><h2 id="Scrapy-fetch-和-view-命令"><a href="#Scrapy-fetch-和-view-命令" class="headerlink" title="Scrapy fetch 和 view 命令"></a>Scrapy fetch 和 view 命令</h2><p>在浏览器中检查页面内容可能会被欺骗，因为它们的 JavaScript 引擎可能渲染某些 Scrapy 下载器不会做的内容。如果你想快速检查当一个页面被 Scrapy 下载后，该页面会看起来是什么样的，那么你可以使用下面这些命令：</p><ul><li><strong>fetch</strong>: 使用 Scrapy 下载器下载 HTML ，然后打印到标准输出。</li><li><strong>view</strong>: 使用 Scrapy 下载器下载 HTML ，然后用你的默认浏览器打开它。</li></ul><p><strong>例如</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ scrapy fetch http://blog.scrapinghub.com &gt; blog.html</span><br><span class="line">$ scrapy view http://scrapy.org</span><br></pre></td></tr></table></figure><h2 id="使用-–pdb-选项，对爬虫进行事后剖析侦错"><a href="#使用-–pdb-选项，对爬虫进行事后剖析侦错" class="headerlink" title="使用 –pdb 选项，对爬虫进行事后剖析侦错"></a>使用 –pdb 选项，对爬虫进行事后剖析侦错</h2><p>编写防故障软件几乎是不可能的。这种情况对于网络爬虫更加糟糕，因为它们处理的网页内容是经常变化的（和损坏的）。最好接受我们的爬虫最后将会失败，并确保我们有工具来快速了解为什么它挂了，并能尽快解决这个问题。</p><p>Python 的回溯是棒棒哒，但在某些情况下，它们不向我们提供关于在我们的代码中发生了什么的足够信息。这就是事后剖析侦错的用武之地。Scrapy 提供了–  <code>--pdb</code> 命令行选项，它在你的爬虫挂掉的地方打开一个 pdb 会话，这样你就可以检查它的上下文，从而明白发生了什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ scrapy crawl blog -o blog_items.jl --pdb</span><br></pre></td></tr></table></figure><p>如果你的爬虫由于致命异常而挂了，那么 pdb 调试器将会打开，这样你就可以仔细检查其死因。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好啦，这就是Scrapy技巧的五月版。在<a href="http://scrapy.readthedocs.io/en/latest/topics/debug.html #debugging-spiders" target="_blank" rel="noopener"> Scrapy官方文档 </a>，你也可以看到其中一些调试技巧。</p><p>因为这里，我们是要帮助你更有效地爬取网页的，所以<a href="https://twitter.com/ScrapingHub" target="_blank" rel="noopener"> 请让我们知道 </a>你希望在将来看到什么。那就下个月再见啦！</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapinghub 的 Scrapy 技巧系列（三）</title>
      <link href="/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文；<a href="https://blog.scrapinghub.com/2016/04/20/scrapy-tips-from-the-pros-april-2016-edition/" target="_blank" rel="noopener"> Scrapy Tips from the Pros: April 2016 Edition </a></p><hr><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/scrapy-tips.png" alt="Scrapy Tips"></p><p>欢迎来到四月版本的<a href="https://blog.scrapinghub.com/category/scrapy-tips-from-the-pros/" target="_blank" rel="noopener"> Scrapy技巧 </a>。每个月我们都会发布一些我们发现的技巧和 hack ，以帮助你的 Scrapy 工作流更加顺利。</p><p>这个月，我们只给你带来了一个提示，但是，不是这样的哦！所以，如果你发现你在爬取一个需要通过表单提交数据的 ASP.Net 页面，那么，就回来看看这篇文章吧。</p><a id="more"></a><h1 id="处理-ASP-Net-页面，-PostBack-和视图状态"><a href="#处理-ASP-Net-页面，-PostBack-和视图状态" class="headerlink" title="处理 ASP.Net 页面， PostBack 和视图状态"></a>处理 ASP.Net 页面， PostBack 和视图状态</h1><p>使用 ASP.Net 技术构建的网站对于 web 爬虫开发者来说通常是一场噩梦，这主要是由于它们处理表单的方式。</p><p>这类网站通常在请求和响应中发送状态，以便跟踪客户端的 UI 状态。想想那些你浏览许多页面，在 HTML 表单中填写你的数据来注册的网站吧。一个 ASP.Net 网站通常存储那些在前一个页面填写的数据到一个名为 <code>__VIEWSTATE</code> 的隐藏字段中，这个字段包含了像下面显示的一个巨大的字符串：</p><p><a href="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image032.png" target="_blank" rel="noopener"><img src="https://scrapinghub.files.wordpress.com/2016/04/image032.png?w=648&amp;h=408" alt="ViewState example"></a></p><p><em>我不是在开玩笑，它真的很大！ (有时是数十kB)</em></p><p>这是一个 Base64 编码字符串，它表示客户端 UI 状态，包括来自表单的值。这在表单中的用户动作触发 POST 请求返回给服务器以获取其他字段的数据的 web 应用中，这种设置尤为常见。</p><p>每次浏览器向服务器发起 POST 请求时，就会带着这个 <code>__VIEWSTATE</code> 字段。然后，服务器根据该数据解码并加载客户端的 UI 状态，执行一些处理，基于新值为新的视图状态计算值，然后将这个新的视图状态作为隐藏字段渲染结果页面。</p><p>如果 <code>__VIEWSTATE</code> 没有发回给服务器，那么你可能会看到一个空白表单，因为服务器完全失去了客户端 UI 状态。所以，为了爬取像这样的根据表单生成的页面，你必须确保你的爬虫在它发送的请求中带有这个状态，否则，页面将不会加载它应该加载的内容。</p><p>这里有一个具体的例子，你可以亲眼看到如何处理这类情况。</p><h1 id="抓取一个基于视图状态的网站"><a href="#抓取一个基于视图状态的网站" class="headerlink" title="抓取一个基于视图状态的网站"></a>抓取一个基于视图状态的网站</h1><p>今天抓取的小白鼠是<a href="http://spidyquotes.herokuapp.com/search.aspx" target="_blank" rel="noopener"> spidyquotes.herokuapp.com/search.aspx </a>。 SpidyQuotes 列出了来自名人的引言，而它的搜索页面允许你根据作者和标签过滤引言：</p><p><a href="https://scrapinghub.files.wordpress.com/2016/04/image052.png" target="_blank" rel="noopener"><img src="https://scrapinghub.files.wordpress.com/2016/04/image052.png?w=300&amp;h=246" alt="image05"></a></p><p><strong>Author</strong> 字段的改变触发了一个到服务器的 POST 请求，以使用与所选的用户相关的标签来填充 <strong>Tag</strong>选择框。点击 <strong>Search</strong>，显示与所选作者的标签相对应的引言：</p><p><a href="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image041.png" target="_blank" rel="noopener"><img src="https://scrapinghub.files.wordpress.com/2016/04/image041.png?w=295&amp;h=300" alt="image04"></a></p><p>为了爬取这些引言，我们的爬虫必须模拟用户选择一个作者，一个标签并提交表单。通过使用<a href="https://developer.chrome.com/devtools" target="_blank" rel="noopener"> Network Panel </a>（你可以通过浏览器的开发者工具访问）来仔细看看这个流程的每一步。首先，访问<a href="http://spidyquotes.herokuapp.com/search.aspx" target="_blank" rel="noopener"> spidyquotes.herokuapp.com/search.aspx </a>，然后按下 F12 或 Ctrl+Shift+I (如果你使用的是 Chrome )来加载工具，接着点击 Network 选项卡。</p><p><a href="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image001.png" target="_blank" rel="noopener"><img src="https://scrapinghub.files.wordpress.com/2016/04/image001.png?w=648&amp;h=430" alt="image00"></a></p><p>从列表中选择一个作者，然后你将看到生成了一个发往 <code>/filter.aspx</code>的请求。点击资源名 (filter.aspx) ，你就可以看到请求细节，其中包括你选择的作者，以及在来自于服务器的原始响应中的 <code>__VIEWSTATE</code> 数据。</p><p><a href="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image022.png" target="_blank" rel="noopener"><img src="https://scrapinghub.files.wordpress.com/2016/04/image022.png?w=648&amp;h=209" alt="image02"></a></p><p>选择一个标签并点击 Search 。你会看到你的浏览器发送了在表单中选择的值，以及一个与前面不同的 <code>__VIEWSTATE</code> 值。这是因为，当你选择作者时，服务器包含了一些新的信息在视图状态中。</p><p><a href="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/image011.png" target="_blank" rel="noopener"><img src="https://scrapinghub.files.wordpress.com/2016/04/image011.png?w=648&amp;h=234" alt="image01"></a></p><p>现在，你只需要构建一个爬虫，这个爬虫完成与你的浏览器做的事情。</p><h1 id="构建爬虫"><a href="#构建爬虫" class="headerlink" title="构建爬虫"></a>构建爬虫</h1><p>这里是你的爬虫应该遵循的步骤：</p><ol><li>抽取 <code>spidyquotes.herokuapp.com/filter.aspx</code></li><li><p>对于每一个在表单作者列表中找到的 <strong>Author</strong>：</p><ul><li>创建一个到 <code>/filter.aspx</code>的 POST 请求，同时传递选择的 <strong>Author</strong> 和 <strong>__VIEWSTATE</strong> 值</li></ul></li><li><p>对于在结果页面中找到的每一个 <strong>Tag</strong>：</p><ul><li>发送一个到<code>/filter.aspx</code>的 POST 请求，同时传递选择的 <strong>Author</strong>，选择的 <strong>Tag</strong> 和视图状态</li></ul></li><li><p>抓取结果页面</p></li></ol><h2 id="爬虫编码"><a href="#爬虫编码" class="headerlink" title="爬虫编码"></a>爬虫编码</h2><p>这里是我开发的从该网站抓取引言的爬虫，遵循了刚刚描述的步骤：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpidyQuotesViewStateSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'spidyquotes-viewstate'</span></span><br><span class="line">    start_urls = [<span class="string">'http://spidyquotes.herokuapp.com/search.aspx'</span>]</span><br><span class="line">    download_delay = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> response.css(<span class="string">'select#author &gt; option ::attr(value)'</span>).extract():</span><br><span class="line">            <span class="keyword">yield</span> scrapy.FormRequest(</span><br><span class="line">                <span class="string">'http://spidyquotes.herokuapp.com/filter.aspx'</span>,</span><br><span class="line">                formdata=&#123;</span><br><span class="line">                    <span class="string">'author'</span>: author,</span><br><span class="line">                    <span class="string">'__VIEWSTATE'</span>: response.css(<span class="string">'input#__VIEWSTATE::attr(value)'</span>).extract_first()</span><br><span class="line">                &#125;,</span><br><span class="line">                callback=self.parse_tags</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_tags</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> response.css(<span class="string">'select#tag &gt; option ::attr(value)'</span>).extract():</span><br><span class="line">            <span class="keyword">yield</span> scrapy.FormRequest(</span><br><span class="line">                <span class="string">'http://spidyquotes.herokuapp.com/filter.aspx'</span>,</span><br><span class="line">                formdata=&#123;</span><br><span class="line">                    <span class="string">'author'</span>: response.css(</span><br><span class="line">                        <span class="string">'select#author &gt; option[selected] ::attr(value)'</span></span><br><span class="line">                    ).extract_first(),</span><br><span class="line">                    <span class="string">'tag'</span>: tag,</span><br><span class="line">                    <span class="string">'__VIEWSTATE'</span>: response.css(<span class="string">'input#__VIEWSTATE::attr(value)'</span>).extract_first()</span><br><span class="line">                &#125;,</span><br><span class="line">                callback=self.parse_results,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_results</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">"div.quote"</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'quote'</span>: response.css(<span class="string">'span.content ::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: response.css(<span class="string">'span.author ::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tag'</span>: response.css(<span class="string">'span.tag ::text'</span>).extract_first(),</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p><strong>步骤1</strong>由 Scrapy 完成，它读取 start_urls ，然后生成一个到 <code>/search.aspx</code>的 GET 请求。</p><p>parse() 方法负责 <strong>步骤2</strong>。它遍历了在第一个选择框中找到的 <strong>Authors</strong>，然后为每一个 <strong>Author</strong>创建一个到 <code>/filter.aspx</code> 的<a href="http://doc.scrapy.org/en/latest/topics/request-response.html#formrequest-objects" target="_blank" rel="noopener"> FormRequest </a>，模拟用户点击了列表中的每一个元素。值得注意的是，parse() 方法从它所收到的表单中读取__VIEWSTATE字段，然后将其传回给服务器，所以服务器可以跟踪我们位于哪个页面流。</p><p><strong>步骤3</strong>由 parse_tags() 方法来处理。它与 parse() 方法非常类似，因为它提取了所列的 <strong>Tags</strong> ，然后创建 POST 请求来传递每一个 <strong>Tag</strong> ，在前一个步骤中选择的 <strong>Author</strong> 以及从服务器收到的 __VIEWSTATE。</p><p>最后，在 <strong>步骤4</strong>中，parse_results()方法解析页面展示的引言列表，然后从中生成项。</p><h2 id="使用-FormRequest-from-response-简化你的爬虫"><a href="#使用-FormRequest-from-response-简化你的爬虫" class="headerlink" title="使用 FormRequest.from_response() 简化你的爬虫"></a>使用 FormRequest.from_response() 简化你的爬虫</h2><p>你也许注意到，在发送 POST 请求到服务器之前，我们的爬虫抽取了那些它从服务器收到的表单中的预填值，并在它将创建的请求中包含了这些值。</p><p>我们不需要对其手工编码，因为<a href="http://scrapy.org/" target="_blank" rel="noopener"> Scrapy </a>提供了<a href="http://doc.scrapy.org/en/latest/topics/request-response.html#scrapy.http.FormRequest.from_response" target="_blank" rel="noopener"> FormRequest.from_response() </a>方法。该方法读取 response 对象，创建一个 <code>FormRequest</code>，它自动包含表单所有的预填值以及隐藏值。这是我们的爬虫的 parse_tags() 方法：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_tags</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> response.css(<span class="string">'select#tag &gt; option ::attr(value)'</span>).extract():</span><br><span class="line">        <span class="keyword">yield</span> scrapy.FormRequest.from_response(</span><br><span class="line">            response,</span><br><span class="line">            formdata=&#123;<span class="string">'tag'</span>: tag&#125;,</span><br><span class="line">            callback=self.parse_results,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></p><p>所以，无论何时你处理包含隐藏值和预填值的表单，使用 <code>from_response</code> 方法，因为这样你的代码会看起来干净得多。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好了，这就是这个月的技巧了。你可以<a href="http://msdn.microsoft.com/en-us/library/ms972976.aspx" target="_blank" rel="noopener"> 在这里读取更多关于ViewStates </a>的信息。我们希望你觉得这个技巧有用，并且很高兴看到你用它来做点什么。我们一直在寻找新的hack，所以如果你在爬取web的时候遇到了什么困难，请告诉我们。</p><p>随意在<a href="https://twitter.com/scrapinghub" target="_blank" rel="noopener"> Twitter </a>或者<a href="https://www.facebook.com/ScrapingHub/" target="_blank" rel="noopener"> Facebook </a>上告诉我们，你未来想看到什么吧。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapinghub 的 Scrapy 技巧系列（二）</title>
      <link href="/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018-04-12/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://blog.scrapinghub.com/2016/03/23/scrapy-tips-from-the-pros-march-2016-edition/" target="_blank" rel="noopener">Scrapy Tips from the Pros: March 2016 Edition</a></p><hr><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/scrapy-tips-march-2016.png" alt="Scrapy-Tips-March-2016"></p><p>欢迎来到三月份版本的<a href="https://blog.scrapinghub.com/category/scrapy-tips-from-the-pros/" target="_blank" rel="noopener"> Scrapy 技巧 </a>! 每个月，我们都会发布一些我们开发的技巧和 hack，来帮助你，使得你的 Scrapy 工作流更顺畅。</p><p>这个月，我们将涵盖如何和 CookiesMiddleware 一起使用<a href="http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#std:reqmeta-cookiejar" target="_blank" rel="noopener"> cookiejar </a>来绕过那些不允许你使用相同的 cookie 同时爬取多个页面的网站。我们还将分享一个一个好用的技巧，这个技巧关于如何和<a href="http://doc.scrapy.org/en/latest/topics/loaders.html" target="_blank" rel="noopener"> item loader </a>一起使用多个备用的 XPath/CSS 表达式，来从网站上更可靠地获取数据。</p><a id="more"></a><p><strong>学生请阅读以下：我们正参与<a href="https://blog.scrapinghub.com/2016/03/14/join-scrapinghub-for-google-summer-of-code-2016/" target="_blank" rel="noopener"> 2016年Google编程之夏 </a>，而我们一部分的项目点子使用了Scrapy! 如果你感兴趣，那么看一看<a href="http://gsoc2016.scrapinghub.com/ideas/" target="_blank" rel="noopener"> 我们的点子 </a>，并记得<a href="https://wiki.python.org/moin/SummerOfCode/2016#How_do_I_Apply.3F" target="_blank" rel="noopener"> 在3.25，也就是周五之前申请 </a>!</strong></p><p><strong>如果你不是学生，那么请与你的学生朋友分享。他们会获得一份夏天津贴，甚至最后我们可能聘用他们。</strong></p><h1 id="使用-CookieJar-解决站点怪异会话行为"><a href="#使用-CookieJar-解决站点怪异会话行为" class="headerlink" title="使用 CookieJar 解决站点怪异会话行为"></a>使用 CookieJar 解决站点怪异会话行为</h1><p>那些将你的 UI 状态存储在自己的服务器的会话中的网站是难以导航的，更别说抓取。你有没有遇到过那些在同一个网站上打开的一个选项卡会影响其他选项卡的网站？那么，你可能会碰到这个问题。</p><p>虽然这是令人沮丧的，它甚至对于网络爬虫更糟糕。它会严重阻碍网络爬虫会话。不幸的是，这是 ASP.Net 和基于 J2EE 的网站的通用模式。而这正是<a href="http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#std:reqmeta-cookiejar" target="_blank" rel="noopener"> cookiejars </a>的用处所在。虽然不是经常需要 cookiejar ，但是对于那些意想不到的情况，你会很高兴拥有它。</p><p>当你的爬取一个网站时，Scrapy 自动为你处理 cookie ，存储并在随后的请求到将其发送到同一站点。但是，正如你可能知道的， Scrapy 请求是异步的。这意味着，你可能有发到相同的网站上的多个请求被同时处理，同时共享相同的 cookie 。为避免在爬取这些类型的网站时，请求相互影响，你必须为不同的请求设置不同的 cookie 。</p><p>您可以通过使用一个<a href="http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#std:reqmeta-cookiejar" target="_blank" rel="noopener"> cookiejar </a>为同一网站中的不同页面存储单独的 cookie 来做到这点。该 cookiejar 只是在 Scrapy 爬取会话期间保持的一个 cookie 键值集合。你只需要为每个你想要存储的 cookie 定义一个唯一标识符，然后当你想要使用特定的 cookie 时，使用它的标识符。</p><p>例如，假设你想抓取一个网站上的多个类别，但这个网站存储与你在服务器会话中爬行/浏览的类别相关的数据。要同时爬取这些类别，则需要通过将类别名称作为 cookiejar 元参数的标识符来为每个类别创建一个 cookie ：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.example.com/category/photo'</span>,</span><br><span class="line">        <span class="string">'http://www.example.com/category/videogames'</span>,</span><br><span class="line">        <span class="string">'http://www.example.com/category/tablets'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            category = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">'cookiejar'</span>: category&#125;)</span><br></pre></td></tr></table></figure></p><p>在此情况下，将管理三种不同的 Cookie（<code>photo</code>、 <code>videogames</code> 和 <code>tablets</code>）。每当你传递一个不存在的键作为 cookiejar 元值（例如，当一个类别名称尚未访问）时，你可以创建一个新的 Cookie 。当我们传递的键已经存在时，<a href="http://scrapy.org/" target="_blank" rel="noopener"> Scrapy </a>使用该请求相应的 cookie 。</p><p>所以，例如，如果你想重新使用已被用来抓取 <code>videogames</code>页面的 cookie，那么你只需要将 <code>videogames</code> 作为唯一键传递给 cookiejar。它将使用先用的 cookie，而不是创建一个新的 cookie：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> scrapy.Request(<span class="string">'http://www.example.com/atari2600'</span>, meta=&#123;<span class="string">'cookiejar'</span>: <span class="string">'videogames'</span>&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="添加备用的-CSS-XPath-规则"><a href="#添加备用的-CSS-XPath-规则" class="headerlink" title="添加备用的 CSS/XPath 规则"></a>添加备用的 CSS/XPath 规则</h1><p>当你需要完成比简单地填充字典或带有你的 spider 收集的数据的 Item 对象更多的东西时，<a href="http://doc.scrapy.org/en/latest/topics/loaders.html" target="_blank" rel="noopener"> Item Loader </a>是有用的。例如，你可能需要将一些后处理逻辑添加到你刚刚收集的数据中。你可能对某些如将标题中的每个单词首字母大写一样简单的事，甚至是更复杂的操作有兴趣。使用 ItemLoader ，你可以从 spider 中解耦这种后处理逻辑，以便拥有一个更易于维护的设计。</p><p>这个技巧说明如何将额外的功能添加到一个 Item Loader 中。比方说，你正爬取 Amazon.com ，并且提取每个产品的价格。你可以使用 Item Loader 来为 ProductItem 对象填充产品数据：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    url = scrapy.Field()</span><br><span class="line">    price = scrapy.Field()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmazonSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"amazon"</span></span><br><span class="line">    allowed_domains = [<span class="string">"amazon.com"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_product</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        loader = ItemLoader(item=ProductItem(), response=response)</span><br><span class="line">        loader.add_css(<span class="string">'price'</span>, <span class="string">'#priceblock_ourprice ::text'</span>)</span><br><span class="line">        loader.add_css(<span class="string">'name'</span>, <span class="string">'#productTitle ::text'</span>)</span><br><span class="line">        loader.add_value(<span class="string">'url'</span>, response.url)</span><br><span class="line">        <span class="keyword">yield</span> loader.load_item()</span><br></pre></td></tr></table></figure><p>这种方法工作得很好，除非被爬取的产品是一次交易。这是因为对比那些普通的价格， Amazon 以一种稍微不同的格式展示交易价格。而普通产品的价格是这样表示的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"priceblock_ourprice"</span> <span class="attr">class</span>=<span class="string">"a-size-medium a-color-price"</span>&gt;</span></span><br><span class="line">    $699.99</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>交易价格显示稍微有点不同：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"priceblock_dealprice"</span> <span class="attr">class</span>=<span class="string">"a-size-medium a-color-price"</span>&gt;</span></span><br><span class="line">    $649.99</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>要处理这种情况的一个好方法是，为 Item loader 中的价格字段添加一个后备规则。这是一个只有当该字段的前一规则已经失败时才应用的规则。要用 Item Loader 做到这一点，你可以添加一个 <code>add_fallback_css</code> 方法：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmazonItemLoader</span><span class="params">(ItemLoader)</span>:</span></span><br><span class="line">    default_output_processor = TakeFirst()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_collected_values</span><span class="params">(self, field_name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self._values[field_name] <span class="keyword">if</span> field_name <span class="keyword">in</span> self._values <span class="keyword">else</span> self._values.default_factory())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_fallback_css</span><span class="params">(self, field_name, css, *processors, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> any(self.get_collected_values(field_name)):</span><br><span class="line">            self.add_css(field_name, css, *processors, **kw)</span><br></pre></td></tr></table></figure></p><p>正如你所看到的， 如果对于该字段，没有之前收集到的值，那么 <code>add_fallback_css</code> 方法将使用 CSS 规则。现在，我们可以改变我们的 spider 来使用 AmazonItemLoader ，然后添加后备 CSS 规则到我们的 loader 中：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_product</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    loader = AmazonItemLoader(item=ProductItem(), response=response)</span><br><span class="line">    loader.add_css(<span class="string">'price'</span>, <span class="string">'#priceblock_ourprice ::text'</span>)</span><br><span class="line">    loader.add_fallback_css(<span class="string">'price'</span>, <span class="string">'#priceblock_dealprice ::text'</span>)</span><br><span class="line">    loader.add_css(<span class="string">'name'</span>, <span class="string">'#productTitle ::text'</span>)</span><br><span class="line">    loader.add_value(<span class="string">'url'</span>, response.url)</span><br><span class="line">    <span class="keyword">yield</span> loader.load_item()</span><br></pre></td></tr></table></figure></p><p>这个技巧可以节省你的时间，让你的 spider 更健壮。如果有一个 CSS 规则无法获取数据，那么可以应用其他跪在来提取所需的数据。</p><p>如果Item Loader对于你来说是新玩意，那么<a href="http://doc.scrapy.org/en/latest/topics/loaders.html" target="_blank" rel="noopener"> 看看这个文档 </a>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>就是这样了！请跟我们分享你在网络抓取以及提取数据时碰到的任何问题。我们一直在寻找新的技巧和 hack ，并且在我们的每月专栏上分享我们的 Scrapy 技巧。在<a href="https://twitter.com/ScrapingHub" target="_blank" rel="noopener"> Twitter </a>或者<a href="https://www.facebook.com/ScrapingHub/" target="_blank" rel="noopener"> Facebook  </a>上联系我们，并且让我们知道我们是否帮到了你。</p><p>如果你还没有，试试<a href="http://doc.scrapinghub.com/portia.html" target="_blank" rel="noopener"> Portia </a>，我们的开源可视化 Web 抓取工具。我们知道你喜欢<a href="http://scrapy.org/" target="_blank" rel="noopener"> Scrapy </a>，但是体验从来就不是一种令人痛苦的事 ;)</p><p>请<a href="http://gsoc2016.scrapinghub.com/ideas/" target="_blank" rel="noopener"> 申请加入我们的2016年Google编程之夏 </a>，截止如期是 3.25，周五！</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapinghub 的 Scrapy 技巧系列（一）</title>
      <link href="/2018-04-11/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018-04-11/Scrapinghub-%E7%9A%84-Scrapy-%E6%8A%80%E5%B7%A7%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文：<a href="http://blog.scrapinghub.com/2016/01/19/scrapy-tips-from-the-pros-part-1/" target="_blank" rel="noopener"> 跟着高手学习Scrapy技巧：第一部分 </a></p><hr><p><a href="http://scrapy.org" target="_blank" rel="noopener">Scrapy </a> 是<a href="http://scrapinghub.com" target="_blank" rel="noopener"> Scrapinghub </a>  的关键部分。我们广泛地采用此框架，并已积累了许多各种不同的快捷方法来解决常见问题。我们推出了一个系列来与大家分享这些 Scrapy 的技巧，这样，你就可以在你的日常工作流程中最有效的使用它。每一个博文将给出两到三个提示，敬请关注。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/scrapylogo.png" alt="scrapylogo"></p><a id="more"></a><h2 id="使用-Extruct-从网站中提取微观数据-Microdata"><a href="#使用-Extruct-从网站中提取微观数据-Microdata" class="headerlink" title="使用 Extruct 从网站中提取微观数据 ( Microdata )"></a>使用 Extruct 从网站中提取微观数据 ( Microdata )</h2><p>我相信网络爬虫的每一个开发者都会有理由来咒骂那些对他们的网站使用凌乱的布局的 Web 开发者。没有语义标记的网站，特别是那些基于 HTML 表格的网站，绝对是槽糕透顶。这些类型的网站使得爬取更加困难，因为几乎没有关于每一个元素代表什么的提示。有时候，你甚至不得不相信每个页面上的元素顺序将保持不变，从而抓取你需要的数据。</p><p>这就是为什么我们如此感激<a href="https://schema.org/" target="_blank" rel="noopener"> Schema.org </a> ，共同努力来使得语义标记在网页上。该项目为 Web 开发者提供了在他们的网站上展示一定范围的不同对象（包括 Person、 Product 和 Review）的架构，并使用例如<a href="http://www.w3.org/TR/microdata/" target="_blank" rel="noopener"> Microdata </a>，<a href="https://rdfa.info/" target="_blank" rel="noopener"> RDFa </a> ，<a href="http://json-ld.org/" target="_blank" rel="noopener"> JSON-LD </a> 等的任何元数据格式。这使得搜索引擎工作更加容易，因为它们可以从网站上提取有用信息，而不必深入到他们所抓取网站的 HTML 结构中。</p><p>例如，<a href="https://schema.org/AggregateRating" target="_blank" rel="noopener"> AggregateRating </a> 是网上零售商用来展示他们产品的用户评级的架构。下面是描述一个使用<a href="http://www.w3.org/TR/microdata/" target="_blank" rel="noopener"> Microdata format </a> 的网上商店中的一个产品的用户评级的标记：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">itemprop</span>=<span class="string">"aggregateRating"</span> <span class="attr">itemscope</span>=<span class="string">""</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/AggregateRating"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"worstRating"</span> <span class="attr">content</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"bestRating"</span> <span class="attr">content</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bbystars-small-yellow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fill"</span> <span class="attr">style</span>=<span class="string">"width: 88%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"ratingValue"</span> <span class="attr">aria-label</span>=<span class="string">"4.4 out of 5 stars"</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"reviewCount"</span> <span class="attr">content</span>=<span class="string">"305733"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这种方式，搜索引擎可以在搜索结果中同时展示一个产品的评级及其 URL ，而不需要为每一个网站编写特定的爬虫：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/selection_096.png" alt="Example of a google search showing ratings for a product "></p><p>你还可以受益于一些网站使用的语义标记。我们推荐使用<a href="https://github.com/scrapinghub/extruct" target="_blank" rel="noopener"> Extruct </a>，一个从 HTML 文档中中提取 <a href="http://blog.scrapinghub.com/2014/06/18/extracting-schema-org-microdata-using-scrapy-selectors-and-xpath/" target="_blank" rel="noopener"> 嵌入式元数据 </a>  的库。它分析整个 HTML 并返回一个包含微观数据（ microdata ）的 Python 字典。看看我们是如何用它来提取展示用户评级的微观数据的：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> extruct.w3cmicrodata <span class="keyword">import</span> MicrodataExtractor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mde = MicrodataExtractor()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = mde.extract(html_content)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'items'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'http://schema.org/AggregateRating'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">        <span class="string">'reviewCount'</span>: <span class="string">'305733'</span>,</span><br><span class="line">        <span class="string">'bestRating'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'ratingValue'</span>: <span class="string">u'4.4'</span>,</span><br><span class="line">        <span class="string">'worstRating'</span>: <span class="string">'1'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[<span class="string">'items'</span>][<span class="number">0</span>][<span class="string">'properties'</span>][<span class="string">'ratingValue'</span>]</span><br><span class="line"><span class="string">u'4.4'</span></span><br></pre></td></tr></table></figure></p><p>现在，让我们建立一个使用 Extruct 的爬虫，它从<a href="http://www.apple.com/shop/mac/mac-accessories" target="_blank" rel="noopener"> 苹果产品网站 </a> 上提取价格和评级。该网站使用了微观数据来存储所列出的产品信息。它为每个产品使用这个结构 T ：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Product"</span> <span class="attr">itemscope</span>=<span class="string">"itemscope"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/MLA02.jpg"</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/shop/product/MLA02/magic-mouse-2?"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>Magic Mouse 2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"as-pinwheel-info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">itemprop</span>=<span class="string">"offers"</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Offer"</span> <span class="attr">itemscope</span>=<span class="string">"itemscope"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"priceCurrency"</span> <span class="attr">content</span>=<span class="string">"USD"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"as-pinwheel-pricecurrent"</span> <span class="attr">itemprop</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">        $79.00</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>有了这个设置，你不需要使用 XPath 或者 CSS 选择器来提取所需数据。你只需要在你的爬虫中使用 Extruct 的 MicrodataExtractor ：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> extruct.w3cmicrodata <span class="keyword">import</span> MicrodataExtractor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"apple"</span></span><br><span class="line">    allowed_domains = [<span class="string">"apple.com"</span>]</span><br><span class="line">    start_urls = (</span><br><span class="line">        <span class="string">'http://www.apple.com/shop/mac/mac-accessories'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        extractor = MicrodataExtractor()</span><br><span class="line">        items = extractor.extract(response.body_as_unicode(), response.url)[<span class="string">'items'</span>]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">'properties'</span>, &#123;&#125;).get(<span class="string">'name'</span>):</span><br><span class="line">                properties = item[<span class="string">'properties'</span>]</span><br><span class="line">                <span class="keyword">yield</span> &#123;</span><br><span class="line">                    <span class="string">'name'</span>: properties[<span class="string">'name'</span>],</span><br><span class="line">                    <span class="string">'price'</span>: properties[<span class="string">'offers'</span>][<span class="string">'properties'</span>][<span class="string">'price'</span>],</span><br><span class="line">                    <span class="string">'url'</span>: properties[<span class="string">'url'</span>]</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></p><p>此爬虫会生成这样的项：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"http://www.apple.com/shop/product/MJ2R2/magic-trackpad-2?fnode=4c"</span>,</span><br><span class="line">    <span class="string">"price"</span>: <span class="string">u"$129.00"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">u"Magic Trackpad 2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，当你爬取的网站使用微观数据来将语义信息添加到它的内容中时，使用<a href="https://github.com/scrapinghub/extruct" target="_blank" rel="noopener"> Extruct </a>。这是一个比依赖统一的页面布局或者浪费时间分析 HTML 源代码更健壮的解决方案。</p><h2 id="使用-js2xml-抓取嵌入在-JavaScript-代码段中的数据"><a href="#使用-js2xml-抓取嵌入在-JavaScript-代码段中的数据" class="headerlink" title="使用 js2xml 抓取嵌入在 JavaScript 代码段中的数据"></a>使用 js2xml 抓取嵌入在 JavaScript 代码段中的数据</h2><p>你是否曾经受挫于你的浏览器呈现的网页与Scrapy下载的网页之间的差距？这可能是因为该网页中的一些内容并不在服务器发送给你的响应中。相反，它们是由你的浏览器通过JavaScript代码生成的。</p><p>你可以通过将此请求传递给一个例如<a href="http://scrapinghub.com/splash/" target="_blank" rel="noopener"> Splash </a>的 JavaScript 渲染服务来解决此问题。Splash 运行页面上的 JavaScript ，然后返回最终的页面结构以供你的爬虫使用。</p><p>Splash 专门为此设计，并<a href="http://blog.scrapinghub.com/2015/03/02/handling-javascript-in-scrapy-with-splash/" target="_blank" rel="noopener"> 与Scrapy很好的整合在一起 </a>。然而，在某些情况下，你需要的是一些简单功能，例如从一个 JavaScript 段中获取一个变量的值，所以使用这种强大的工具将大材小用。而这恰恰是 <a href="https://github.com/redapple/js2xml" target="_blank" rel="noopener"> js2xml </a> 的用武之地。它是一个将 JavaScript 代码转换成 XML 数据的库。</p><p>例如，假设一个在线零售商网站通过 JavaScript 加载产品评级。混合在该 HTML 中有这样一段 JavaScript 代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> totalReviewsValue = <span class="number">32</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> averageRating = <span class="number">4.5</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(totalReviewsValue != <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">        events = <span class="string">"..."</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>要使用 js2xml 提取 <code>averageRating</code> 的值，我们首选需要提取 <code>&lt;script&gt;</code>块，然后使用 js2xml 将此代码转换成 XML ：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>js_code = response.xpath(<span class="string">"//script[contains(., 'averageRating')]/text()"</span>).extract_first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> js2xml</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parsed_js = js2xml.parse(js_code)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> js2xml.pretty_print(parsed_js)</span><br><span class="line">&lt;program&gt;</span><br><span class="line">  &lt;var name=<span class="string">"totalReviewsValue"</span>&gt;</span><br><span class="line">    &lt;number value=<span class="string">"32"</span>/&gt;</span><br><span class="line">  &lt;/var&gt;</span><br><span class="line">  &lt;var name=<span class="string">"averageRating"</span>&gt;</span><br><span class="line">    &lt;number value=<span class="string">"4.5"</span>/&gt;</span><br><span class="line">  &lt;/var&gt;</span><br><span class="line">  &lt;<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;predicate&gt;</span><br><span class="line">      &lt;binaryoperation operation=<span class="string">"!="</span>&gt;</span><br><span class="line">        &lt;left&gt;&lt;identifier name="totalReviewsValue"/&gt;&lt;/left&gt;</span><br><span class="line">        &lt;right&gt;&lt;number value="0"/&gt;&lt;/right&gt;</span><br><span class="line">      &lt;/binaryoperation&gt;</span><br><span class="line">    &lt;/predicate&gt;</span><br><span class="line">    &lt;then&gt;</span><br><span class="line">      &lt;block&gt;</span><br><span class="line">        &lt;assign operator=<span class="string">"="</span>&gt;</span><br><span class="line">          &lt;left&gt;&lt;identifier name="events"/&gt;&lt;/left&gt;</span><br><span class="line">          &lt;right&gt;&lt;string&gt;...&lt;/string&gt;&lt;/right&gt;</span><br><span class="line">        &lt;/assign&gt;</span><br><span class="line">      &lt;/block&gt;</span><br><span class="line">    &lt;/then&gt;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/program&gt;</span><br></pre></td></tr></table></figure></p><p>现在，只需要建立一个 Scrapy 的 Selector ，然后使用 XPath 获取我们想要的值：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>js_sel = scrapy.Selector(_root=parsed_js)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>js_sel.xpath(<span class="string">"//program/var[@name='averageRating']/number/@value"</span>).extract_first()</span><br><span class="line"><span class="string">u'4.5'</span></span><br></pre></td></tr></table></figure></p><p>虽然你可能用思考的速度就可以编写一个正则表达式来解决这个问题，但是，一个 JavaScript 解析器将会更可靠。我们这里使用的例子是非常简单的，但在一些更复杂的例子中，正则表达式可能更难以维护得多。</p><h2 id="使用-w3lib-url-中的函数来从-URL-中抓取数据"><a href="#使用-w3lib-url-中的函数来从-URL-中抓取数据" class="headerlink" title="使用 w3lib.url 中的函数来从 URL 中抓取数据"></a>使用 w3lib.url 中的函数来从 URL 中抓取数据</h2><p>有时候，你感兴趣的数据段并不单独在一个 HTML 标签内。通常，你需要从页面上列出的 URL 中获取一些参数的值。例如，你可能对获取在 HTML 中列出的 URL 中的 <code>username</code> 的值感兴趣：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users?username=johndoe23"</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users?active=0&amp;username=the_jan"</span>&gt;</span>Jan Roe<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     …</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/users?active=1&amp;username=janie&amp;ref=b1946ac9249&amp;gas=_ga=1.234.567"</span>&gt;</span>Janie Doe<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也许你会试图使用<a href="https://xkcd.com/208/" target="_blank" rel="noopener"> 正则表达式的超能力 </a>, 但是，请淡定，这里的<a href="https://github.com/scrapy/w3lib" target="_blank" rel="noopener"> w3lib </a>有一个更可靠的解决方案可以挽救局面：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> w3lib.url <span class="keyword">import</span> url_query_parameter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url_query_parameter(<span class="string">'/users?active=0&amp;username=the_jan'</span>, <span class="string">'username'</span>)</span><br><span class="line">    <span class="string">'the_jan'</span></span><br></pre></td></tr></table></figure></p><p>假如你对<a href="https://github.com/scrapy/w3lib" target="_blank" rel="noopener"> w3lib </a>感到陌生，那么看一看<a href="http://w3lib.readthedocs.org/en/latest/w3lib.html" target="_blank" rel="noopener"> 文档 </a>。稍后，我们将在我们的 <strong>跟着高手学习Scrapy技巧</strong> 系列中覆盖此Python库的一些其他功能。</p><h2 id="用-Scrapy-SitemapSpider-抓取网站"><a href="#用-Scrapy-SitemapSpider-抓取网站" class="headerlink" title="用 Scrapy SitemapSpider 抓取网站"></a>用 Scrapy SitemapSpider 抓取网站</h2><p>网络抓取工具以 URL 为基础。他们拥有的越多，他们生活的时间越长。为任何特定网站找到一个好的网址来源非常重要，因为它为抓取工具提供了一个强有力的起点。</p><p>站点地图是种子网址的绝佳来源。网站开发人员使用它们来指示哪些URL可用于以机器可读格式进行爬网。站点地图也是发现网页的好方法，否则无法访问网页，因为有些网页可能未链接到站点地图以外的任何其他页面。</p><p>站点地图通常可在<code>/sitemap.xml</code>，<code>robots.txt</code>文件中指定的不同位置或位于不同位置。</p><p>使用 Scrapy ，您无需担心解析 XML 和发出请求。它包含一个 SitemapSpider 类，您可以继承它以处理所有这些问题。</p><p><strong>SitemapSpider in Action</strong>：假设您想抓取 Apple 的网站来检查不同的产品。您希望访问尽可能多的网页，以便尽可能多地抓取数据。幸运的是，Apple 的网站在 <a href="http://apple.com/sitemap.xml" target="_blank" rel="noopener"> apple.com/sitemap.xml </a> 上提供了一个网站地图，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://www.apple.com/<span class="tag">&lt;/<span class="name">loc</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://www.apple.com/about/<span class="tag">&lt;/<span class="name">loc</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://www.apple.com/about/workingwithapple.html<span class="tag">&lt;/<span class="name">loc</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">loc</span>&gt;</span>http://www.apple.com/accessibility/<span class="tag">&lt;/<span class="name">loc</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Scrapy 的通用 <a href="http://doc.scrapy.org/en/latest/topics/spiders.html?_ga=2.191979183.427721090.1523448002-1918622539.1516814412#sitemapspider" target="_blank" rel="noopener"> SitemapSpider </a> 类实现了解析和分派处理站点地图所需的所有请求的逻辑。它从站点地图中读取和提取 URL ，并会为它找到的每个 URL 分派一个请求。这是一个蜘蛛，它会使用网站地图作为种子来刮掉 Apple 的网站：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleSpider</span><span class="params">(SitemapSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'apple-spider'</span></span><br><span class="line">    sitemap_urls = [<span class="string">'http://www.apple.com/sitemap.xml'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'title'</span>: response.css(<span class="string">"title ::text"</span>).extract_first(),</span><br><span class="line">            <span class="string">'url'</span>: response.url</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>正如您所看到的，您只需要 SiteSiteider 的子类并将该站点地图的 URL 添加到该 sitemap_urls 属性。</p><p>现在，运行 spider 并检查结果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scrapy runspider apple_spider.py -o items.jl --nolog</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> head -n 5 items.jl </span></span><br><span class="line">&#123;"url": "http://www.apple.com/", "title": "Apple"&#125;</span><br><span class="line">&#123;"url": "http://www.apple.com/ae/support/products/iphone.html", "title": "Support - AppleCare+ - iPhone - Apple (AE)"&#125;</span><br><span class="line">&#123;"url": "http://www.apple.com/ae/support/products/ipad.html", "title": "Support - AppleCare+ - iPad - Apple (AE)"&#125;</span><br><span class="line">&#123;"url": "http://www.apple.com/ae/support/products/", "title": "Support - AppleCare - Apple (AE)"&#125;</span><br><span class="line">&#123;"url": "http://www.apple.com/ae/support/ipod/", "title": "iPod - Apple Support"&#125;</span><br></pre></td></tr></table></figure></p><p>Scrapy 会在站点地图中为 SitemapSpider 找到的每个网址发送一个请求，然后它会调用 parse 处理它获取的每个响应的方法。但是，网站中的某些页面在结构上可能会有所不同，因此您可能希望对不同类型的页面使用多个回调。</p><p>例如，您可以定义一个特定的回调来处理 Mac 页面，另一个用于 iTunes 页面和 parse 所有其他页面的默认方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleSpider</span><span class="params">(SitemapSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'apple-spider'</span></span><br><span class="line">    sitemap_urls = [<span class="string">'http://www.apple.com/sitemap.xml'</span>]</span><br><span class="line">    sitemap_rules = [</span><br><span class="line">        (<span class="string">'/mac/'</span>, <span class="string">'parse_mac'</span>),</span><br><span class="line">        (<span class="string">'/itunes/'</span>, <span class="string">'parse_itunes'</span>),</span><br><span class="line">        (<span class="string">''</span>, <span class="string">'parse'</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.log(<span class="string">"default parsing method for &#123;&#125;"</span>.format(response.url))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_mac</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.log(<span class="string">"parse_mac method for &#123;&#125;"</span>.format(response.url))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_itunes</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        self.log(<span class="string">"parse_itunes method for &#123;&#125;"</span>.format(response.url))</span><br></pre></td></tr></table></figure><p>要做到这一点，您必须为 <code>sitemap_rules</code> 您的类添加一个属性，将 URL 模式映射到回调。例如，与 <code>/mac/</code> 模式匹配的 URL 将通过该 <code>parse_mac</code> 方法处理其响应。</p><p>因此，下次您编写抓取工具时，如果您想全面抓取网站，请务必使用 SitemapSpider 。</p><p>有关更多功能，请查看<a href="http://doc.scrapy.org/en/latest/topics/spiders.html?_ga=2.229931289.427721090.1523448002-1918622539.1516814412#sitemapspider" target="_blank" rel="noopener"> SitemapSpider </a>的文档。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通 Scrapy 网络爬虫（代理篇）</title>
      <link href="/2018-04-08/%E7%B2%BE%E9%80%9A-Scrapy-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BB%A3%E7%90%86%E7%AF%87%EF%BC%89/"/>
      <url>/2018-04-08/%E7%B2%BE%E9%80%9A-Scrapy-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E4%BB%A3%E7%90%86%E7%AF%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<h5 id="使用-HTTP-代理"><a href="#使用-HTTP-代理" class="headerlink" title="使用 HTTP 代理"></a>使用 HTTP 代理</h5><p>HTTP 代理服务器可以比作客户端与 Web 服务器（网站）之间的一个信息中转站，客户端发送的 HTTP 请求和 Web 服务器返回的 HTTP 响应通过代理服务器转发给对方，如图所示：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/proxy1.jpg" alt="proxy1"></p><a id="more"></a><p>爬虫程序在爬取某些网站时也需要使用代理。例如：</p><ul><li><p>由于网络环境园素，直接爬取速度太慢，使用代理提高爬取速度。</p></li><li><p>某些网站对用户的访问速度进行限制，爬取过快会被封禁 ip ，使用代理防止被封禁。</p></li><li><p>由于地方法律或政治原因，某些网站无法直接访问，使用代理绕过访问限制。</p></li></ul><h5 id="HttpProxyMiddleware"><a href="#HttpProxyMiddleware" class="headerlink" title="HttpProxyMiddleware"></a>HttpProxyMiddleware</h5><p>Scrapy 内部提供了一个下载中间件 HttpProxyMiddleware ，专门用于给 Scrapy 爬虫设置代理。</p><h5 id="使用简介"><a href="#使用简介" class="headerlink" title="使用简介"></a>使用简介</h5><p>HttpProxyMiddleware 默认便是启用的，它会在系统环境变量中搜索当前系统代理（名字格式为 XXX_proxy 的环境变量），作为 scrapy 爬虫使用的代理。 </p><p><a href="http://cn-proxy.com/" target="_blank" rel="noopener">最新中国 ip 地址代理服务器</a></p><p>为本机的 Scrapy 爬虫分别设置发送 HTTP 和 HTTPS 请求时所使用的代理，只需要 bash 中添加加环境变量：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Linux 系统设置环境变量：</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span>  http_proxy=<span class="string">"http://120.92.118.64:10010"</span>  <span class="comment"># 为 HTTP 请求设置代理</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span>  https_proxy=<span class="string">"http://118.114.77.47:8080"</span>  <span class="comment"># 为 HTTPS 请求设置代理</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span>  <span class="comment"># 查看变量</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> http_proxy  <span class="comment"># 删除变量</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Windows 系统设置环境变量：</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> http_proxy=<span class="string">"http://120.92.118.64:10010"</span> <span class="comment"># 为 HTTP 请求设置代理</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> https_proxy=<span class="string">"http://118.114.77.47:8080"</span> <span class="comment"># 为 HTTPS 请求设置代理</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> <span class="comment"># 查看变量</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> http_proxy= <span class="comment"># 删除变量</span></span></span><br></pre></td></tr></table></figure></p><p>配置完成后，Scrapy 爬虫将会使用上面指定的代理下载页面。</p><p>示例，利用网站 <a href="http://httpbin.org" target="_blank" rel="noopener">http://httpbin.org</a> 提供的服务可以窥视我们所发送的 HTTP(S) 请求，如请求源 IP 地址、请求头部、Cookie 信息等。如图展示了该网站各种服务的 API 地址：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/proxy2.jpg" alt="proxy2"></p><p>访问 <a href="http://httpbin.org/ip" target="_blank" rel="noopener">http://httpbin.org/ip</a> 将返回一个包含请求源 IP 地址信息的 json 串，在 scrapy shell 中访问该 url ，查看请求源 IP 地址：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(py3) [root@izuf6g6v8wminmgpw6vd89z py3]<span class="comment"># scrapy shell </span></span><br><span class="line"></span><br><span class="line">。。。。。。。。。。。。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; import json</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fetch(scrapy.Request(<span class="string">'http://httpbin.org/ip'</span>))</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-08 <span class="number">22</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:</span><span class="number">26</span> [scrapy.core.engine] <span class="symbol">INFO:</span> Spider opened</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-08 <span class="number">22</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:</span><span class="number">26</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">http:</span>/<span class="regexp">/httpbin.org/ip</span>&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; json.loads(response.text)</span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'120.92.118.64'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fetch(scrapy.Request(<span class="string">'https://httpbin.org/ip'</span>))</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-08 <span class="number">22</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:</span><span class="number">52</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">https:</span>/<span class="regexp">/httpbin.org/ip</span>&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; json.loads(response.text)</span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'118.114.77.47'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><p>在上述实验中，分别以 HTTP 和 HTTPS 发送请求，使用 json 模块对响应结果进行解析，读取请求源 IP 地址（ origin 字段），其值正是代理服务器的 IP。由此证明，Scrapy 爬虫使用了指定的代理。</p><p>上面使用的是无须身份验证的代理服务器，还有一些代理服务器需要用户提供账号、密码进行身份验证，验证成功后才提供代理服务，使用此类代理时，可按以下格式配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=<span class="string">"http://dongfei:123456@39.134.10.98:8080"</span></span><br></pre></td></tr></table></figure><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><p><strong>HttpProxyMiddleware</strong> ：<code>Lib/site-packages/scrapy/downloadermiddlewares/httpproxy.py</code></p><p>分析代码如下：</p><ul><li>__init__ 方法</li></ul><p>在 HttpProxyMiddleware 的构造器中，使用 Python 标准库 urllib 中的 getproxies 函数在系统环境变量中搜索系统代理的相关配置（变量名格式为 [协议]_proxy 的变量）<br>调用 self._get_proxy 方法解析代理配置信息，并将其返回结果保存到 self.proxies 字段中，如果没有找到任何代理配置，就拋出 NotConfigured 异常，HttpProxyMiddleware 被弃用。</p><ul><li>_get_proxy 方法</li></ul><p>解析代理配置信息，返回身份验证信息以及代理服务器 url。</p><ul><li>process_request 方法</li></ul><p>处理每一个待发送的请求，为没有设置过代理的请求（meta 属性不包含 proxy 的请求）调用 self._set_proxy 方法设置代理。</p><ul><li>_set_proxy 方法</li></ul><p>为一个请求设置代理，以请求的协议（HTTP 或 HTTPS ）作为键，从代理服务器信息字典 self.proxies 中选择代理，赋值给 request.meta 的 proxy 字段。对于需要身份验证的代理服务器，添加 HTTP 头部 Proxy-Authorization ，其值是在 _get_proxy 方法中计算得到的。</p><p>经分析得知，在 Scrapy 中为一个请求设置代理的本质就是将代理服务器的 url 时填写到 request.meta[‘proxy’]。</p><h5 id="使用多个代理"><a href="#使用多个代理" class="headerlink" title="使用多个代理"></a>使用多个代理</h5><p>利用 HttpProxyMiddleware 为爬虫设置代理时，对于一种协议（ HTTP 或 HTTPS ）的所有请求只能使用一个代理，如果想使用多个代理，可以在构造每一个 Request 对象时，通过 meta 参数的 proxy 字段手动设置代理 ：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request = Request('http<span class="symbol">://example</span>.com/1', meta=&#123;'proxy':'http<span class="symbol">://42</span>.<span class="number">178.202</span>.<span class="number">18</span>:<span class="number">8080</span>'&#125;)</span><br><span class="line">request = Request('http<span class="symbol">://example</span>.com/2', meta=&#123;'proxy':'http<span class="symbol">://182</span>.<span class="number">18.202</span>.<span class="number">18</span>:<span class="number">8080</span>'&#125;)</span><br><span class="line">request = Request('http<span class="symbol">://example</span>.com/3', meta=&#123;'proxy':'http<span class="symbol">://89</span>.<span class="number">190.202</span>.<span class="number">18</span>:<span class="number">8080</span>'&#125;)</span><br></pre></td></tr></table></figure></p><p>按照与之前相同的做法，在 scrapy shell 进行实验，验证代理是否被使用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(py3) [root@izuf6g6v8wminmgpw6vd89z py3]<span class="comment"># scrapy shell </span></span><br><span class="line"></span><br><span class="line">。。。。。。。。。。。。</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; import json</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; from scrapy import Request</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = Request(<span class="string">'http://httpbin.org/ip'</span>, meta=&#123;<span class="string">'proxy'</span>: <span class="string">'http://39.134.10.18:8080'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fetch(r)</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-08 <span class="number">19</span><span class="symbol">:</span><span class="number">43</span><span class="symbol">:</span><span class="number">06</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">http:</span>/<span class="regexp">/httpbin.org/ip</span>&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; json.loads(response.text)</span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'39.134.10.18'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r = Request(<span class="string">'https://httpbin.org/ip'</span>, meta=&#123;<span class="string">'proxy'</span>: <span class="string">'http://42.178.202.18:8080'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fetch(r)</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-08 <span class="number">19</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:</span><span class="number">06</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">https:</span>/<span class="regexp">/httpbin.org/ip</span>&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; json.loads(response.text)</span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'42.178.202.18'</span>&#125;</span><br></pre></td></tr></table></figure><p>结果表明，Scrapy 爬虫同样使用了指定的代理服务器。</p><p>使用手动方式设置代理时，如果使用的代理需要身份验证，还需要通过 HTTP 头部的 Proxy-Authorization 字段传递包含用户账号和密码的身份验证信息。可以参考 HttpProxyMiddleware._get_proxy 中的相关实现，按以下过程生成身份验证信息：</p><p>（1）将账号、密码拼接成形如 <code>user:passwd</code> 的字符串 s1。<br>（2）按代理服务器要求对 s1 进行编码（如 utf8 ），生成 s2 。<br>（3）再对 s2 进行 Base64 编码，生成 s3。<br>（4）将 s3 拼接到固定字节串 b<code>Basic</code> 后面，得到最终的身份验证信息。</p><p>示例代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from scrapy import Request</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; import base64</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; req = Request(<span class="string">'http://httpbin.org/ip'</span>, meta=&#123;<span class="string">'proxy'</span>: <span class="string">'http://42.178.202.18:8080'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; user = <span class="string">'dongfei'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; passwd = <span class="string">'12345678'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; user_passwd = (<span class="string">'%s:%s'</span><span class="string">%(user,passwd)</span>).encode(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; user_passwd</span><br><span class="line">b<span class="string">'dongfei:12345678'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; req.headers[<span class="string">'Proxy-Authorization'</span>] = b<span class="string">'Basic'</span> + base64.b64encode(user_passwd)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fetch(req)</span><br><span class="line">.........................</span><br></pre></td></tr></table></figure><h5 id="获取免费代理"><a href="#获取免费代理" class="headerlink" title="获取免费代理"></a>获取免费代理</h5><p>可以通过 google 或 baidu 找到一些提供免费代理服务器信息的网站。例如：</p><ul><li><a href="http://proxy-list.org" target="_blank" rel="noopener">http://proxy-list.org</a>（国外）</li><li><a href="http://free-proxy-list.net" target="_blank" rel="noopener">http://free-proxy-list.net</a>（国外）</li><li><a href="http://www.xicidaili.com" target="_blank" rel="noopener">http://www.xicidaili.com</a></li><li><a href="http://www.proxy360.cn" target="_blank" rel="noopener">http://www.proxy360.cn</a></li><li><a href="http://www.kuaidaili.com" target="_blank" rel="noopener">http://www.kuaidaili.com</a></li><li><a href="http://cn-proxy.com/" target="_blank" rel="noopener">http://cn-proxy.com/</a></li></ul><p>以 <a href="http://www.xicidaili.com" target="_blank" rel="noopener">http://www.xicidaili.com</a> 为例，如图所示为该网站 <strong>国内高匿代理</strong> 分类下的页面：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/proxy3.jpg" alt="proxy3"></p><p>接下来爬取 <strong>国内高匿代理</strong> 分类中前 3 页的所有代理服务器信息。并验证每个代理是否可用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider xici_proxy www<span class="selector-class">.xicidaili</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>该网站会监测用户发送的 HTTP 请求头部中的 User-Agent 字段，因此我们需要伪装成某种常规浏览器，在配置文件添加如下代码：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.<span class="number">3112.11</span>3 Safari/537.36',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现 XiciProxySpider 爬取代理服务器信息，并过滤不可用代理，代码如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2017-11-29"</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request, FormRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> XiciProxySpider(scrapy.Spider):</span><br><span class="line">    name = <span class="string">'xici_proxy'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.xicidaili.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.xicidaili.com/nn/'</span>]</span><br><span class="line"></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">"DOWNLOADER_MIDDLEWARES"</span>: &#123;</span><br><span class="line">            # 置于 HttpProxyMiddleware(<span class="number">750</span>) 之前</span><br><span class="line">            # <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">745</span>,</span><br><span class="line">            # <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: None,</span><br><span class="line">            <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: None,</span><br><span class="line">            <span class="string">'scrapy_fake_useragent.middleware.RandomUserAgentMiddleware'</span>: <span class="number">400</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        # <span class="string">'DOWNLOAD_DELAY'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'COOKIES_ENABLED'</span>: <span class="literal">False</span>,</span><br><span class="line">        # <span class="string">'DOWNLOAD_TIMEOUT'</span>: <span class="number">180</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">        # 爬取 http:<span class="comment">//www.xicidaili.com/nn/ 前 3 页</span></span><br><span class="line">        for i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">            yield Request(<span class="string">'http://www.xicidaili.com/nn/%s'</span> % i)</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line"></span><br><span class="line">        for sel <span class="keyword">in</span> response.xpath(<span class="string">'//table[@id="ip_list"]/tr[position()&gt;1]'</span>):</span><br><span class="line">            # 提取代理 IP、port、scheme(http or https)</span><br><span class="line">            ip = sel.css(<span class="string">'td:nth-child(2)::text'</span>).extract_first()</span><br><span class="line">            port = sel.css(<span class="string">'td:nth-child(3)::text'</span>).extract_first()</span><br><span class="line">            scheme = sel.css(<span class="string">'td:nth-child(6)::text'</span>).extract_first().lower()</span><br><span class="line"></span><br><span class="line">            # 使用爬取到的代理再次发送请求到 http(s):<span class="comment">//httpbin.org/ip ，验证代理是否可用</span></span><br><span class="line"></span><br><span class="line">            url = <span class="string">'%s://httpbin.org/ip'</span> % scheme</span><br><span class="line">            # url = <span class="string">'%s://ip.taobao.com/service/getIpInfo.php'</span> % scheme</span><br><span class="line">            # url = <span class="string">'%s://fp.ip-api.com/json'</span> % scheme</span><br><span class="line">            # url = <span class="string">'%s://ip-api.com/json'</span> % scheme</span><br><span class="line"></span><br><span class="line">            proxy = <span class="string">'%s://%s:%s'</span> % (scheme, ip, port)</span><br><span class="line"></span><br><span class="line">            # formdata = &#123;</span><br><span class="line">            #     <span class="string">'ip'</span>: <span class="string">'myip'</span>,</span><br><span class="line">            # &#125;</span><br><span class="line"></span><br><span class="line">            meta = &#123;</span><br><span class="line">                <span class="string">'proxy'</span>: proxy,</span><br><span class="line">                <span class="string">'dont_retry'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'download_timeout'</span>: <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">                # 以下两个字段是传递给 check_available 方法的信息，方便检测</span><br><span class="line">                <span class="string">'_proxy_scheme'</span>: scheme,</span><br><span class="line">                <span class="string">'_proxy_ip'</span>: ip,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            yield Request(url, callback=self.check_available, meta=meta, dont_filter=<span class="literal">True</span>)</span><br><span class="line">            # yield FormRequest(url, callback=self.check_available, formdata=formdata, meta=meta, dont_filter=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    def check_available(self, response):</span><br><span class="line">        proxy_ip = response.meta[<span class="string">'_proxy_ip'</span>]</span><br><span class="line"></span><br><span class="line">        # <span class="keyword">if</span> proxy_ip == json.loads(response.text)[<span class="string">'data'</span>][<span class="string">'ip'</span>]:</span><br><span class="line">            # <span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">            # pprint(&#123;</span><br><span class="line">            #         <span class="string">'ip'</span>: json.loads(response.text)[<span class="string">'query'</span>],</span><br><span class="line">            #         <span class="string">'user_agent'</span>: json.loads(response.text)[<span class="string">'user_agent'</span>],</span><br><span class="line">            #     &#125;)</span><br><span class="line">            # <span class="keyword">if</span> proxy_ip == json.loads(response.text)[<span class="string">'query'</span>]:</span><br><span class="line">        </span><br><span class="line">        # 判断代理是否具有隐藏 IP 功能</span><br><span class="line">        <span class="keyword">if</span> proxy_ip == json.loads(response.text)[<span class="string">'origin'</span>]:</span><br><span class="line">            yield &#123;</span><br><span class="line">                <span class="string">'proxy_scheme'</span>: response.meta[<span class="string">'_proxy_scheme'</span>],</span><br><span class="line">                <span class="string">'proxy'</span>: response.meta[<span class="string">'proxy'</span>],</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>解释上述代码如下：</p><ul><li><p>在 start_requests 方法中请求 <a href="http://www.xicidaili.com/nn/" target="_blank" rel="noopener">http://www.xicidaili.com/nn/</a> 下的前 3 页，以 parse 方法作为页面解析函数。</p></li><li><p>在 parse 方法中提取一个页面中所有的代理服务器信息，这些代理未必都是可用的，因此使用爬取到的代理发送请求到 <code>http(s)://httpbin.org/ip</code> 验证其是否可用。以 check_available 方法作为页面解析函数。</p></li><li><p>能执行到 check_available 方法，意味着 response 对应请求所使用的代理是可用的。在 check_available 方法中，通过响应 json 串中的 origin 字段可以判断代理是否是匿名的（隐藏 ip），返回匿名代理。</p></li></ul><p>运行爬虫，将可用的代理服务器保存到 json 文件中，供其他程序使用：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy crawl xici_proxy -o .\data\proxy_list.json</span><br><span class="line"></span><br><span class="line">....................</span><br><span class="line"></span><br><span class="line">(jobboleArticle) $ cat -n .\data\proxy_list.json</span><br><span class="line">     <span class="number">1</span>  [</span><br><span class="line">     <span class="number">2</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"http"</span>, <span class="string">"proxy"</span>: <span class="string">"http://183.159.87.96:18118"</span>&#125;,</span><br><span class="line">     <span class="number">3</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"https"</span>, <span class="string">"proxy"</span>: <span class="string">"https://60.177.228.86:18118"</span>&#125;,</span><br><span class="line">     <span class="number">4</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"http"</span>, <span class="string">"proxy"</span>: <span class="string">"http://60.177.229.113:18118"</span>&#125;,</span><br><span class="line">     <span class="number">5</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"http"</span>, <span class="string">"proxy"</span>: <span class="string">"http://183.159.93.180:18118"</span>&#125;,</span><br><span class="line">     <span class="number">6</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"https"</span>, <span class="string">"proxy"</span>: <span class="string">"https://183.159.83.153:18118"</span>&#125;,</span><br><span class="line">     <span class="number">7</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"https"</span>, <span class="string">"proxy"</span>: <span class="string">"https://114.99.29.251:18118"</span>&#125;,</span><br><span class="line">     <span class="number">8</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"http"</span>, <span class="string">"proxy"</span>: <span class="string">"http://183.159.93.180:18118"</span>&#125;,</span><br><span class="line">     <span class="number">9</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"https"</span>, <span class="string">"proxy"</span>: <span class="string">"https://183.159.94.136:18118"</span>&#125;,</span><br><span class="line">    <span class="number">10</span>  &#123;<span class="string">"proxy_scheme"</span>: <span class="string">"https"</span>, <span class="string">"proxy"</span>: <span class="string">"https://183.159.93.27:18118"</span>&#125;</span><br><span class="line">    <span class="number">11</span>  ]</span><br></pre></td></tr></table></figure><h5 id="实现随机代理"><a href="#实现随机代理" class="headerlink" title="实现随机代理"></a>实现随机代理</h5><p>某些网站为防止爬虫爬取会对接收到的请求进行监测，如果短时间内接收到了来自同一 IP 的大量请求，就判定该 IP 的主机在使用爬虫程序爬取网站，因而将该 IP 封禁（拒绝请求）。爬虫程序可以使用多个代理对此类网站进行爬取，此时单位时间的访问量会被多个代理分摊，从而避免封禁 IP 。</p><p>下面基于 HttpProxyMiddleware 实现一个随机代理下载中同件。</p><p>在 <code>middlewares.py</code> 中实现 <code>RandomHttpProxyMiddleware</code> 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.downloadermiddlewares.httpproxy <span class="keyword">import</span> HttpProxyMiddleware</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> NotConfigured</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomHttpProxyMiddleware</span><span class="params">(HttpProxyMiddleware)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, auth_encoding=<span class="string">'latin-1'</span>, proxy_list_file=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> proxy_list_file:</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line"></span><br><span class="line">        self.auth_encoding = auth_encoding</span><br><span class="line">        <span class="comment"># 分别用两个列表维护 HTTP 和 HTTPS 代理，&#123;'http':[...],'https':[....]&#125;</span></span><br><span class="line">        self.proxies = defaultdict(list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 json 文件中读取代理服务器信息，填入 self.proxies</span></span><br><span class="line">        <span class="keyword">with</span> open(proxy_list_file) <span class="keyword">as</span> f:</span><br><span class="line">            proxy_list = json.load(f)</span><br><span class="line">            <span class="keyword">for</span> proxy <span class="keyword">in</span> proxy_list:</span><br><span class="line">                scheme = proxy[<span class="string">'proxy_scheme'</span>]</span><br><span class="line">                url = proxy[<span class="string">'proxy'</span>]</span><br><span class="line">                self.proxies[scheme].append(self._get_proxy(url, scheme))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="comment"># 从配置文件中读取用户验证信息的编码</span></span><br><span class="line">        auth_encoding = crawler.settings.get(<span class="string">'HTTPPROXY_AUTH_ENCODING'</span>,<span class="string">'latin-1'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从配置文件中读取代理服务器列表文件（json）的路径</span></span><br><span class="line">        proxy_list_file = crawler.settings.get(<span class="string">'HTTPPROXY_PROXY_LIST_FILE'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls(auth_encoding,proxy_list_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_proxy</span><span class="params">(self, request, scheme)</span>:</span></span><br><span class="line">        <span class="comment"># 随机选择一个代理</span></span><br><span class="line">        creds, proxy = random.choice(self.proxies[scheme])</span><br><span class="line">        request.meta[<span class="string">'proxy'</span>] = proxy</span><br><span class="line">        <span class="keyword">if</span> creds:</span><br><span class="line">            request.headers[<span class="string">'Proxy-Authorization'</span>] = <span class="string">b'Basic '</span> + creds</span><br></pre></td></tr></table></figure><p>解释上述代码如下：</p><ul><li><p>仿照 HttpProxyMiddleware 构造器实现 RandomHttpProxyMiddleware 构造器，首先从代理服务器列表文件（配置文件中指定）中读取代理服务器信息。然后将它们按照协议 （ HTTP 或 HTTPS ）分别存入不同列表，由 self.proxies 字典维护。</p></li><li><p>_set_proxy 方法负责为每一个 Request 清单设置代理，覆写 _set_proxy 方法（覆盖基类方法），对于每一个 request ，根据请求协议获取 sdifproxis 中的代理服务器列表，然后从中随机抽取一个代理，赋值给 request.meta[‘proxy’]。</p></li></ul><p>在配置文件 <code>settings.py</code> 或者 <code>custom_settings</code> 中启用 RandomHttpProxyMiddleware ，并指定所要使用的代理服务器列表文件（json 文件），添加代码如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.<span class="number">3112.11</span>3 Safari/537.36',</span><br><span class="line">    <span class="string">"DOWNLOADER_MIDDLEWARES"</span>: &#123;</span><br><span class="line">        <span class="meta"># 置于 HttpProxyMiddleware(750) 之前</span></span><br><span class="line">        'ArticleSpider.middlewares.RandomHttpProxyMiddleware': <span class="number">745</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="meta"># 使用之前在 http:<span class="comment">//www.xicidaili.com/ 网站爬取到的代理</span></span></span><br><span class="line">    'HTTPPROXY_PROXY_LIST_FILE': './data/proxy_list.json',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写一个 TestRandomProxySpider 测试该中间件，重复向 发送请求，根据响应的请求源 IP 地址信息判断代理使用情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRandomProxySpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'test_random_proxy'</span></span><br><span class="line">    allowed_domains = [<span class="string">'httpbin.org'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://httpbin.org/'</span>]</span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">"DOWNLOADER_MIDDLEWARES"</span>: &#123;</span><br><span class="line">            <span class="comment"># 置于 HttpProxyMiddleware(750) 之前</span></span><br><span class="line">            <span class="string">'ArticleSpider.middlewares.RandomHttpProxyMiddleware'</span>: <span class="number">745</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 使用之前在 http://www.xicidaili.com/ 网站爬取到的代理</span></span><br><span class="line">        <span class="string">'HTTPPROXY_PROXY_LIST_FILE'</span>: <span class="string">'ArticleSpider/data/proxy_list.json'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">yield</span> Request(<span class="string">'http://httpbin.org/ip'</span>, dont_filter=<span class="keyword">True</span>)</span><br><span class="line">            <span class="keyword">yield</span> Request(<span class="string">'https://httpbin.org/ip'</span>, dont_filter=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(json.loads(response.text))</span><br></pre></td></tr></table></figure><p>运行爬虫，观察输出：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy crawl test_random_proxy</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">09</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">11</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.engine</span>] DEBUG: Crawled (<span class="number">200</span>) &lt;GET http:<span class="comment">//httpbin.org/ip&gt; (referer: None)</span></span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'60.177.229.113'</span>&#125;</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">09</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">13</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.engine</span>] DEBUG: Crawled (<span class="number">200</span>) &lt;GET https:<span class="comment">//httpbin.org/ip&gt; (referer: None)</span></span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'183.159.94.136'</span>&#125;</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">09</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">14</span> [scrapy<span class="selector-class">.core</span><span class="selector-class">.engine</span>] DEBUG: Crawled (<span class="number">200</span>) &lt;GET https:<span class="comment">//httpbin.org/ip&gt; (referer: None)</span></span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'60.177.229.113'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通 Scrapy 网络爬虫（数据库篇）</title>
      <link href="/2018-04-06/%E7%B2%BE%E9%80%9A-Scrapy-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/"/>
      <url>/2018-04-06/%E7%B2%BE%E9%80%9A-Scrapy-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<h5 id="数据保存至数据库"><a href="#数据保存至数据库" class="headerlink" title="数据保存至数据库"></a>数据保存至数据库</h5><p>以 <code>toscrape_book</code> 项目作为环境，使用 Item Pipeline 实现 Scrapy 爬虫，将爬取到的数据存储到数据库中。爬取网站 <a href="http://books.toscrape.com/" target="_blank" rel="noopener">http://books.toscrape.com/</a> 中的书籍信息，其中每一本书的信息包括：<br><code>书名</code>、<code>价格</code>、<code>评价等级</code>、<code>产品编码</code>、<code>库存量</code>、<code>评价数量</code>。<br><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape1.jpg" alt="toscrape1"><br><a id="more"></a></p><p><code>books.py</code> 代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> ArticleSpider.items <span class="keyword">import</span> BookItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'books'</span></span><br><span class="line">    allowed_domains = [<span class="string">'books.toscrape.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://books.toscrape.com/'</span>]</span><br><span class="line"></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="comment"># 指定 csv 文件各列的次序</span></span><br><span class="line">        <span class="string">"FEED_EXPORT_FIELDS"</span>: [<span class="string">'upc'</span>, <span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'stock'</span>, <span class="string">'review_rating'</span>, <span class="string">'review_num'</span>],</span><br><span class="line">        <span class="string">"ITEM_PIPELINES"</span>: &#123;</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.BookPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 书籍列表页面的解析函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        le = LinkExtractor(restrict_css=<span class="string">'article.product_pod h3'</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> le.extract_links(response):</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(link.url, callback=self.parse_book)</span><br><span class="line"></span><br><span class="line">        le = LinkExtractor(restrict_css=<span class="string">'ul.pager li.next'</span>)</span><br><span class="line">        links = le.extract_links(response)</span><br><span class="line">        <span class="keyword">if</span> links:</span><br><span class="line">            next_url = links[<span class="number">0</span>].url</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 书籍页面的解析函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_book</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        book = BookItem()</span><br><span class="line">        sel = response.css(<span class="string">'div.product_main'</span>)</span><br><span class="line">        book[<span class="string">'name'</span>] = sel.xpath(<span class="string">'./h1/text()'</span>).extract_first()</span><br><span class="line">        book[<span class="string">'price'</span>] = sel.css(<span class="string">'p.price_color::text'</span>).extract_first()</span><br><span class="line">        book[<span class="string">'review_rating'</span>] = sel.css(<span class="string">'p.star-rating::attr(class)'</span>).re_first(<span class="string">'star-rating ([A-Za-z]+)'</span>)</span><br><span class="line"></span><br><span class="line">        sel = response.css(<span class="string">'table.table.table-striped'</span>)</span><br><span class="line">        book[<span class="string">'upc'</span>] = sel.xpath(<span class="string">'(.//tr)[1]/td/text()'</span>).extract_first()</span><br><span class="line">        book[<span class="string">'stock'</span>] = sel.xpath(<span class="string">'(.//tr)[last()-1]/td/text()'</span>).re_first(<span class="string">'\((\d+) available\)'</span>)</span><br><span class="line">        book[<span class="string">'review_num'</span>] = sel.xpath(<span class="string">'(.//tr)[last()]/td/text()'</span>).extract_first()</span><br><span class="line">        <span class="keyword">yield</span> book</span><br></pre></td></tr></table></figure></p><p><code>pipelines.py</code> 代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理书籍评价等级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookPipeline</span>(<span class="title">object</span>):</span></span><br><span class="line">    review_rating_map = &#123;</span><br><span class="line">        <span class="string">'One'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'Two'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'Three'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'Four'</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">'Five'</span>: <span class="number">5</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        rating = item[<span class="string">'review_rating'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">rating:</span></span><br><span class="line">            item[<span class="string">'review_rating'</span>] = <span class="keyword">self</span>.review_rating_map[rating]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p><p><code>items.py</code> 代码：<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookItem</span>(<span class="title">scrapy</span>.<span class="title">Item</span>):</span></span><br><span class="line">    name = scrapy.<span class="keyword">Field</span>()<span class="meta">   # 书名</span></span><br><span class="line">    price = scrapy.<span class="keyword">Field</span>()<span class="meta">  # 价格</span></span><br><span class="line">    review_rating = scrapy.<span class="keyword">Field</span>()<span class="meta">  # 评价等级，1~5星</span></span><br><span class="line">    review_num = scrapy.<span class="keyword">Field</span>()<span class="meta">     # 评价数量</span></span><br><span class="line">    upc = scrapy.<span class="keyword">Field</span>()<span class="meta">    # 产品编码</span></span><br><span class="line">    stock = scrapy.<span class="keyword">Field</span>()<span class="meta">  # 库存量</span></span><br></pre></td></tr></table></figure></p><p>运行命令，爬取数据：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\<span class="keyword">jobboleArticle\ArticleSpider\ArticleSpider</span></span><br><span class="line"><span class="keyword">(jobboleArticle) </span>$ <span class="keyword">scrapy </span>crawl <span class="keyword">books </span>-o .\data\<span class="keyword">books.toscrape.csv </span>--nolog</span><br><span class="line">(<span class="keyword">jobboleArticle) </span>$ cat -n .\data\<span class="keyword">books.toscrape.csv</span></span><br><span class="line"><span class="keyword">。。。。。。。。。。</span></span><br><span class="line"><span class="keyword">995 </span> e7469e<span class="number">22b</span><span class="number">5b</span>fb3e7,The Art of War,£<span class="number">33</span>.<span class="number">34</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">0</span></span><br><span class="line"><span class="number">996</span>  dd047728de72ad62,The Artist<span class="string">'s Way: A Spiritual Path to Higher Creativity,£38.49,15,5,0</span></span><br><span class="line"><span class="string">997  efc3768127714ec3,The Bridge to Consciousness: I'</span>m Writing the <span class="keyword">Bridge </span><span class="keyword">Between </span><span class="keyword">Science </span><span class="keyword">and </span>Our Old <span class="keyword">and </span>New <span class="keyword">Beliefs.,£32.00,15,3,0</span></span><br><span class="line"><span class="keyword">998 </span> <span class="keyword">b12b89017878a60d,Private </span>Paris (Private <span class="comment">#10),£47.61,17,5,0</span></span><br><span class="line"><span class="number">999</span>  <span class="number">6</span>fd646a334e6e133,What<span class="string">'s It Like in Space?: Stories from Astronauts Who'</span>ve <span class="keyword">Been </span>There,£<span class="number">19</span>.<span class="number">60</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span></span><br><span class="line"><span class="number">1000</span>  c<span class="number">8f</span><span class="number">7f</span>0cb1abb9cac,Reasons to Stay Alive,£<span class="number">26</span>.<span class="number">41</span>,<span class="number">17</span>,<span class="number">2</span>,<span class="number">0</span></span><br><span class="line"><span class="number">1001</span>  <span class="keyword">b4fd5943413e089a,Slow </span>States of Collapse: Poems,£<span class="number">57</span>.<span class="number">31</span>,<span class="number">17</span>,<span class="number">3</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></p><h5 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h5><p>SQLite 是一个文件型轻量级数据库，它的处理速度很快，在数据量不是很大的情况<br>下，使用 SQLite 足够了。</p><p>首先，创建一个供 Scrapy 使用的 SQLite 数据库，取名为 scrapy.db，在客户端中创建数据表（Table）  ：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider\<span class="built_in">data</span></span><br><span class="line">(jobboleArticle) $ sqlite3 scrapy.db</span><br><span class="line">SQLite version <span class="number">3.20</span><span class="number">.1</span> <span class="number">2017</span><span class="number">-08</span><span class="number">-24</span> <span class="number">16</span>:<span class="number">21</span>:<span class="number">36</span></span><br><span class="line">Enter <span class="string">".help"</span> for usage hints.</span><br><span class="line">sqlite&gt; CREATE TABLE books(</span><br><span class="line">   <span class="params">...</span>&gt; upc             CHAR(<span class="number">16</span>) <span class="literal">NOT</span> <span class="built_in">NULL</span> PRIMARY KEY,</span><br><span class="line">   <span class="params">...</span>&gt; name            VARCHAR(<span class="number">256</span>) <span class="literal">NOT</span> <span class="built_in">NULL</span>,</span><br><span class="line">   <span class="params">...</span>&gt; price           VARCHAR(<span class="number">16</span>) <span class="literal">NOT</span> <span class="built_in">NULL</span>,</span><br><span class="line">   <span class="params">...</span>&gt; review_rating   INT,</span><br><span class="line">   <span class="params">...</span>&gt; review_num      INT,</span><br><span class="line">   <span class="params">...</span>&gt; stock           INT</span><br><span class="line">   <span class="params">...</span>&gt; );</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><p>可以使用 Pycharm 查看创建的数据表：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape2.jpg" alt="toscrape2"></p><p>在 Python 中访问 SQLite 数据库可使用 Python 标准库中的 sqlite3 模块。下面是使用<br>sqlite3 模块将数据写入 SQLite 数据库的简单示例：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2018-4-7"</span></span><br><span class="line"></span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line"><span class="meta"># 连接数据库，得到 Connection 对象</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">'../ArticleSpider/data/scrapy.db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 Curosr 对象，用来执行 SQL 语句</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建数据表</span></span><br><span class="line">cur.execute(<span class="string">'CREATE TABLE person (name VARCHAR(32),age INT,sex char(1))'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 插入一条数据</span></span><br><span class="line">cur.execute(<span class="string">'INSERT INTO person VALUES (?,?,?)'</span>, (<span class="string">'那小子真帅'</span>, <span class="number">22</span>, <span class="string">'M'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 保存变更，commit 后数据才被实际写入数据库</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>运行上述代码后，查看数据库中数据是否以更新。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape3.jpg" alt="toscrape3"></p><p>了解了在 Python 中如何操作 SQLite 数据库后，按下来编写一个能将爬取到的数据写入 SQLite 数据库的 Item Pipeline 。在 <code>pipelines.py</code> 中实现 SQLitePipeline 的代码如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据保存至 SQLite</span></span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLitePipeline</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        db_name = spider.custom_settings.get(<span class="string">'SQLITE_DB_NAME'</span>, <span class="string">'scrapy_default.db'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db_conn = sqlite3.connect(db_name)</span><br><span class="line">        <span class="keyword">self</span>.db_cur = <span class="keyword">self</span>.db_conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.db_conn.commit()</span><br><span class="line">        <span class="keyword">self</span>.db_conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.insert_db(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(<span class="keyword">self</span>, item)</span></span><span class="symbol">:</span></span><br><span class="line">        values = (</span><br><span class="line">            item[<span class="string">'upc'</span>],</span><br><span class="line">            item[<span class="string">'name'</span>],</span><br><span class="line">            item[<span class="string">'price'</span>],</span><br><span class="line">            item[<span class="string">'review_rating'</span>],</span><br><span class="line">            item[<span class="string">'review_num'</span>],</span><br><span class="line">            item[<span class="string">'stock'</span>],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">'INSERT INTO books VALUES (?,?,?,?,?,?)'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db_cur.execute(sql, values)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每插入一条就 commit 一次会影响效率</span></span><br><span class="line">        <span class="comment"># self.db_conn.commit()</span></span><br></pre></td></tr></table></figure></p><p>解释上述代码如下：</p><ul><li>open_spider 方法</li></ul><p>在开始爬取数据之前被调用，在该方法中通过 spider.custom_settings 对象读取用户在配置中设定的数据库，然后建立与数据库的连接，将得到的 Connection 时象和 Cursor 对象分別赋值给 self.db_conn 和 self.db_cur，以便之后使用。</p><ul><li>process_item 方法</li></ul><p>处理爬取到的每一项数据，在该方法中调用 insert_db 方法，执行插入数据操作的 SQL 语句。但需要注意的是，在 insert_db 中并没有调用连接对象的 commit 方法，也就意味着此时数据并没有实际写入数据库。如果每插入一条数据都调用一次 commit 方法，会严重降低程序执行效率，并且我们对数据插入数据库的实时性并没有什么要求，因此可以在爬取完全部数据后再调用 commit 方法。</p><ul><li>close_spider 方法</li></ul><p>在爬取完全部数据后被调用，在该方法中，调用连接对象的 commit 方法将之前所有的插入数据操作一次性提交给数据库，然后关闭连接对象</p><p>在配置文件 <code>settings.py</code> 或者 <code>custom_settings</code> 中指定我们所要使用的 SQLite 数据库，并启用 SQLitePipeline ：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ITEM_PIPELINES"</span>: &#123;</span><br><span class="line">            <span class="symbol">'ArticleSpider</span>.pipelines.<span class="type">SQLitePipeline'</span>: <span class="number">400</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="string">"SQLITE_DB_NAME"</span>:<span class="symbol">'ArticleSpider</span>/data/scrapy.db',</span><br></pre></td></tr></table></figure><p>运行爬虫，并查看数据库:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ sqlite3 .\data\scrapy.db</span><br><span class="line">SQLite version 3.20.1 2017-08-24 16:21:36</span><br><span class="line">Enter <span class="string">".help"</span> for usage hints.</span><br><span class="line">sqlite&gt; select count(<span class="symbol">*</span>) from books;</span><br><span class="line">1000</span><br><span class="line">sqlite&gt; select <span class="symbol">*</span> from books;</span><br><span class="line">9528d0948525bf5f|<span class="string">Birdsong: A Story in Pictures</span>|<span class="string">￡54.64</span>|<span class="string">3</span>|<span class="string">0</span>|19</span><br><span class="line">55f9da0c5eea2e10|<span class="string">You can't bury them all: Poems</span>|<span class="string">￡33.63</span>|<span class="string">2</span>|<span class="string">0</span>|17</span><br><span class="line">be5cc846f45496fb|<span class="string">Behind Closed Doors</span>|<span class="string">￡52.22</span>|<span class="string">4</span>|<span class="string">0</span>|18</span><br><span class="line">19ed25f4641d5efd|<span class="string">In a Dark, Dark Wood</span>|<span class="string">￡19.63</span>|<span class="string">1</span>|<span class="string">0</span>|18</span><br><span class="line">094b269567e1c300|<span class="string">Maude (1883-1993):She Grew Up with the country</span>|<span class="string">￡18.02</span>|<span class="string">2</span>|<span class="string">0</span>|18</span><br><span class="line">6be3beb0793a53e7|<span class="string">Sophie's World</span>|<span class="string">￡15.94</span>|<span class="string">5</span>|<span class="string">0</span>|18</span><br><span class="line">。。。。。。。。。</span><br></pre></td></tr></table></figure><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape4.jpg" alt="toscrape4"></p><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><p>MySQL 是一个应用极其广泛的关系型数据库，它是开源免费的，可以支持大型数据库。<br>使客户端登录 MySQL ，创建一个供 Scrapy 使用的数据库，取名为 scrapy.db ：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ mysql -hlocalhost -uroot -proot -P3308</span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line">Server version: <span class="number">5.7</span>.<span class="number">19</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2017</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Type</span> <span class="string">'help;'</span> <span class="keyword">or</span> <span class="string">'\h'</span> <span class="keyword">for</span> help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> clear the current input statement.</span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> DATABASE scrapy_db CHARACTER <span class="keyword">SET</span> <span class="string">'utf8'</span> COLLATE <span class="string">'utf8_general_ci'</span>;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; USE scrapy_db;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure></p><p>接下来，创建存储书籍数据的表：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE books(</span><br><span class="line">    -<span class="ruby">&gt; upc             CHAR(<span class="number">16</span>) NOT NULL PRIMARY KEY,</span></span><br><span class="line"><span class="ruby">    -&gt; name            VARCHAR(<span class="number">256</span>) NOT NULL,</span></span><br><span class="line"><span class="ruby">    -&gt; price           VARCHAR(<span class="number">16</span>) NOT NULL,</span></span><br><span class="line"><span class="ruby">    -&gt; review_rating   INT,</span></span><br><span class="line"><span class="ruby">    -&gt; review_num      INT,</span></span><br><span class="line"><span class="ruby">    -&gt; stock           INT</span></span><br><span class="line"><span class="ruby">    -&gt; );</span></span><br><span class="line"><span class="ruby">Query OK, <span class="number">0</span> rows affected (<span class="number">0</span>.<span class="number">01</span> sec)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">mysql&gt;</span></span><br></pre></td></tr></table></figure></p><p>在 <strong>Python 2</strong> 中访问 MySQL 数据库可以使用第三方库 MySQL-Python （即 MySQLdb ），但是 MySQLdb 不支持 <strong>Python 3</strong> 。在 <strong>Python 3</strong> 中，可以使用另一个第三方库 mysqlclient 作为替代，它是基于 MySQL-Python 开发的，提供了几乎完全相同的接口。在两个 Python 版本下，可以使用相同的代码访问 MySQL 。</p><p><strong>Python 2</strong> 使用 pip 安装 MySQL-python ：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> My <span class="keyword">SQL</span>-python</span><br></pre></td></tr></table></figure></p><p><strong>Python 3</strong> 使用 pip 安装 mysqlclient ：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> mysqlclient</span><br></pre></td></tr></table></figure></p><p>下面面是使用 MySQLdb 将数据写入 MySQL 数据库的简单示例，与 sqlite3的使用<br>乎完全相同 ：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2018-4-7"</span></span><br><span class="line"></span><br><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line"><span class="meta"># 连接数据库，得到 Connection 对象</span></span><br><span class="line">conn = MySQLdb.connect(host=<span class="string">'localhost'</span>, db=<span class="string">'scrapy_db'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'root'</span>, port=<span class="number">3308</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 Curosr 对象，用来执行 SQL 语句</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建数据表</span></span><br><span class="line">cur.execute(<span class="string">'CREATE TABLE person (name VARCHAR(32),age INT,sex char(1)) ENGINE=InnoDB DEFAULT CHARSET=utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 插入一条数据</span></span><br><span class="line">cur.execute(<span class="string">'INSERT INTO person VALUES (%s,%s,%s)'</span>, (<span class="string">'那小子真帅'</span>, <span class="number">21</span>, <span class="string">'M'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta"># 保存变更，commit 后数据才被实际写入数据库</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>使用 Pycharm 查看创建的数据表：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape5.jpg" alt="toscrape5"></p><p>仿照 SQLitePipeline 实现 MysqlBookPipeline ，代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据保存至 Mysql 数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlBookPipeline</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        db = spider.custom_settings.get(<span class="string">'SQLITE_DB_NAME'</span>, <span class="string">'scrapy_default'</span>)</span><br><span class="line">        host = spider.custom_settings.get(<span class="string">"MYSQL_HOST"</span>, <span class="string">"localhost"</span>)</span><br><span class="line">        port = spider.custom_settings.get(<span class="string">"MYSQL_PORT"</span>, <span class="number">3306</span>)</span><br><span class="line">        user = spider.custom_settings.get(<span class="string">"MYSQL_USER"</span>, <span class="string">"root"</span>)</span><br><span class="line">        passwd = spider.custom_settings.get(<span class="string">"MYSQL_PASSWORD"</span>, <span class="string">"root"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db_conn = MySQLdb.connect(host=host, port=port, db=db,</span><br><span class="line">                                       user=user, passwd=passwd, charset=<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="keyword">self</span>.db_cur = <span class="keyword">self</span>.db_conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.db_conn.commit()</span><br><span class="line">        <span class="keyword">self</span>.db_conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.insert_db(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(<span class="keyword">self</span>, item)</span></span><span class="symbol">:</span></span><br><span class="line">        values = (</span><br><span class="line">            item[<span class="string">'upc'</span>],</span><br><span class="line">            item[<span class="string">'name'</span>],</span><br><span class="line">            item[<span class="string">'price'</span>],</span><br><span class="line">            item[<span class="string">'review_rating'</span>],</span><br><span class="line">            item[<span class="string">'review_num'</span>],</span><br><span class="line">            item[<span class="string">'stock'</span>],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">'INSERT INTO books VALUES (%s,%s,%s,%s,%s,%s)'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db_cur.execute(sql, values)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每插入一条就 commit 一次会影响效率</span></span><br><span class="line">        <span class="comment"># self.db_conn.commit()</span></span><br></pre></td></tr></table></figure><p>上述代码结构与 SQLitePipeline 完全相同，不再赘述。<br>在配置文件 <code>settings.py</code> 或者 <code>custom_settings</code> 中指定我们所要使用的 MySQL 数据库，并启用 MysqlBookPipeline ：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">        <span class="string">"ITEM_PIPELINES"</span>: &#123;</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.BookPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.MysqlBookPipeline'</span>: <span class="number">400</span>,</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">"MYSQL_DB_NAME"</span>: <span class="string">'scrapy_db'</span>,</span><br><span class="line">        <span class="string">"MYSQL_HOST"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"MYSQL_PORT"</span>: <span class="number">3308</span>,</span><br><span class="line">        <span class="string">"MYSQL_USER"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="string">"MYSQL_PASSWORD"</span>: <span class="string">"root"</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行爬虫，并查看数据库：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy crawl books</span><br><span class="line">。。。。。。。。。。 </span><br><span class="line">(jobboleArticle) $ mysql -hlocalhost -uroot -proot -P3308 scrapy<span class="emphasis">_db</span></span><br><span class="line"><span class="emphasis">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">mysql&gt; select count(*) from books;</span></span><br><span class="line"><span class="emphasis">+----------+</span></span><br><span class="line"><span class="emphasis">| count(*) |</span></span><br><span class="line"><span class="emphasis">+----------+</span></span><br><span class="line"><span class="emphasis">|     1000 |</span></span><br><span class="line"><span class="emphasis">+----------+</span></span><br><span class="line"><span class="emphasis">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">mysql&gt; select name from books;</span></span><br><span class="line"><span class="emphasis">| name</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| A Light in the Attic</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| Our Band Could Be Your Life: Scenes from the American Indie Underground, 1981-1991</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| It's Only the Himalayas</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| Scott Pilgrim's Precious Little Life (Scott Pilgrim #1)</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| Mesaerion: The Best Science Fiction Stories 1800-1849</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| Rip it Up and Start Again</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| Libertarianism for Beginners</span></span><br><span class="line"><span class="emphasis">                                                                        |</span></span><br><span class="line"><span class="emphasis">| Olio</span></span><br></pre></td></tr></table></figure></p><p>上述代码中，同样是先执行完全部的插入语句 <code>INSERT INTO</code>，最后一次性调用 commit 方法提交给数据库。或许在某些情况下，我们的确需要每执行一条插入语句，就立即调用 commit 方法更新数据库，如爬取过程很长，中途可能被迫中断，这样程序就不能执行到最后的 commit 。如果在上述代码的 <code>insert_db</code> 方法中直接添加 <code>self.db_conn.commit()</code> 又会使程序执行变慢。为解决以上难题，下面讲解另一种实现方法。</p><p>Scrapy 框架自身是使用另一个 Python 框架 Twisted 编写的程序，Twisted 是一个事件驱动型的异步网络框架，鼓励用户编写异步代码，Twisted 中提供了以异步方式多线程访问数据库的模块 adbapi，使用该模块可以显著提高程序访问数据库的效率，下面是使用 adbpi 中的连接池访问 MySQL 数据库的简单示例 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2018-4-7"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">dbpool = adbapi.ConnectionPool(<span class="string">'MySQLdb'</span>, host=<span class="string">'localhost'</span>, database=<span class="string">'scrapy_db'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'root'</span>, port=<span class="number">3308</span>,</span><br><span class="line">                               charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(tx, item)</span>:</span></span><br><span class="line">    print(<span class="string">'In Thread: '</span>, threading.get_ident())</span><br><span class="line">    sql = <span class="string">'INSERT INTO person VALUES (%s,%s,%s)'</span></span><br><span class="line">    tx.execute(sql, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    item = (<span class="string">'person%s'</span> % i, <span class="number">25</span>, <span class="string">'M'</span>)</span><br><span class="line">    dbpool.runInteraction(insert_db, item)</span><br><span class="line"></span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><p>上述代码解释如下：</p><ul><li>adbapi.ConnectionPool 方法</li></ul><p>可以创建一个数据库连接池对象，其中包含多个连接对象，每个连接对象在独立的线程中工作。adbapi 只是提供了异步访问数据库的编程框架，在其内部依然使用 MySQLdb、sqlite3 这样的库访问数据库，ConnectionPool 方法的第一个参数就是用来指定使用哪个库访问数据库，其他参数在创建连接对象时使用。</p><ul><li>dbpool.runInteraction(insert_db, item)</li></ul><p>以异步方式调用 instert_db 函數，dbpool 会选择连接池中的一个连接对象在独立线程中调用 insert_db ，其中参数 item 会被传给 insert_db 的第二个参数，传给 insert_db 的第一个参数是一个 Transaction 对象，其接口与 Cursor 对象类似，可以调用 execute 方法执行 SQL 语句，insert_db 执行完后，连接对象会自动调用 commit 方法。 </p><p>了解了 adbapi 的使用后，实现 MysqlBookAsyncPipeline，代码如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据异步存储至 Mysql 数据库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlBookAsyncPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        db = spider.custom_settings.get(<span class="string">'MYSQL_DB_NAME'</span>, <span class="string">'scrapy_default'</span>)</span><br><span class="line">        host = spider.custom_settings.get(<span class="string">"MYSQL_HOST"</span>, <span class="string">"localhost"</span>)</span><br><span class="line">        port = spider.custom_settings.get(<span class="string">"MYSQL_PORT"</span>, <span class="number">3306</span>)</span><br><span class="line">        user = spider.custom_settings.get(<span class="string">"MYSQL_USER"</span>, <span class="string">"root"</span>)</span><br><span class="line">        passwd = spider.custom_settings.get(<span class="string">"MYSQL_PASSWORD"</span>, <span class="string">"root"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.dbpool = adbapi.ConnectionPool(<span class="string">'MySQLdb'</span>, host=host, port=port, db=db,</span><br><span class="line">                                            user=user, passwd=passwd, charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.dbpool.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.dbpool.runInteraction(<span class="keyword">self</span>.insert_db, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(<span class="keyword">self</span>, tx,item)</span></span><span class="symbol">:</span></span><br><span class="line">        values = (</span><br><span class="line">            item[<span class="string">'upc'</span>],</span><br><span class="line">            item[<span class="string">'name'</span>],</span><br><span class="line">            item[<span class="string">'price'</span>],</span><br><span class="line">            item[<span class="string">'review_rating'</span>],</span><br><span class="line">            item[<span class="string">'review_num'</span>],</span><br><span class="line">            item[<span class="string">'stock'</span>],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">'INSERT INTO books VALUES (%s,%s,%s,%s,%s,%s)'</span></span><br><span class="line"></span><br><span class="line">        tx.execute(sql, values)</span><br></pre></td></tr></table></figure></p><h5 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h5><p>MongoDB 是一个面向文档的非关系型数据库（ NoSQL ），功能强大、灵活、易于拓展。<br><a href="https://blog.wuwii.com/install-mongodb.html" target="_blank" rel="noopener">安装 MongoDB 数据库</a> </p><p>启动 MongoDB 服务 ：<code>net start mongodb</code></p><p>在 Python 中可以使用第三方库 pymongo 访问 MongoDB 数据库，使用 pip 安装 pymongo ： <code>pip install pymongo</code> </p><p>下面是使用 pymongo 将数据写入 MongoDB 数据库的简单示例:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2018-4-7"</span></span><br><span class="line"></span><br><span class="line">from pymongo import MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 MongoDB，得到一个客户端对象</span></span><br><span class="line"></span><br><span class="line">client = MongoClient('mongodb://localhost:27017')</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取名为 scrapy_db 的数据库的对象</span></span><br><span class="line">db = client.scrapy_db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取名为 person 的集合的对象</span></span><br><span class="line">collection = db.person</span><br><span class="line"></span><br><span class="line">doc = &#123;</span><br><span class="line">    'name': '那小子真帅',</span><br><span class="line">    'age': 21,</span><br><span class="line">    'sex': 'M',</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文档插入集合</span></span><br><span class="line">collection.insert_one(doc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭客户端</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p>Pycharm 安装 MongoDB 插件 ：</p><p>参照：<a href="https://blog.csdn.net/qq_24189933/article/details/75664743" target="_blank" rel="noopener">Pycharm 配置可视化 Mongodb 工具</a></p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape6.jpg" alt="toscrape6"></p><p>连接 MongoDB 数据库 ：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape7.jpg" alt="toscrape7"></p><p>查看数据 ：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape8.jpg" alt="toscrape8"></p><p>实现 MongoDBPipeline 代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据存储至 MongoDB 数据库</span></span><br><span class="line">from pymongo import MongoClient</span><br><span class="line">from scrapy import Item</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        db_url = spider.custom_settings.get(<span class="string">'MONGODB_URL'</span>, <span class="string">'mongodb://localhost:27017'</span>)</span><br><span class="line">        db_name = spider.custom_settings.get(<span class="string">"MONGODB_DB_NAME"</span>, <span class="string">"scrapy_default"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.db_client = MongoClient(db_url)</span><br><span class="line">        <span class="keyword">self</span>.db = <span class="keyword">self</span>.db_client[db_name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.db_client.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.insert_db(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(<span class="keyword">self</span>, item)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item,Item)<span class="symbol">:</span></span><br><span class="line">            item = dict(item)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">self</span>.db.books.insert_one(item)</span><br></pre></td></tr></table></figure><p>解释上述代码如下：</p><ul><li>open_spider 方法</li></ul><p>在开始爬取数据之前被调用，在该方法中通过 spider.custom_settings 或者 spider.settings 对象读取用户在配置文件中指定的数据库，然后建立与数据库的连接，将得到的 MongoClient 对象和 Database 对象分别赋值给 self.db_client 和 self.db，以便之后使用。</p><ul><li>process_item 方法</li></ul><p>处理爬取到的每一项数据，在该方法中调用 insert_db 方法，执行数据库的插入操作，在 insert_db 方法中，先将一项数据转换成字典，然后调用 insert_one 方法将其插入集合 books 。</p><ul><li>close spider 方法</li></ul><p>在爬取完全部数据后被调用，在该方法中关闭与数据库的连接。</p><p>在配置文件 <code>settings.py</code> 或者 <code>custom_settings</code> 中指定所要使用的 MongoDB 数据库，并启用 MongoDBPipeline ：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">        <span class="string">"ITEM_PIPELINES"</span>: &#123;</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.BookPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.MongoDBPipeline'</span>: <span class="number">403</span>,</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">'MONGODB_URL'</span>: <span class="string">'mongodb://localhost:27017'</span>,</span><br><span class="line">        <span class="string">'MONGODB_DB_NAME'</span>: <span class="string">'scrapy_db'</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行爬虫，井查看数据库 ：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy crawl books</span><br><span class="line"></span><br><span class="line">。。。。。。。。。。</span><br><span class="line"></span><br><span class="line">(jobboleArticle) $ mongo scrapy_db</span><br><span class="line">MongoDB <span class="keyword">shell</span> <span class="keyword">version</span> v3.<span class="number">4.9</span></span><br><span class="line">connecting <span class="keyword">to</span>: mongod<span class="variable">b:</span>//<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span>/scrapy_db</span><br><span class="line">MongoDB server <span class="keyword">version</span>: <span class="number">3.4</span>.<span class="number">9</span></span><br><span class="line">Server <span class="built_in">has</span> startup warning<span class="variable">s:</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">07</span>T19:<span class="number">34</span>:<span class="number">13.576</span>+<span class="number">0800</span> I CONTROL  [initandlisten]</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">07</span>T19:<span class="number">34</span>:<span class="number">13.576</span>+<span class="number">0800</span> I CONTROL  [initandlisten] ** WARNING: Access control <span class="keyword">is</span> not enabled <span class="keyword">for</span> the database.</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">07</span>T19:<span class="number">34</span>:<span class="number">13.576</span>+<span class="number">0800</span> I CONTROL  [initandlisten] **          Read <span class="built_in">and</span> <span class="keyword">write</span> access <span class="keyword">to</span> data <span class="built_in">and</span> configuration <span class="keyword">is</span> unrestricted.</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">07</span>T19:<span class="number">34</span>:<span class="number">13.576</span>+<span class="number">0800</span> I CONTROL  [initandlisten]</span><br><span class="line">&gt; db.books.<span class="built_in">count</span>()</span><br><span class="line"><span class="number">1000</span></span><br><span class="line">&gt; db.books.<span class="keyword">find</span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5ac8ba021e885105bc184e6e"</span>), <span class="string">"name"</span> : <span class="string">"Tipping the Velvet"</span>, <span class="string">"price"</span> : <span class="string">"£53.74"</span>, <span class="string">"review_rating"</span> : <span class="number">1</span>, <span class="string">"upc"</span> : <span class="string">"90fa61229261140a"</span>, <span class="string">"stock"</span> : <span class="string">"20"</span>, <span class="string">"review_num"</span> : <span class="string">"0"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5ac8ba021e885105bc184e6f"</span>), <span class="string">"name"</span> : <span class="string">"Sapiens: A Brief History of Humankind"</span>, <span class="string">"price"</span> : <span class="string">"£54.23"</span>, <span class="string">"review_rating"</span> : <span class="number">5</span>, <span class="string">"upc"</span> : <span class="string">"4165285e1663650f"</span>, <span class="string">"stock"</span> : <span class="string">"20"</span>, <span class="string">"review_num"</span> : <span class="string">"0"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5ac8ba021e885105bc184e70"</span>), <span class="string">"name"</span> : <span class="string">"The Dirty Little Secrets of Getting Your Dream Job"</span>, <span class="string">"price"</span> : <span class="string">"£33.34"</span>, <span class="string">"review_rating"</span> : <span class="number">4</span>, <span class="string">"upc"</span> : <span class="string">"2597b5a345f45e1b"</span>, <span class="string">"stock"</span> : <span class="string">"19"</span>, <span class="string">"review_num"</span> : <span class="string">"0"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5ac8ba021e885105bc184e71"</span>), <span class="string">"name"</span> : <span class="string">"The Requiem Red"</span>, <span class="string">"price"</span> : <span class="string">"£22.65"</span>, <span class="string">"review_rating"</span> : <span class="number">1</span>, <span class="string">"upc"</span> : <span class="string">"f77dbf2323deb740"</span>, <span class="string">"stock"</span> : <span class="string">"19"</span>, <span class="string">"review_num"</span> : <span class="string">"0"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5ac8ba021e885105bc184e72"</span>), <span class="string">"name"</span> : <span class="string">"Soumission"</span>, <span class="string">"price"</span> : <span class="string">"£50.10"</span>, <span class="string">"review_rating"</span> : <span class="number">1</span>, <span class="string">"upc"</span> : <span class="string">"6957f44c3847a760"</span>, <span class="string">"stock"</span> : <span class="string">"20"</span>, <span class="string">"review_num"</span> : <span class="string">"0"</span> &#125;</span><br><span class="line">。。。。。。。。。。</span><br></pre></td></tr></table></figure></p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/toscrape9.jpg" alt="toscrape9"></p><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p>Redis 是一个使用 ANSI C 编写的高性能 Key-Value 数据库，使用内存作为主存储，内存中的数据也可以被持久化到硬盘。</p><p>在 Python 中可以使用第三方库 redis-py 访问 Redis 数据库，使用 pip 安装 redis-py ：<code>pip install redis</code></p><p>下面是使用 redis-py 将数据写入 Redis 数据库的简单示例：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2018-4-7"</span></span><br><span class="line"></span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line"><span class="meta"># 连接数据库</span></span><br><span class="line">r = redis.StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建 3 条数据</span></span><br><span class="line">person1 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'那小子真帅'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'M'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person2 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'卖姑娘的小火柴'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'M'</span>,</span><br><span class="line">&#125;</span><br><span class="line">person3 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Hello'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'M'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># 将 3 条数据以 Hash 类型(哈希) 保存到 Redis 中</span></span><br><span class="line">r.hmset(<span class="string">'person:1'</span>, person1)</span><br><span class="line">r.hmset(<span class="string">'person:2'</span>, person2)</span><br><span class="line">r.hmset(<span class="string">'person:3'</span>, person3)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭连接</span></span><br><span class="line">r.connection_pool.disconnect()</span><br></pre></td></tr></table></figure><p>Redis 是 Key-Value 数据库，一项数据在数据库中就是一个键值对，存储多项同类的数据时（如 Book ），通常以 <code>item:id</code> 这样的形式作为每项数据的键，其中的  <strong>:</strong> 并没有什么特殊，也可以换成 <strong>.</strong> 或 <strong>1</strong> 等，只是大家习惯这样使用。</p><p>查看 Redis 中的数据：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="symbol">\P</span>rogram Files<span class="symbol">\R</span>edisWindows</span><br><span class="line">$ redis-cli -a root</span><br><span class="line">127.0.0.1:6379&gt; KEYS person:*</span><br><span class="line">1) "person:2"</span><br><span class="line">2) "person:3"</span><br><span class="line">3) "person:1"</span><br><span class="line">127.0.0.1:6379&gt; HGETALL person:1</span><br><span class="line">1) "name"</span><br><span class="line">2) "<span class="symbol">\x</span>e9<span class="symbol">\x</span>82<span class="symbol">\x</span>a3<span class="symbol">\x</span>e5<span class="symbol">\x</span>b0<span class="symbol">\x</span>8f<span class="symbol">\x</span>e5<span class="symbol">\x</span>ad<span class="symbol">\x</span>90<span class="symbol">\x</span>e7<span class="symbol">\x</span>9c<span class="symbol">\x</span>9f<span class="symbol">\x</span>e5<span class="symbol">\x</span>b8<span class="symbol">\x</span>85"</span><br><span class="line">3) "age"</span><br><span class="line">4) "21"</span><br><span class="line">5) "sex"</span><br><span class="line">6) "M"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>实现 RedisPipeline 代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据存储至 Redis 数据库</span></span><br><span class="line">import redis</span><br><span class="line">from scrapy import Item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisPipeline</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        db_host = spider.custom_settings.get(<span class="string">'REDIS_HOST'</span>, <span class="string">'localhost'</span>)</span><br><span class="line">        db_port = spider.custom_settings.get(<span class="string">"REDIS_PORT"</span>, <span class="number">6379</span>)</span><br><span class="line">        db_passwd = spider.custom_settings.get(<span class="string">"REDIS_PASSWORD"</span>, <span class="string">'root'</span>)</span><br><span class="line">        db_index = spider.custom_settings.get(<span class="string">"REDIS_DB_INDEX"</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db_conn = redis.StrictRedis(host=db_host, port=db_port, db=db_index, password=db_passwd)</span><br><span class="line">        <span class="keyword">self</span>.item_i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.db_conn.connection_pool.disconnect()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.insert_db(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(<span class="keyword">self</span>, item)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, Item)<span class="symbol">:</span></span><br><span class="line">            item = dict(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.item_i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.db_conn.hmset(<span class="string">'book:%s'</span> % <span class="keyword">self</span>.item_i, item)</span><br></pre></td></tr></table></figure><p>解释上述代码如下:</p><ul><li>open_spider 方法</li></ul><p>在开始爬取数据之前被调用。在该方法中通过 spider.custom_settings 或者 spider.settings 对象读取用户在配置文件中指定的数据库，然后建立与数据库的连接，将得到的连接对象<br>賦值给 self.db_conn ，以便之后使用，并初始化一个 self.item_i 作为每项数据的 id 。在插入一项数据时，使用 self.item_i 自加的结果构造数据在数据库中的键。</p><ul><li>process_item 方法</li></ul><p>处理爬取到的每一项数据，在该方法中调用 insert_db 方法，执行数据库的插入操作，在 insert_db 方法中，先将每一项数据转换成字典，然后调用 hmset 方法将数据以 Hash 类型存入 Redis 数据库。 </p><ul><li>close_spider 方法</li></ul><p>在爬取完全部数据后被调用，在该方法中关闭与数据库的连接。</p><p>在配置文件 <code>settings.py</code> 或者 <code>custom_settings</code> 中指定所要使用的 MongoDB 数据库，并启用 RedisPipeline ：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">        <span class="string">"ITEM_PIPELINES"</span>: &#123;</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.BookPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">            <span class="string">'ArticleSpider.pipelines.RedisPipeline'</span>: <span class="number">404</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'REDIS_HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">"REDIS_PORT"</span>: <span class="number">6379</span>,</span><br><span class="line">        <span class="string">"REDIS_PASSWORD"</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">"REDIS_DB_INDEX"</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/babados/article/details/78575145" target="_blank" rel="noopener">Pycharm 集成 Redis 可视化插件 Iedis</a></p><p>运行爬虫，井查看数据库 ：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">F:</span>\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy crawl books</span><br><span class="line"></span><br><span class="line">。。。。。。。。。。</span><br><span class="line"></span><br><span class="line"><span class="symbol">D:</span>\Program Files\RedisWindows</span><br><span class="line">$ redis-cli -a root</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> KEYS <span class="symbol">book:</span>*</span><br><span class="line">。。。。。。。。。。</span><br><span class="line"><span class="number">994</span>) <span class="string">"book:235"</span></span><br><span class="line"><span class="number">995</span>) <span class="string">"book:903"</span></span><br><span class="line"><span class="number">996</span>) <span class="string">"book:244"</span></span><br><span class="line"><span class="number">997</span>) <span class="string">"book:543"</span></span><br><span class="line"><span class="number">998</span>) <span class="string">"book:293"</span></span><br><span class="line"><span class="number">999</span>) <span class="string">"book:440"</span></span><br><span class="line"><span class="number">1000</span>) <span class="string">"book:729"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> HGETALL <span class="symbol">book:</span><span class="number">1</span></span><br><span class="line"> <span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"> <span class="number">2</span>) <span class="string">"Starving Hearts (Triangular Trade Trilogy, #1)"</span></span><br><span class="line"> <span class="number">3</span>) <span class="string">"price"</span></span><br><span class="line"> <span class="number">4</span>) <span class="string">"\xc2\xa313.99"</span></span><br><span class="line"> <span class="number">5</span>) <span class="string">"review_rating"</span></span><br><span class="line"> <span class="number">6</span>) <span class="string">"2"</span></span><br><span class="line"> <span class="number">7</span>) <span class="string">"upc"</span></span><br><span class="line"> <span class="number">8</span>) <span class="string">"0312262ecafa5a40"</span></span><br><span class="line"> <span class="number">9</span>) <span class="string">"stock"</span></span><br><span class="line"><span class="number">10</span>) <span class="string">"19"</span></span><br><span class="line"><span class="number">11</span>) <span class="string">"review_num"</span></span><br><span class="line"><span class="number">12</span>) <span class="string">"0"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> HGETALL <span class="symbol">book:</span><span class="number">2</span></span><br><span class="line"> <span class="number">1</span>) <span class="string">"price"</span></span><br><span class="line"> <span class="number">2</span>) <span class="string">"\xc2\xa317.93"</span></span><br><span class="line"> <span class="number">3</span>) <span class="string">"upc"</span></span><br><span class="line"> <span class="number">4</span>) <span class="string">"e72a5dfc7e9267b2"</span></span><br><span class="line"> <span class="number">5</span>) <span class="string">"review_rating"</span></span><br><span class="line"> <span class="number">6</span>) <span class="string">"3"</span></span><br><span class="line"> <span class="number">7</span>) <span class="string">"review_num"</span></span><br><span class="line"> <span class="number">8</span>) <span class="string">"0"</span></span><br><span class="line"> <span class="number">9</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">10</span>) <span class="string">"The Coming Woman: A Novel Based on the Life of the Infamous Feminist, Victoria Woodhull"</span></span><br><span class="line"><span class="number">11</span>) <span class="string">"stock"</span></span><br><span class="line"><span class="number">12</span>) <span class="string">"19"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通 Scrapy 网络爬虫（动态网页篇）</title>
      <link href="/2018-04-01/%E7%B2%BE%E9%80%9A%20Scrapy%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%AF%87%EF%BC%89/"/>
      <url>/2018-04-01/%E7%B2%BE%E9%80%9A%20Scrapy%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%AF%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">自己不牛逼，认识的人再多也没用</blockquote><h5 id="爬取动态页面"><a href="#爬取动态页面" class="headerlink" title="爬取动态页面"></a>爬取动态页面</h5><p>静态页面的内容始终不变，爬取相对容易，但在现实中，日前绝大多数网站的页面都是动态页面。动态页面中的部分内容是浏览器运行页面中的 JavaScript 脚本动态生成的，爬取相对困难。<br>先来看一个简单的动态页面的例子，在浏览器中打开 <a href="http://quotes.toscrape.com/js/" target="_blank" rel="noopener">Quotes</a></p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/quotes.jpg" alt="quotes"></p><a id="more"></a><p>页面中有 10 条名人名言，每一条都包含在一个 <code>&lt;div class=&quot;quto&quot;&gt;</code>元素中。现在，我们在 scrapy shell 环境下尝试爬取页面中的名人名言：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scrapy shell http:<span class="comment">//quotes.toscrape.com/js/</span></span><br><span class="line">..................</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'div.quote'</span>)</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>从结果看出。爬取失败了，在页面中没有找到任何包含名人名言的<code>&lt;div class=&quot;quto&quot;&gt;</code>元素，这些<code>&lt;div class=&quot;quto&quot;&gt;</code>就是动态内容，从服务器下载的页面中并不包含它们。浏览器执行了页面中的一段 JavasScipt 代码后，它们才被显示出来。查看源码：<br><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/jsjsjs.jpg" alt="jsjsjs.jpg"></p><p>上面是动态网页中最简单的一个例子，数据被硬编码于 JavaScript 代码中，实际中更常见的是 JavaScript 通过 HTTP 请求跟网站动态交互获取数据（AJAX），然后使用数据更新 HTML 页面。爬取此类动态网页需要先执行页面中的 JavaScript 代码渲染页面，再进行爬取。下面介绍使用 JavaScript 渲染引擎渲染页面。</p><h5 id="Splash-渲染引擎"><a href="#Splash-渲染引擎" class="headerlink" title="Splash 渲染引擎"></a>Splash 渲染引擎</h5><p>Splash 是 Scrapy 官方推荐的 JavaScript 渲染引擎，它是使用 Webkit 开发的轻量级无界面浏览器，提供基于 HTTP 接口的 JavaScript 渲染服务，支持以下功能:</p><ul><li>为用户返回经过渲染的 HTML 页面或页面截图。</li><li>并发渲染多个页面。</li><li>关闭图片加载，加速渲染。</li><li>在页面中执行用户自定义的 JavaScript 代码。</li><li>执行用户自定义的渲染脚本（lua），功能类似于 PhantomJS。</li></ul><p><a href="https://github.com/scrapy-plugins/scrapy-splash#installation" target="_blank" rel="noopener">项目链接</a></p><p><a href="http://splash.readthedocs.io/en/latest/scripting-tutorial.html" target="_blank" rel="noopener">API 文档</a></p><p>安装 Splash，需要依赖容器 Docker</p><p>Linux 下安装 Docker 和 Splash ：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install docker</span><br><span class="line">sudo docker pull scrapinghub/splash</span><br></pre></td></tr></table></figure></p><p>Windows 下安装参考：</p><ul><li><a href="https://blog.csdn.net/sanyuedexuanlv/article/details/78759743" target="_blank" rel="noopener">安裝 Docker for Windows</a></li><li><a href="https://www.cnblogs.com/zhxshseu/p/5970a5a763c8fe2b01cd2eb63a8622b2.html" target="_blank" rel="noopener">Docker 使用阿里云docker镜像加速</a></li><li><a href="https://www.cnblogs.com/my8100/p/splash_install.html" target="_blank" rel="noopener">Scrapy相关：Splash 安装 A javascript rendering service 渲染</a></li></ul><p>安装完成后，在本机的 8050 和 8051 端口开启 Splash 服务:   </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\<span class="number">29485</span></span><br><span class="line">$ docker run -p <span class="number">8050:8050</span> -p <span class="number">8051:8051</span> scrapinghub/splash</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:30+0000</span> [-] Log opened.</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:30.228904</span> [-] Splash version: <span class="number">3</span>.<span class="number">2</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:30.246529</span> [-] Qt <span class="number">5</span>.<span class="number">9</span>.<span class="number">1</span>, PyQt <span class="number">5</span>.<span class="number">9</span>, WebKit <span class="number">602</span>.<span class="number">1</span>, sip <span class="number">4</span>.<span class="number">19</span>.<span class="number">3</span>, Twisted <span class="number">16</span>.<span class="number">1</span>.<span class="number">1</span>, Lua <span class="number">5</span>.<span class="number">2</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:30.248380</span> [-] Python <span class="number">3</span>.<span class="number">5</span>.<span class="number">2</span> (default, Nov <span class="number">23</span> <span class="number">2017</span>, <span class="number">16</span>:<span class="number">37</span>:<span class="number">01</span>) [GCC <span class="number">5</span>.<span class="number">4</span>.<span class="number">0 20160609</span>]</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:30.249581</span> [-] Open files limit: <span class="number">1048576</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:30.249750</span> [-] Can't bump open files limit</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">30.373421</span> [-] Xvfb is started: ['Xvfb', ':<span class="number">177507167</span>', '-screen', '<span class="number">0</span>', '<span class="number">1024</span>x768x24', '-nolisten', 'tcp']</span><br><span class="line">QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">30.757496</span> [-] proxy profiles support is enabled, proxy profiles path: /etc/splash/proxy-profiles</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">31.028505</span> [-] verbosity=<span class="number">1</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">31.028650</span> [-] slots=<span class="number">50</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">31.028836</span> [-] argument_cache_max_entries=<span class="number">500</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">31.030539</span> [-] Web UI: enabled, Lua: enabled (sandbox: enabled)</span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">31.030702</span> [-] Server listening on <span class="number">0.0.0.0</span>:<span class="number">8050</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38:31.032203</span> [-] Site starting on <span class="number">8050</span></span><br><span class="line"><span class="number">2018-04-02</span> <span class="number">08</span>:<span class="number">38</span>:<span class="number">31.032426</span> [-] Starting factory &lt;twisted.web.server.Site object at <span class="number">0</span>x7f<span class="number">4d140d57f0</span>&gt;</span><br></pre></td></tr></table></figure><p>Splash 功能丰富，包含多个服务端点，这里只介绍其中两个最常用的端点</p><ul><li><p>render.html<br>提供 JavaScript 页面渲染服务。</p></li><li><p>execute<br>执行用户自定义的渲染脚本（lua），利用该端点可在页面中执行 JavaScript 代码</p></li></ul><h6 id="render-html-端点"><a href="#render-html-端点" class="headerlink" title="render.html 端点"></a>render.html 端点</h6><p>JavaScript 页面渲染服务是 Splash 中最基础的服务，调用方式如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务端点             render.html</span><br><span class="line">请求地址             http:<span class="comment">//:locallhost:8050/render.html</span></span><br><span class="line">请求方式             GET / POST</span><br><span class="line">返回类型             html</span><br></pre></td></tr></table></figure></p><p>render.html 端点支持的参数如下所示：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">参数              是否必选        类型         描述</span><br><span class="line">url                 必选         string    需要渲染页面的 url</span><br><span class="line">timeout             可选         float    渲染页面超时时间     </span><br><span class="line">proxy               可选         string    代理服务器地址 </span><br><span class="line">wait                可选         float     等待页面渲染的时间</span><br><span class="line">images              可选         integer   是否下载图片，默认为 1</span><br><span class="line">js_source           可选         string    用户自定义的 JavaScript 代码的，在页面渲染前执行</span><br></pre></td></tr></table></figure></p><p>这里仅列出部分常用参数，详细内容参见官方文档。<br>下面是使用 requests 库调用 render.html 端点服务对页面 <code>http://quotes.toscrape.com/js/</code> 进行渲染的示例代码。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">from</span> scrapy.selector import Selector</span><br><span class="line">&gt;&gt;&gt; splash_url = <span class="string">"http://localhost:8050/render.html"</span></span><br><span class="line">&gt;&gt;&gt; args = &#123;'url':<span class="string">"http://quotes.toscrape.com/js/"</span>, '<span class="keyword">timeout</span>':<span class="number">5</span>, 'image':<span class="number">0</span>&#125;</span><br><span class="line">&gt;&gt;&gt; response = requests.<span class="keyword">get</span>(splash_url,params=args)</span><br><span class="line">&gt;&gt;&gt; sel = Selector(response)</span><br><span class="line">&gt;&gt;&gt; sel.css('<span class="keyword">div</span>.<span class="literal">quote</span> span.<span class="built_in">text</span>::<span class="built_in">text</span>').extract()</span><br><span class="line">['“The world <span class="keyword">as</span> we have created <span class="keyword">it</span> <span class="keyword">is</span> a process <span class="keyword">of</span> our thinking. It cannot be changed <span class="keyword">without</span> changing our thinking.”', '“It <span class="keyword">is</span> our c</span><br><span class="line">hoices, Harry, <span class="keyword">that</span> show what we truly are, far more than our abilities.”', '“There are only two ways <span class="keyword">to</span> live your life. One <span class="keyword">is</span> <span class="keyword">as</span> tho</span><br><span class="line">ugh nothing <span class="keyword">is</span> a miracle. The other <span class="keyword">is</span> <span class="keyword">as</span> though everything <span class="keyword">is</span> a miracle.”', '“The person, be <span class="keyword">it</span> gentleman <span class="keyword">or</span> lady, who has <span class="keyword">not</span> pleasu</span><br><span class="line">re <span class="keyword">in</span> a good novel, must be intolerably stupid.”', <span class="string">"“Imperfection is beauty, madness is genius and it's better to be absolutely ridicu</span></span><br><span class="line"><span class="string">lous than absolutely boring.”"</span>, '“Try <span class="keyword">not</span> <span class="keyword">to</span> become a man <span class="keyword">of</span> success. Rather become a man <span class="keyword">of</span> value.”', '“It <span class="keyword">is</span> better <span class="keyword">to</span> be hated fo</span><br><span class="line">r what you are than <span class="keyword">to</span> be loved <span class="keyword">for</span> what you are <span class="keyword">not</span>.”', <span class="string">"“I have not failed. I've just found 10,000 ways that won't work.”"</span>, <span class="string">"“A wo</span></span><br><span class="line"><span class="string">man is like a tea bag; you never know how strong it is until it's in hot water.”"</span>, '“A <span class="built_in">day</span> <span class="keyword">without</span> sunshine <span class="keyword">is</span> like, you know, night.</span><br><span class="line">”']</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>在上述代码中，依据文档中的描述设置参数 url、timeout、images，然后发送 HTTP 请求服务接口地址。从运行结果看出，页面渲染成功，我们爬取到了页面中的 10 条名人名言。</p><h6 id="execute-端点"><a href="#execute-端点" class="headerlink" title="execute 端点"></a>execute 端点</h6><p>在爬取某些页面时，我们想在页面中执行一些用户自定义的 JavaScript 代码，例如用 JavaScript 模拟点击页面中的按钮，或调用页面中的 JavaScript 函数与服务器交互。利用 Splash 的 execute 端点提供的服务可以实现这样的功能。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务端点            execute</span><br><span class="line">请求地址            http://localhost:8050/execute</span><br><span class="line">请求方式            POST</span><br><span class="line">返回类型            自定义</span><br></pre></td></tr></table></figure><p>execute 端点支持的参数如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参数          必选/可选       类型         描述</span><br><span class="line">lua_source      必选          string      用户自定义的 lua 脚本</span><br><span class="line">timeout         可选          float       渲染页面超时时间</span><br><span class="line">proxy           可选          string      代理服务器地址</span><br></pre></td></tr></table></figure></p><p>我们可以将 execute 端点的服务看作一个可用 lua 语言编程的浏览器，功能类似于 PhantomJS。使用时需传递一个用户自定义的 lua 脚本给 Splash,该 lua 脚本中包含用户<br>想要模拟的浏览器行为，例如:</p><ul><li>打开某 url 地址的页面</li><li>等待页面加载及渲染</li><li>执行 JavaScript 代码</li><li>获取 HTTP 响应头部</li><li>获取 Cookie</li></ul><p>下面使用 requests 库调用 execute 端点服务的示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lua_script = <span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>function main(splash):</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    splash:go("http://blog.dongfei.xin/")</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    spalsh:wait(0.5)</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    local title = splash:evaljs("document.title")</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    return &#123;title = title&#125;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>end</span></span><br><span class="line"><span class="string"><span class="meta">... </span>'''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splash_url = <span class="string">'http://localhost:8050/execute'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = json.dumps(&#123;<span class="string">'lua_source'</span>: lua_script&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>headers = &#123;<span class="string">'content-type'</span>:<span class="string">'application/json'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response= requests.post(splash_url,headers=headers,data=data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.content</span><br><span class="line"><span class="string">b'&#123;"title":"那小子真帅"&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.json()</span><br><span class="line">&#123;<span class="string">'title'</span>:<span class="string">'那小子真帅'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>用户自定义的 lua 脚本中必须包含一个 main 函数作为程序入口，main 函数被调用时会传入一个 splash 对象（lua 中的对象），用户可以调用该对象上的方法操纵 Splash 。例如，在上面的例子中，先调用 go 方法打开某页面，再调用 wait 方法等待页面渲染，然后调用 evaljs 方法执行一个 JavaScript 表达式，并将结果转化为相应的 lua 对象，最终 Splash 根据 main 函数的返回值构造 HTTP 响应返回给用户，main 函数的返回值可以是字符串，也可以是 lua 中的表（类似 Python 字典）表会被编码成 json 串。</p><p>splash 对象常用的属性和方法。</p><ul><li>splash.args 属性</li></ul><p>用户传入参数的表，通过该属性可以访问用户传入的参数，如 splash.args.url、<br>splash.args.wait。</p><ul><li>splash.js_enabled 属性</li></ul><p>用于开启/禁止 JavaScript 渲染，默认为 true。</p><ul><li>splash.images_enabled 属性</li></ul><p>用于开启/禁止图片加载，默认为 true。</p><ul><li>splash:go 方法</li></ul><p>splash:go{url,baseurl=nil,headers=nil,http_method=”GET”,body=nil,formdata=nil}类似于在浏览器中打开某 url 地址的页面，页面所需资源会被加载，并进行 JavaScript 渲染，可以通过参数指定 HTTP 请求头部、请求方法、表单数据等。</p><ul><li>splash:wait 方法</li></ul><p>splash:wait{time,cancel_on_redirect=false,cancel_on_error=true} 等待页面渲染，time 参数为等待的秒数。</p><ul><li>splash:evaljs 方法</li></ul><p>splash:evaljs(snippet)<br>在当前页面下，执行一段 JavaScript 代码，并返回最后一句表达式的值。</p><ul><li>splash:runjs 方法</li></ul><p>splash:runjs(snippet)<br>在当前页面下，执行一段 JavaScript 代码，与 evaljs 方法相比，该函数只执行 JavaScript 代码，不返回值。</p><ul><li>splash:url 方法</li></ul><p>splash:url()<br>获取当前页面的 url</p><ul><li>splash:html 方法</li></ul><p>splash:html()<br>获取当前页面的 HTML 文本。</p><ul><li>splash:get_cookies 方法</li></ul><p>splash:get_cookies()<br>获取全部 Cookie 信息。</p><h5 id="在-Scrapy-中使用Splash"><a href="#在-Scrapy-中使用Splash" class="headerlink" title="在 Scrapy 中使用Splash"></a>在 Scrapy 中使用Splash</h5><p>在 Scrapy 中调用 Splash 服务，需要安装 scrapy-splash：<code>pip install scrapy-splash</code></p><p>在项目配置文件 setting.py 中对 scrapy-plash 进行配置：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Splash服务器地址 </span></span><br><span class="line">SPLASH_URL = <span class="string">'http://localhost:8050/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 开启 Splash 的两个下载中间件并调整 HttpCompressionMiddleware 的次序</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置去重过滤器</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 用来支持 cache_args （可选）</span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 scrapy_splash 调用 Splash 服务非常筒单，scrapy_splash 中定义了一个 SplashRequest 类，用户只需使用 scrapy_splash.SplashRequest （替代scrapy .Request）提交请求即可。下面是 SplashRequest 构造器方法中的一些常用参数。</p><ul><li>url</li></ul><p>与 scrapy.Request 中的 url 相同，也就是待爬取页面的 url（注意，不是Splash 服务器地址）</p><ul><li>headers</li></ul><p>与 scrapy.Request 中的 headers 相同。</p><ul><li>cookies</li></ul><p>与 scrapy.Request 中的 cookies 相同。</p><ul><li>args</li></ul><p>传递给 Splash 的参数（除 url 以外），如 wait、timeout、images、js_source 等。</p><ul><li>cache_args</li></ul><p>如果 args 中的某些参数每次调用都重复传递并且数据量较大（例如一段 JavaScript 代码），此时可以把该参数名填入 cache_args 列表中，让 Splash 服务器缓存该参数，如 <code>SplashRequest(url,args={&#39;js_source&#39;: js,&#39;wait&#39;: 0.5},cache_args=[&#39;js_source&#39;])</code>。</p><ul><li>endpoint</li></ul><p>Splash 服务端点，默认为 <code>render.html</code>，即 JavaScript 页面渲染服务，该参数可以设置为 <code>render.json</code>、<code>render.har</code>、<code>render.png</code>、<code>render.jpeg</code>、<code>execute</code>等，更多服务端点可以查阅文档。</p><ul><li>splash_url</li></ul><p>Splash 服务器地址，默认为 None，即使用配置文件中 SPLASH_URL 的地址。</p><h5 id="项目实战-爬取-toscrape-中的名人名言"><a href="#项目实战-爬取-toscrape-中的名人名言" class="headerlink" title="项目实战: 爬取 toscrape 中的名人名言"></a>项目实战: 爬取 toscrape 中的名人名言</h5><ul><li>项目需求</li></ul><p>爬取网站 <a href="http://quotes.toscrape.com/js/" target="_blank" rel="noopener">http://quotes.toscrape.com/js/</a> 中的名人名言信息。</p><ul><li>编码实现</li></ul><p>项目目录下使用 scrapy genspider 命令创建 Spider：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrapy</span> <span class="selector-tag">genspider</span> <span class="selector-tag">quotes</span> <span class="selector-tag">quotes</span><span class="selector-class">.toscrape</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>这个案例中。我们只使用 Splash 的 render.html 端点渲染页面，再进行爬取即<br>可实现 QuotesSpider，代码如下： </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author_<span class="number">_</span> = <span class="string">"東飛"</span></span><br><span class="line">__date_<span class="number">_</span> = <span class="string">"2017-11-29"</span></span><br><span class="line">import scrapy</span><br><span class="line">from scrapy_splash import SplashRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line">    name = <span class="string">'quotes'</span></span><br><span class="line">    allowed_domains = [<span class="string">'quotes.toscrape.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line"></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="comment"># Splash服务器地址</span></span><br><span class="line">        <span class="string">'SPLASH_URL'</span>: <span class="string">'http://localhost:8050/'</span>,</span><br><span class="line">        <span class="comment"># 开启 Splash 的两个下载中间件并调整 HttpCompressionMiddleware 的次序</span></span><br><span class="line">        <span class="string">'DOWNLOADER_MIDDLEWARES'</span>: &#123;</span><br><span class="line">            <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">            <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">            <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 设置去重过滤器</span></span><br><span class="line">        <span class="string">'DUPEFILTER_CLASS'</span>: <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span>,</span><br><span class="line">        <span class="comment"># 用来支持 cache_args （可选）</span></span><br><span class="line">        <span class="string">'SPIDER_MIDDLEWARES'</span>: &#123;</span><br><span class="line">            <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> <span class="keyword">self</span>.<span class="symbol">start_urls:</span></span><br><span class="line">            <span class="keyword">yield</span> SplashRequest(url, args=&#123;<span class="string">'images'</span>: <span class="number">0</span>, <span class="string">'timeout'</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>)<span class="symbol">:</span></span><br><span class="line">            quote = <span class="keyword">self</span>.css(<span class="string">'span.text::text'</span>).extract_first()</span><br><span class="line">            author = <span class="keyword">self</span>.css(<span class="string">'small.author::text'</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> &#123;<span class="string">'quote'</span>: quote, <span class="string">'author'</span>: author&#125;</span><br><span class="line"></span><br><span class="line">        href = response.css(<span class="string">'li.next&gt;a::attr(href)'</span>).extract_first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">href:</span></span><br><span class="line">            url = response.urljoin(href)</span><br><span class="line">            <span class="keyword">yield</span> SplashRequest(url, args=&#123;<span class="string">'images'</span>: <span class="number">0</span>, <span class="string">'timeout'</span>: <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><p>上述代码中。使用 SplashRequest 提交请求，SplashRequest 的构造器中无须传递<br>endpoint 参数，因为该参数默认值便是 <code>render.html</code> 。使用 args 参数禁止 Splash 加载图片，并设置渲染超时时间。<br>运行爬虫，观察结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> scrapy crawl quotes -o .\data\quotes.csv</span><br><span class="line"></span><br><span class="line"> F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ cat -n .\data\quotes.csv</span><br><span class="line">     <span class="number">1</span>  <span class="literal">quote</span>,author</span><br><span class="line">     <span class="number">2</span>  “The world <span class="keyword">as</span> we have created <span class="keyword">it</span> <span class="keyword">is</span> a process <span class="keyword">of</span> our thinking. It cannot be changed <span class="keyword">without</span> changing our thinking.”,Albert Ein</span><br><span class="line">stein</span><br><span class="line">     <span class="number">3</span>  <span class="string">"“It is our choices, Harry, that show what we truly are, far more than our abilities.”"</span>,J.K. Rowling</span><br><span class="line">     <span class="number">4</span>  “There are only two ways <span class="keyword">to</span> live your life. One <span class="keyword">is</span> <span class="keyword">as</span> though nothing <span class="keyword">is</span> a miracle. The other <span class="keyword">is</span> <span class="keyword">as</span> though everything <span class="keyword">is</span> a mirac le.”,Albert Einstein</span><br></pre></td></tr></table></figure><h5 id="项目实战-爬取京东商城中的书籍信息"><a href="#项目实战-爬取京东商城中的书籍信息" class="headerlink" title="项目实战: 爬取京东商城中的书籍信息"></a>项目实战: 爬取京东商城中的书籍信息</h5><ul><li>项目需求</li></ul><p>爬取京东商城中所有 Python 书籍的名字和价格信息。</p><ul><li>页面分析</li></ul><p>在<a href="http://www.jd.com" target="_blank" rel="noopener">京东网站</a>的书籍分类下搜索 Python 关键字得到的页面<br><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/jdd1.jpg" alt=""></p><p>结果有很多页，在每个书籍列表页面中可以数有 60 本书但在 scrapy shell<br>中爬取该页面时遇到了问题，仅在页面中找到了 30 本书，少了30本，代码如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">F:</span>\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy shell</span><br><span class="line"></span><br><span class="line">.............</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; url = <span class="string">"https://search.jd.com/Search?keyword=python&amp;enc=utf-8&amp;wq=python"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fetch(url)</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span><span class="symbol">:</span><span class="number">52</span><span class="symbol">:</span><span class="number">03</span> [scrapy.core.engine] <span class="symbol">INFO:</span> Spider opened</span><br><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span><span class="symbol">:</span><span class="number">52</span><span class="symbol">:</span><span class="number">04</span> [scrapy.core.engine] <span class="symbol">DEBUG:</span> Crawled (<span class="number">200</span>) &lt;GET <span class="symbol">https:</span>/<span class="regexp">/search.jd.com/</span>Search?keyword=python&amp;enc=utf-<span class="number">8</span>&amp;wq=python&gt; (<span class="symbol">referer:</span> None)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(response.css(<span class="string">'ul.gl-warp&gt;li'</span>))</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>原来页面中的 60 本书不是同时加载的，开始只有 30 本书，当我们使用鼠标滚轮滚动到页面下方某位置时，后 30 本书才由 JavaScript 脚本加载，通过实验可以验证这个说法，实验绝视如下：</p><p>（1） 页面刚加载时，在 Chrome 开发者工具的 console 中用 jQuery 代码查看当前<br>有多少本书，此时为 30。</p><p>（2） 之后滚动鼠标滚轮到某一位置时，可以看到 JavaScript 发送 HTTP 请求和服务<br>器交互（XHR）。</p><p>（3） 然用 jQuery 代码查看当前有多少本书，已经变成了 60 ，如图所示，</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/jdd2.jpg" alt=""></p><p>既然如此，爬取这个页面时，可以先执行一段 JavaScript 代码，将滚动条拖到页面下方某位置，触发加载后 30 本书的事件，在开发者工具的 console 中进行实验，用 document.getElementsByXXX 方法随意选中页面下方的某元素，比如<code>下一页</code> 按钮所在的<code>&lt;div&gt;</code>元素，然后在该元素对象上调用 scrollIntoView(true) 完成拖曳动作，此时查看书籍数量，变成了 60 。如图：</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/jdd3.jpg" alt=""></p><p>爬取一个页面的问题解决了，再宋研究如何从页面中找到下一页的 url 地址。下一页链接的 href 属性并不是一个 url，而在其 onclick 属性中包含了一条 JavaScript 代码，单击<code>下一页</code>按钮时会调函数<code>SEARCH.page(n,true)</code>。虽然<br>可以用 Splash 执行函数来跳转到下一页，但还是很麻烦，经观察发现，每个页面 url 的差异仅在于 page 参数不同，第一页<code>page=1</code>、第二页 <code>page=3</code>、第三页 <code>page=5</code> …… 以 2 递增，并且页面中还包含商品总数信息。因此，我们可以推算出所有页面的 url 。</p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/blog/jdd4.jpg" alt=""></p><ul><li>编码实现</li></ul><p>项目目录下使用 scrapy genspider 命令创建 Spider：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider jd_book search<span class="selector-class">.jd</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>经上述分析，在爬取每一个书籍列表页面时都需要执行一段 JavaScript 代码，以让全部书籍加载，因此选用 Splash 的 execute 端点渲染页面，再进行爬取即<br>可实现 JdBookSpider，代码如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2017-11-29"</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> scrapy_splash <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line">lua_script = <span class="string">'''</span></span><br><span class="line"><span class="string">function main(splash)</span></span><br><span class="line"><span class="string">    splash:go(splash.args.url)</span></span><br><span class="line"><span class="string">    splash:wait(2)</span></span><br><span class="line"><span class="string">    splash:runjs("document.getElementsByClassName('page')[0].scrollIntoView(true)")</span></span><br><span class="line"><span class="string">    splash:wait(2)</span></span><br><span class="line"><span class="string">    return splash:html()</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdBookSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'jd_book'</span></span><br><span class="line">    allowed_domains = [<span class="string">'search.jd.com'</span>]</span><br><span class="line">    base_url = <span class="string">'https://search.jd.com/Search?keyword=python&amp;enc=utf-8&amp;book=y&amp;wq=python'</span></span><br><span class="line"></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="comment"># Splash服务器地址</span></span><br><span class="line">        <span class="string">'SPLASH_URL'</span>: <span class="string">'http://localhost:8050/'</span>,</span><br><span class="line">        <span class="comment"># 开启 Splash 的两个下载中间件并调整 HttpCompressionMiddleware 的次序</span></span><br><span class="line">        <span class="string">'DOWNLOADER_MIDDLEWARES'</span>: &#123;</span><br><span class="line">            <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">722</span>,</span><br><span class="line">            <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">            <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">            <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 设置去重过滤器</span></span><br><span class="line">        <span class="string">'DUPEFILTER_CLASS'</span>: <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span>,</span><br><span class="line">        <span class="comment"># 用来支持 cache_args （可选）</span></span><br><span class="line">        <span class="string">'SPIDER_MIDDLEWARES'</span>: &#123;</span><br><span class="line">            <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 'USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36',</span></span><br><span class="line">        <span class="comment"># 'HTTPERROR_ALLOWED_CODES': [400],</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 请求第一页，无须 js 渲染</span></span><br><span class="line">        <span class="keyword">yield</span> Request(self.base_url, callback=self.parse_urls, dont_filter=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 获取一个页面中每本书的名字和价格</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.css(<span class="string">'ul.gl-warp.clearfix &gt; li.gl-item'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'name'</span>: sel.css(<span class="string">'div.p-name'</span>).xpath(<span class="string">'string(.//em)'</span>).extract_first(),</span><br><span class="line">                <span class="string">'price'</span>: sel.css(<span class="string">'div.p-price i::text'</span>).extract_first(),</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_urls</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 获取商品总数，计算出总页数</span></span><br><span class="line">        total = int(response.css(<span class="string">'span#J_resCount::text'</span>).re_first(<span class="string">'\d+'</span>))</span><br><span class="line">        pageNum = total // <span class="number">60</span> + (<span class="number">1</span> <span class="keyword">if</span> total % <span class="number">60</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构造每页的 url，向 Splash 的 execute 端点发送请求</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(pageNum):</span><br><span class="line">            url = <span class="string">'%s&amp;page=%s'</span> % (self.base_url, <span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">yield</span> SplashRequest(</span><br><span class="line">                    url,</span><br><span class="line">                    endpoint=<span class="string">'execute'</span>,</span><br><span class="line">                    args=&#123;<span class="string">'lua_source'</span>: lua_script&#125;,</span><br><span class="line">                    cache_args=[<span class="string">'lua_source'</span>]</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><p>解释上述代码如下：</p><ul><li>start_requests 方法</li></ul><p>start_requests 提交对第一个页面的请求，这个页面不需要渲染，因为我们只想从中获取页面总数，使用 scrapy.Request 提交请求，并指定 parse_urls 作为解析函数。</p><ul><li>parse_urls 方法</li></ul><p>从第一个页面中提取商品总数，用其计算页面总数，之后按照前面分析出的页面 url 规律构造每一个页面的 url 。这些页面都是需要渲染的，使用 SplashRequest 提交请求，除了渲染页面以外，还需要执行一段 JavaScript 代码（为了加载后 30 本书），因此使用 Splash 的 execute 端点将 endpoint 参数置为 <code>execute</code> 。通过 args 参数的 lua_source 字段传递我们要执行的 lua 脚本，由于爬取每个页面时都要执行该脚本，因此可以使用 cache_args 参数将该脚本缓存到 Splash 服务器。</p><ul><li>parse 方法</li></ul><p>一个页面中提取 60 本书的名字和价格信息。 </p><ul><li>lua_script  </li></ul><p>自定义的 lua 脚 本，其中的逻辑很简单:<br>打开页面 ==》 等待渲染 ==》 执行 js 触发数据加载（后 30 本书） ==》 等待渲染 ==》 返四 html</p><p>编码和配置的完成，运行爬虫：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">jobboleArticle) </span>$ <span class="keyword">scrapy </span>crawl <span class="keyword">jd_book </span>-o .\data\<span class="keyword">books.csv</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">(jobboleArticle) </span>$ cat -n .\data\<span class="keyword">books.csv</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">5928 </span> 包邮 Python Web开发实战+Python Web开发 测试驱动方法  <span class="number">2</span>本,<span class="number">153</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5929</span>  包邮 Python编程导论 <span class="number">2</span>版+ Python <span class="number">3</span>学习笔记  <span class="number">2</span>本 编程程序,<span class="number">118</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5930</span>  包邮数据科学家养成手册+Python大战机器学习:数据科学家的第一个小目标  <span class="number">2</span>本,<span class="number">112</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5931</span>  包邮 Python参考手册（第<span class="number">4</span>版修订版）+Python数据抓取技术与实战  <span class="number">2</span>本,<span class="number">104</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5932</span>  包邮  Python数据处理+Python网络数据采集 <span class="number">2</span>本 python编程入门书籍,<span class="number">115</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5933</span>  包邮 Python网络编程 第<span class="number">3</span>版+Python网络数据采集  <span class="number">2</span>本,<span class="number">103</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5934</span>  包邮Metasploit渗透测试指南（修订版）+Python黑帽子:黑客与渗透测试编程之道,<span class="number">101</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5935</span>  包邮 Python性能分析与优化+Python算法教程  <span class="number">2</span>本,<span class="number">85</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5936</span>  包邮 数据科学实战手册（R+Python）+干净的数据:数据清洗入门与实践 <span class="number">2</span>本,<span class="number">80</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5937</span>  包邮 Web接口开发与自动化测试——基于Python语言+软件自动化测试开发  <span class="number">2</span>本,<span class="number">88</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5938</span>  零起点Python大数据与量化交易 何海群 <span class="number">9787121306594</span>,<span class="number">74</span>.<span class="number">30</span></span><br><span class="line"><span class="number">5939</span>  从Python开始学编程,<span class="number">29</span>.<span class="number">40</span></span><br><span class="line"><span class="number">5940</span>  区域包邮 Python游戏编程入门+Maya Python 游戏与影视编程指南  <span class="number">2</span>本,<span class="number">96</span>.<span class="number">00</span></span><br><span class="line"><span class="number">5941</span>  包邮  Python与机器学习实战+TensorFlow技术解析与实战 <span class="number">2</span>本,<span class="number">112</span>.<span class="number">00</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通 Scrapy 网络爬虫（模拟登陆篇）</title>
      <link href="/2018-03-30/%E7%B2%BE%E9%80%9A%20Scrapy%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E7%AF%87%EF%BC%89/"/>
      <url>/2018-03-30/%E7%B2%BE%E9%80%9A%20Scrapy%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E7%AF%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center" style="border: ">没事了，约约几个老伙计，喝喝茶，下下棋<br></blockquote><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/Example%20web%20scraping%20website%20.jpg" alt="http://example.webscraping.com/"></p><a id="more"></a><h5 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h5><p>登录的实质是向服务器发送含有登录表单数据的 HTTP 请求（通常是 POST）</p><h6 id="使用-FromRequest"><a href="#使用-FromRequest" class="headerlink" title="使用 FromRequest"></a>使用 FromRequest</h6><p>Scrapy 提供了一个 FormRequest 类（Request的子类），专门用于构造含有表单数据的请求，FormRequest 的构造器方法有一个formdata 参数，接收字典形式的表单数据</p><p>在scrapy shell 环境下演示如何使用FormRequest 模拟登录。首先爬取登录页面：<a href="http://example.webscraping.com/places/default/user/login?_next=/places/default/index" target="_blank" rel="noopener">链接</a></p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/Example%20web%20scraping%20website%20123.jpg" alt=""></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; scrapy shell <span class="symbol">http:</span>/<span class="regexp">/example.webscraping.com/places</span><span class="regexp">/default/user</span><span class="regexp">/login?_next=/places</span><span class="regexp">/default/index</span></span><br><span class="line"></span><br><span class="line">表单数据应包含的信息：帐号和密码信息，再加 <span class="number">3</span>个隐藏 &lt;input&gt; 中的信息（&lt;div style=<span class="string">"display:none"</span>）。</span><br><span class="line">先把这些信息收集到一个字典中，然后使用这个表单数据字典构造 FormRequest 对象</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sel = response.xpath(<span class="string">'//div[@style]/input'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sel</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//div[@style]/input'</span> data=<span class="string">'&lt;input name="_next" type="hidden" value='</span>&gt;，</span><br><span class="line">&lt;Selector xpath=<span class="string">'//div[@style]/input'</span> data=<span class="string">'&lt;input name="_formkey" type="hidden" value='</span>&gt;,</span><br><span class="line">&lt;Selector xpathe=<span class="string">'//div[@style]/input'</span> data=<span class="string">'&lt;input name="_formname" type="hidden" value='</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="comment"># 构造表单数据字典</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fd = dict(zip(sel.xpath(<span class="string">'./@name'</span>).extract(),sel.xpath(<span class="string">'./@value'</span>).extract()))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'_formkey'</span>: <span class="string">'432dcb0c-0d8s443fbb50-9644cft212b'</span>,</span><br><span class="line">    <span class="string">'_formname'</span>: <span class="string">'login'</span>,</span><br><span class="line">    <span class="string">'_next'</span>: <span class="string">'/'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment"># 填写账号和密码信息</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fd[<span class="string">"email"</span>] = <span class="string">"3543503058@qq.com"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fd[<span class="string">"password"</span>] = <span class="string">"webscraping.com"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; fd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'_formkey'</span>: <span class="string">'432dcb0c-0d8s443fbb50-9644cft212b'</span>,</span><br><span class="line">    <span class="string">'_formname'</span>: <span class="string">'login'</span>,</span><br><span class="line">    <span class="string">'_next'</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="string">'email'</span>: <span class="string">'3543503058@qq.com'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'webscraping.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; from scrapy.http import FormRequest</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; request = FormRequest(<span class="string">'http://example.webscraping.com/places/default/user/login?_next=/places/default/index'</span>, formdata = fd)</span><br></pre></td></tr></table></figure><p>以上指直接构造 FormRequest 对象的方式，除此之外还有一种更为简单的方式，即调用 FormRequest 的 from_response 方法，调用时需要传入一个 Response 对象作为第一参数，该方法会解析 Response 对象所包含页面中的 <code>&lt;form&gt;</code> 元素，帮助用户创建 FromRequest 对象，并将隐藏 <code>&lt;input&gt;</code> 中的信息自动填入表单数据，使用这种方式，我们只需通过 formdata 参数填写账号和密码即可，代码如下：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scrapy shell http://example.webscraping.com/places/<span class="keyword">default</span>/user/login?_<span class="keyword">next</span>=/places/<span class="keyword">default</span>/index</span><br><span class="line">&gt;&gt;&gt; from scrapy.http <span class="keyword">import</span> FormRequest</span><br><span class="line">&gt;&gt;&gt; fd = &#123;<span class="string">'email'</span>:<span class="string">"3543503058@qq.com"</span>, <span class="string">'password'</span>:<span class="string">"webscraping.com"</span>&#125;</span><br><span class="line">&gt;&gt;&gt; request = FormRequest.from_response(response, formdata = fd )</span><br><span class="line">&gt;&gt;&gt; fetch(request)</span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">21</span>:<span class="number">16</span>:<span class="number">51</span> [scrapy.downloadermiddlewares.redirect] DEBUG: Redirecting (<span class="number">303</span>) <span class="keyword">to</span> &lt;GET http://example.webscraping.com/places/<span class="keyword">default</span>/index&gt; from &lt;POST http://example.webscraping.com/places/<span class="keyword">default</span>/user/login?_<span class="keyword">next</span>=<span class="meta">%2Fplaces</span><span class="meta">%2Fdefault</span><span class="meta">%2Findex</span>&gt;</span><br><span class="line"><span class="number">2018</span>-<span class="number">03</span>-<span class="number">30</span> <span class="number">21</span>:<span class="number">16</span>:<span class="number">51</span> [scrapy.core.engine] DEBUG: Crawled (<span class="number">200</span>) &lt;GET http://example.webscraping.com/places/<span class="keyword">default</span>/index&gt; (referer: None)</span><br></pre></td></tr></table></figure><p>在 log 信息中，可以看到和浏览器提交表单时类似的情形：POST 请求的响应状态码为 303，之后 Scrapy 自动再发送下一个 GET 请求下载跳转页面。此时，可以通过在页面中查找特殊字符串或在浏览器中查看页面是否登录成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Welcome jason'</span> <span class="keyword">in</span> response.text</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>view(response)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>验证结果表明模拟登录成功了。显然，Scrapy 发送的第 2 个 GET 请求携带了第 1 个 POST 请求获取的 Cookie 信息，为请求附加 Cookie 信息的工作是由 Scrapy 内置的下载中间件 CookiesMiddleware 自动完成的。现在，我们可以继续发送请求，爬取那些只有登录后才能获取的信息了，这里以爬取用户个人信息为例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fetch(<span class="string">"http://example.webscraping.com/places/default/user/profile"</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span><span class="number">-30</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">04</span> [scrapy.core.engine] <span class="type">DEBUG</span>: <span class="type">Crawled</span> (<span class="number">200</span>) &lt;<span class="type">GET</span> http://example.webscraping.com/places/<span class="keyword">default</span>/user/profile&gt; (<span class="title">referer</span>: <span class="type">None</span>)</span><br><span class="line">&gt;&gt;&gt; view(response)</span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/Example%20web%20scraping%20website%2012.jpg" alt="个人信息"></p><p><strong>实现登录 LoginSpider</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author_<span class="number">_</span> = <span class="string">"東飛"</span></span><br><span class="line">__date_<span class="number">_</span> = <span class="string">"2017-11-29"</span></span><br><span class="line"></span><br><span class="line">import scrapy</span><br><span class="line">from scrapy.http import Request, FormRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginSpider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line">    name = <span class="string">'login'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.webscraping.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://example.webscraping.com/places/default/user/profile'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 解析登录后下载的页面，此例中为用户个人信息页面</span></span><br><span class="line">        keys = response.css(<span class="string">'table label::text'</span>).re(<span class="string">'(.+):'</span>)</span><br><span class="line">        values = response.css(<span class="string">'table td.w2p_fw::text'</span>).extract()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> dict(zip(keys, values))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------登录-----------------------</span></span><br><span class="line">    <span class="comment"># 登录页面的url</span></span><br><span class="line">    login_url = <span class="string">'http://example.webscraping.com/places/default/user/login?_next=/places/default/index'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">yield</span> Request(<span class="keyword">self</span>.login_url, callback=<span class="keyword">self</span>.login)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 登录页面的解析函数，构造FormRequest 对象提交表单</span></span><br><span class="line">        fd = &#123;</span><br><span class="line">            <span class="string">'email'</span>: <span class="string">"3543503058@qq.com"</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">"webscraping.com"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> FormRequest.from_response(</span><br><span class="line">                response,</span><br><span class="line">                formdata=fd,</span><br><span class="line">                callback=<span class="keyword">self</span>.parse_login</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_login</span><span class="params">(<span class="keyword">self</span>, response)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 登录成功后，继续爬取 start_urls 中的页面</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Welcome jason'</span> <span class="keyword">in</span> response.<span class="symbol">text:</span></span><br><span class="line">            <span class="keyword">yield</span> from <span class="keyword">super</span>().start_requests()  <span class="comment"># Python 3 语法</span></span><br></pre></td></tr></table></figure><p>解释上述代马如下:</p><ul><li><p>覆写基类的 start_requests 方法，最先请求登录页面。</p></li><li><p>login 方法为登录页面的解析函数，在该方法中进行模拟登录，构造表单请求并提交。</p></li><li><p>parse_login 方法为表单请求的响应处理函数，在该方法中通过在页面查找特殊字符串 ‘Welcome jason’ 判断是否登录成功，如果成功，调用基类的 start_requests 方法，继续爬取 start_urls 中的页面</p></li></ul><h5 id="识别验证码"><a href="#识别验证码" class="headerlink" title="识别验证码"></a>识别验证码</h5><h6 id="OCR识别"><a href="#OCR识别" class="headerlink" title="OCR识别"></a>OCR识别</h6><p>OCR 是光学字符识别的缩写，用于在图像中提取文本信息，tesseract-ocr 是利用该技术实现的一个验证码识别库，在 Python 中可以通过第三方库 pytesseract 调用它。下面介绍如何使用 pytesseract 识别验证码：<br><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/cqke.jpg" alt="cqke"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">首先安装 tesseract-ocr,在Ubuntu 下可以使用apt-get 安装:</span><br><span class="line">sudo apt-get install tesseract-ocr</span><br><span class="line"></span><br><span class="line">安装 pytesseract，依赖于 Python 图像处理库 PIL 或 Pillow PIL （PIL 和 Pillow PIL 功能类似，任选其一）。</span><br><span class="line">使用 pip 安装:</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install pillow</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install pytesseract</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from PIL import Image</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import pytesseract</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; img = Image.open(<span class="string">'code.png'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; img = img.convert(<span class="string">'L'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; pytesseract.image_tsti</span></span><br><span class="line">'cqKE'</span><br></pre></td></tr></table></figure><p>上面的代码中，先使用 Image.open 打开图片，为了提高识别率，调用 Image 对象的 convert 方法把图片转换为黑白图，然后将黑白图传递给 pytesseract.image_to_string 方法进行识别，这里我们幸运地识别成功了。经测试，此段代码对于 X 网站中的验证码识别率可以达到 72%，这已经足够高了。</p><p>下面我们以之前的 LoginSpider 为模板实现一个使用 pytesseract 识别验证码登录的 Spider：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2017-11-29"</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request, FormRequest</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.log <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaLoginSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"login_captcha"</span></span><br><span class="line">    start_urls = [<span class="string">'http://XXX.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># X 网站登录页面的 url (虚构的)</span></span><br><span class="line">    login_url = <span class="string">'http://XXX.com/login'</span></span><br><span class="line">    user = <span class="string">'jasonme@XXX.com'</span></span><br><span class="line">    password = <span class="string">'12345678'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> Request(self.login_url, callback=self.login, dont_filter=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 该方法既是登录页面的解析函数，又是下载验证码图片的响应处理函数</span></span><br><span class="line">        <span class="comment"># 如果 response.meta['login_response'] 存在，当前 response 为验证码图片的响应</span></span><br><span class="line">        <span class="comment"># 否则当前 response 为登录页面的响应</span></span><br><span class="line">        login_response = response.meta.get[<span class="string">'login_response'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> login_response:</span><br><span class="line">            <span class="comment"># Step 1:</span></span><br><span class="line">            <span class="comment"># 此时 response 为登录页面的响应，从中提取验证码图片的 url，下载验证码图片</span></span><br><span class="line"></span><br><span class="line">            captchaUrl = response.css(<span class="string">'label.field.prepend-icon img::attr(src)'</span>).extract_first()</span><br><span class="line"></span><br><span class="line">            captchaUrl = response.urljoin(captchaUrl)</span><br><span class="line">            <span class="comment"># 构造 Request 时，将当前 response 保存到 meta 字典中</span></span><br><span class="line">            <span class="keyword">yield</span> Request(</span><br><span class="line">                    captchaUrl,</span><br><span class="line">                    callback=self.login,</span><br><span class="line">                    meta=&#123;</span><br><span class="line">                        login_response: response</span><br><span class="line">                    &#125;,</span><br><span class="line">                    dont_filter=<span class="keyword">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Step 2:</span></span><br><span class="line">            <span class="comment"># 此时，response 为验证码图片的响应，response.body 是图片二进制数据</span></span><br><span class="line">            <span class="comment"># login_response 为登录页面的响应，用其构造表单请求并发送</span></span><br><span class="line">            formdata = &#123;</span><br><span class="line">                <span class="string">'email'</span>: self.user,</span><br><span class="line">                <span class="string">'pass'</span>: self.password,</span><br><span class="line">                <span class="comment"># 使用OCR 识别</span></span><br><span class="line">                <span class="string">'code'</span>: self.get_captcha_by_OCR(response.body),</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> FormRequest.from_response(</span><br><span class="line">                    login_response,</span><br><span class="line">                    callback=self.parse_login,</span><br><span class="line">                    formdata=formdata,</span><br><span class="line">                    dont_filter = <span class="keyword">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_login</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 根据响应结果判断是否登录成功</span></span><br><span class="line">        info = json.loads(response.text)</span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">'error'</span>] == <span class="string">'0'</span>:</span><br><span class="line">            logger.info(<span class="string">'登录成功:-)'</span>)</span><br><span class="line">        <span class="keyword">return</span> super().start_requests()</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">'登录失败:-(, 重新登录....'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.start_requests()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_captcha_by_OCR</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># OCR 识别</span></span><br><span class="line">        img = Image.open(BytesIO(data))</span><br><span class="line">        img = img.convert(<span class="string">'L'</span>)</span><br><span class="line">        captcha = pytesseract.image_to_string(img)</span><br><span class="line">        img.close()</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>解释上述代码如下:</p><ul><li>login 方法</li></ul><p>带有登证玛的登录，需要额外发送一个 HTTP 请求来获取验证码图片，这里的 login 方法既处理下载登录页面的响应，又处理下载验证码图片的响应。</p><p>解析登录页面时，提取验证码图片的 url ，发送请求下载图片，并将登录页面的<br> Response 对象保存到 Request 对象的 meta 字典中。</p><p>处理下载验证码图片的响应时，调用 get_captcha_by_OCR 方法识别图片中的验证码，然后将之前保存的登录页面的 Response 对象取出，构造 FormRequest 对象并提交。</p><ul><li>get_captcha_by_OCR 方法</li></ul><p>参教 data 是验证码图片的二进制数据，类型为 bytes ，想要使用 Image.open 函数构造 Image 对象先要把图片的二进制数据转换成某种类文件对象，这里使用 BytesIO<br>进行包裹，获得 Image 对象后先将其转换成黑白图，然后调用 pytesseract.image_to_string 方法进行识别。</p><ul><li>parse_login 方法</li></ul><p>处理表单请求的响应。响应正文是一个 json 串，其中包含了用户验证的结果，先调用 json.loads 将正文转换为 Python 宇典，然后依据其中 error 字段的值判断登录是否<br>成功，若登录成功，则从 start_urls 中的页面开始爬取；若登录失败，则重新登录。</p><h6 id="网络平台识别"><a href="#网络平台识别" class="headerlink" title="网络平台识别"></a>网络平台识别</h6><p>使用 pytesseract 识别的验证码比较简单，对于某些复杂的验证码，pytesseract 的识别率很低或者无法识别。目前，有很多网站专门提供验证码识别服务，可以识别较为复杂的验证码（有些是人工处理的），它们被称之为验证码识别平台，这平台多数是付费使用的，价格大约为 1元钱识别 100 个验证码，平台提供了 HTTP 服务接口，用户可以通过 HTTP 请求将验证码图片发送给平台，平台识别后将结果通过 HTTP 响应返回响应务接口，</p><p>在阿里云市场可以找到很多验证码识别平台：<br><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/sdcsd.jpg" alt="验证码识别平台"></p><p><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/sdcsd.jpg" alt="验证码识别平台"></p><p>阅读 API 文档，实现代码如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import urllib, urllib2, sys</span><br><span class="line"></span><br><span class="line">host = 'http://ali-make-mark.showapi.com'</span><br><span class="line">path = '/make-mark-img'</span><br><span class="line">method = 'GET'</span><br><span class="line">appcode = '你自己的AppCode'</span><br><span class="line">querys = 'border=yes&amp;border_color=105%2C179%2C90&amp;border_thickness=1&amp;image_height=50&amp;image_width=200&amp;noise_color=black&amp;obscurificator_impl=com.google.code.kaptcha.impl.WaterRipple&amp;textproducer_char_length=5&amp;textproducer_char_space=2&amp;textproducer_char_string=abcde2345678gfynmnpwx&amp;textproducer_font_color=black&amp;textproducer_font_names=Arial%2C+Courier&amp;textproducer_font_size=40'</span><br><span class="line">bodys = &#123;&#125;</span><br><span class="line">url = host + path + '?' + querys</span><br><span class="line"></span><br><span class="line">request = urllib2.Request(url)</span><br><span class="line">request.add_header('Authorization', 'APPCODE ' + appcode)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line">content = response.read()</span><br><span class="line">if (content):</span><br><span class="line">    print(content)</span><br></pre></td></tr></table></figure><h6 id="人工识别"><a href="#人工识别" class="headerlink" title="人工识别"></a>人工识别</h6><p>通常网站只需登录一次便可爬取，在其他识别方式不管用时，人工识别一次验证码也是可行的，其实现也非常简单————在 Scrapy 下载完验证码图片后，调用 Image.show 方法将图片显示出来，然后调用 Python 内置的 input 函数，等待用户肉眼识别后输入识别结果。<br>实现三种方式整体代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaLoginspider</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_captcha_by_OCR</span><span class="params">(data)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># OCR 识别</span></span><br><span class="line">        img = Image.open(BytesIO(data))</span><br><span class="line">        img = img.convert(<span class="string">'L'</span>)</span><br><span class="line">        captcha = pytesseract.image_to_string(img)</span><br><span class="line">        img.close()</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_captcha_by_network</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 平台识别</span></span><br><span class="line">        import requests</span><br><span class="line"></span><br><span class="line">        url = <span class="string">"http://ali-checkcode.showapi.com/checkcode"</span></span><br><span class="line">        appcode = <span class="string">'f23cca37f287418a90e2f9226492734"</span></span><br><span class="line"><span class="string">        form = &#123;&#125;</span></span><br><span class="line"><span class="string">        form['</span>convert_to_jpg<span class="string">'] = '</span><span class="number">0</span><span class="string">'</span></span><br><span class="line"><span class="string">        form['</span>img_base64<span class="string">'] = base64.b64encode(data)</span></span><br><span class="line"><span class="string">        form['</span>typeId<span class="string">'] = '</span><span class="number">3040</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        headers = &#123;'</span>Authorization<span class="string">': '</span>APPCODE<span class="string">' + appcode&#125;</span></span><br><span class="line"><span class="string">        response = requests.post(url, headers=headers, data=form&#125;</span></span><br><span class="line"><span class="string">        res = response.json()</span></span><br><span class="line"><span class="string">        if res['</span>showapi_res_body<span class="string">'] == 0:</span></span><br><span class="line"><span class="string">            return res['</span>showapi_res_body<span class="string">']['</span>Result<span class="string">']</span></span><br><span class="line"><span class="string">        return '</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def getcaptcha_by_user(self, data):</span></span><br><span class="line"><span class="string">        # 人工识别</span></span><br><span class="line"><span class="string">        img = Image.open(BytesIO(data))</span></span><br><span class="line"><span class="string">        img.show()</span></span><br><span class="line"><span class="string">        captcha = input("输入验证码:")</span></span><br><span class="line"><span class="string">        img.close()</span></span><br><span class="line"><span class="string">        return captcha</span></span><br></pre></td></tr></table></figure><h5 id="Cookie-登录"><a href="#Cookie-登录" class="headerlink" title="Cookie 登录"></a>Cookie 登录</h5><p>目前有的网站验证码越来越复杂，已经复杂到人类难以识别的程度，有些时候提交表单登录的路子难以走通。此时，我们可以换一种登录爬取的思路，在使用浏览器登录网站后，包含用户身份信息的 Cookie 会被浏览器保存在本地，如果 Scrapy 爬虫能直接使用浏览器中的 Cookie 发送 HTTP 请求，就可以绕过提交表单登录的步骤。</p><h6 id="获取浏览器-Cookie"><a href="#获取浏览器-Cookie" class="headerlink" title="获取浏览器 Cookie"></a>获取浏览器 Cookie</h6><p>使用第三方 Python 库 browsercookie 可以获取 Chrome 和 Firefox 浏览器 中的 Cookie。使用 pip 安装 browsercookie<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> browsercookie</span><br></pre></td></tr></table></figure></p><p>需要安装 pycrypto 依赖，默认不支持 Python3 版本，解决参考：<a href="https://blog.csdn.net/a624806998/article/details/78596543" target="_blank" rel="noopener">https://blog.csdn.net/a624806998/article/details/78596543</a></p><p>browsercookie 的使用非常简单，示例代码如下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import browsercookie</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; chrome_cookiejar = browsercookie.chrome()  <span class="comment"># 获取 Chrome 浏览器中的 Cookie</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; firefox_cookiejar = browsercookie.firefox()   <span class="comment"># 获取 Firefox 浏览器中的 Cookie</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">type</span>(chrome_cookiejar)</span></span><br><span class="line">&lt;class 'http.cookiejar.CookieJar'&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from pprint import pprint</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> cookie <span class="keyword">in</span> chrome_cookiejar:</span></span><br><span class="line">...     pprint(cookie)</span><br></pre></td></tr></table></figure></p><p>browsercookie 的 chrome 和 firefox 方法分别返回 Chomne 和 Firefox 浏览器中的<br>cookie，返回值是一个 http.cookiejar.CookieJar 对象，对 CookieJar 对象进行选代，可以访问其中的每个 Cookie 对象。</p><h6 id="CookiesMiddleware-源码分析"><a href="#CookiesMiddleware-源码分析" class="headerlink" title="CookiesMiddleware 源码分析"></a>CookiesMiddleware 源码分析</h6><p><strong>源码：Lib/site-packages/scrapy/downloadermiddlewares/cookies.py</strong> </p><p>Scrapy 爬虫所使用的 Cookie 由内置下载中间件 CookiesMiddleware<br>自动处理。</p><p>其中几个核心方法如下：</p><ul><li>from_crawler 方法</li></ul><p>从配置文件中读取 COOKIES ENABLED，决定是否启用该中间件。如果启用，调<br>用构造器创建对象，否则抛出 NotConfigured 异常，Scrapy 将忽略该中间件。</p><ul><li>__init__ 方法</li></ul><p>使用标准库中的 collections.defaultdict 创建一个默认字典 self.jar，该字典中每一项的值都是一个 scrapy.http.cookies.CookieJar 对象，CookiesMiddleware 可以让 Scrapy 爬虫同时使用多个不同的 Cookiclar，<br>例如，在某网站我们注册了两个账号 account1 和 account2，假设一个爬虫想同时登录两个账号对网站进行爬取，为了<br>了避免 Cookie 冲突（通俗地讲，登录一个会替换掉另一个），此时可以让每个账号发送的 HTTP 请求使用不同的 CookieJar，在构造 Request 对象时，可以通过 meta 参數的。<br>cookieJar 字段指定所要使用的 CookieJar，如：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 账号 account1 发送的请求</span></span><br><span class="line">Request(url1, meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'account1'</span>&#125;)</span><br><span class="line">Request(url2, meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'account1'</span>&#125;)</span><br><span class="line">Request(url3, meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'account1'</span>&#125;)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 账号 account2 发送的请求</span></span><br><span class="line">Request(url1, meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'account2'</span>&#125;)</span><br><span class="line">Request(url2, meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'account2'</span>&#125;)</span><br><span class="line">Request(url3, meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'account2'</span>&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>process_request 方法</li></ul><p>处理每一个待发送的 Request 对象，尝试从 request.meta[‘cookiejar’]获取用户指定使<br>用的 CookieJar，如果用户未指定，就使用默认的 CookieJar(self.jars[None]) 。调用<br>self._get_request_cookies 方法获取发送请求 request 应携带的 Cookie 信息，填写到 HTTP 请求头部。</p><ul><li>process_response 方法</li></ul><p>处理每一个 Response 对象，依然通过 request.meta[‘cookiejar’] 获取 Cookielar 对象，调用 extract_cookies 方法将 HTTP 响应头部中的 Cookie 信息保存到 CookieJar 对象中。</p><p>另外需要注意的是，这里的 CookieJar 是 scrapy.http.cookies.CookieJar 而在之前通过 browsercookie 获取浏览器中的 CookieJar 是标准库中的 http.cookiejar.CookieJar，它们是不同的类，前者对后者进行了包装，两者可以相互转化。</p><h6 id="实现-BrowserCookiesMiddleware"><a href="#实现-BrowserCookiesMiddleware" class="headerlink" title="实现 BrowserCookiesMiddleware"></a>实现 BrowserCookiesMiddleware</h6><p>CookiesMiddleware 自动处理 Cookie 的特性给用户提供了便利，但它不能使用浏览器的 Cookie，我们可以利用 browsercookie 进行改良，实现使用浏览器 Cookie 的中间件，代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">__author_<span class="number">_</span> = <span class="string">"東飛"</span></span><br><span class="line">__date_<span class="number">_</span> = <span class="string">"2017-11-29"</span></span><br><span class="line"></span><br><span class="line">import browsercookie</span><br><span class="line">from scrapy.downloadermiddlewares.cookies import CookiesMiddleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrowserCookiesMiddleware</span>(<span class="title">CookiesMiddleware</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, debug=False)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">super</span>().__init_<span class="number">_</span>(debug)</span><br><span class="line">        <span class="keyword">self</span>.load_browser_cookies()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_browser_cookies</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 加载 Chrome 浏览器中的 Cookie</span></span><br><span class="line">        jar = <span class="keyword">self</span>.jars[<span class="string">'chrome'</span>]</span><br><span class="line">        chrome_cookiejar = browsercookie.chrome()</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> <span class="symbol">chrome_cookiejar:</span></span><br><span class="line">            jar.set_cookie(cookie)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载 Firefox 浏览器中的 Cookie</span></span><br><span class="line">        firefox_cookiejar = browsercookie.firefox()</span><br><span class="line">        jar = <span class="keyword">self</span>.jars[<span class="string">'firefox'</span>]</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> <span class="symbol">firefox_cookiejar:</span></span><br><span class="line">            jar.set_cookie(cookie)</span><br></pre></td></tr></table></figure><p>了解了 CookiesMiddleware 的工作原理，便不难理解 BrowserCookiesMiddleware 的<br>实现了，其核心思想是：在构造 BrowserCookiesMiddleware 对象时，使用 browsercookie 将浏览器中的 Cookie 提取，存储到 CookieJar 字典 self.jars 中，解释代码如下:</p><ul><li><p>继承 CookiesMiddleware 并实现构造器方法，在构造器方法中先调用基类的构造器<br>方法，然后调用 self.load_browser_cookies 方法加载浏览器 Cookie。</p></li><li><p>在 load_browser_cookies 方法中，使用 self.jars[‘chrome’] 和 self.jars[‘firefox’] 从默认字典中获得两个 CookieJar 对象，然后调用 chrome 和 firefox 方法，分别获取两个浏览器中的 Cookie，将它们填入各自的 CookieJar对象中。</p></li></ul><h6 id="爬取知乎个人信息"><a href="#爬取知乎个人信息" class="headerlink" title="爬取知乎个人信息"></a>爬取知乎个人信息</h6><p>通过使用 BrowserCookiesMiddleware 获取知乎用户的个人信息<br><img src="https://dongfei.oss-cn-shanghai.aliyuncs.com/%E7%9F%A5%E4%B9%8E%E4%B9%8B.jpg" alt="zhihuzhi"></p><p>将 BrowserCookiesMiddleware 源码复制到项目下的 middlewares.py 中，<br>在配置文件 settings.py 中添加如下配置：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 伪装成常规浏览器</span></span><br><span class="line">USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.<span class="number">3325.14</span>6 Safari/537.36'</span><br><span class="line"></span><br><span class="line">用 BrowserCookiesMiddleware 替代 CookiesMiddleware 启用前者，关团后者</span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    'ArticleSpider.middlewares.BrowserCookiesMiddleware': <span class="number">701</span>,</span><br><span class="line">    'scrapy.downloadermiddlewares.cookies.CookiesMiddleware': None,    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于需求非常简单，因此不再编写 Spider，直接在scrapy shell 环境中进行演示。意，为了使用项目中的配置，需要在 <strong>项目目录</strong>下启动scrapy shell 命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">F:\VirtualEnv\jobboleArticle\ArticleSpider</span><br><span class="line">(jobboleArticle) $ scrapy shell</span><br><span class="line">............</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from scrapy import Request</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; url = <span class="string">"https://www.zhihu.com/settings/profile"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; fetch(Request(url,meta=&#123;<span class="string">'cookiejar'</span>:<span class="string">'chrome'</span>&#125;))</span></span><br><span class="line">2018-03-31 15:28:23 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2018-03-31 15:28:23 [scrapy.downloadermiddlewares.cookies] DEBUG: Sending cookies to: &lt;GET https://www.zhihu.com/settings/profile&gt;</span><br><span class="line">Cookie: __DAYU_PP=Izvyf3MInbqQ6AzMZNeM2826864c6ffb; __DAYU_PP=Yee7A2aUjvjMIZEJfQYz2db6dcd51be2; __utma=51854390.1271732890.1522479670.1522479670.1522479670.1; __utmb=51854390.0.10.1522479670; __utmv=51854390.100-1|2=registration_date=20151218=1^3=entry_date=20151218=1; __utmz=51854390.1522479670.1.1.utmcsr=zhihu.com|utmccn=(referral)|utmcmd=referral|utmcct=/people/geng-dong-fei/activities; _zap=ae9aa6a5-49bc-4480-a722-e6be1565a91c; d_c0="AGDC4NfPzwyPTrS7n_0PM5L0qcPMAK_vqyc=|1512884449"; q_c1=166834564cdd4bf79f4d349fcb16e920|1521010814000|1512884448000; z_c0="2|1:0|10:1514289890|4:z_c0|92:Mi4xV1Zoa0FnQUFBQUFBWU1MZzE4X1BEQ1lBQUFCZ0FsVk40b2d2V3dEMS16cFo0MXlmNlVVbzE5N2JZNlZGTkpGQ013|648affd73f7b115cfb0a0d5e0e844d3325ad0dfb94c1de102f790606f5dcd9c3"</span><br><span class="line"></span><br><span class="line">2018-03-31 15:28:23 [scrapy.downloadermiddlewares.cookies] DEBUG: Received cookies from: &lt;200 https://www.zhihu.com/settings/profile&gt;</span><br><span class="line">Set-Cookie: _xsrf=bad5bdecf7b3c52016b3a774309cfa82; expires=Mon, 30 Apr 2018 07:28:20 GMT; Path=/</span><br><span class="line"></span><br><span class="line">2018-03-31 15:28:23 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://www.zhihu.com/settings/profile&gt; (referer: None)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; view(response)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="comment"># 提取页面中的姓名和个性域名信息</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;response.css(<span class="string">'span.name::text'</span>).extract_first()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;response.css(<span class="string">'input.zg-form-text-input::attr(value)'</span>).extract_first()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;response.xpath(<span class="string">'//input[@class="zg-form-text-input"]/@value'</span>).extract_first()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>精通 Scrapy 网络爬虫（框架篇）</title>
      <link href="/2018-03-25/%E7%B2%BE%E9%80%9A%20Scrapy%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%A1%86%E6%9E%B6%E7%AF%87%EF%BC%89/"/>
      <url>/2018-03-25/%E7%B2%BE%E9%80%9A%20Scrapy%20%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%EF%BC%88%E6%A1%86%E6%9E%B6%E7%AF%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><h5 id="Scrapy-框架结构"><a href="#Scrapy-框架结构" class="headerlink" title="Scrapy 框架结构"></a>Scrapy 框架结构</h5><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522577588&amp;di=3ed3c6dd189771dd817e2b75386f310b&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fwww.bkjia.com%2Fuploads%2Fallimg%2F150531%2F051S24401-0.png" alt="Scrapy 框架结构"></p><ul><li><p>ENGINE：引擎，框架的核心，其他所有组件在其控制下协同工作</p></li><li><p>SCHEDULER：调度器，负责对 Spider 提交的下载请求进行调度</p></li><li><p>DOWNLOADER：下载器，负责下载页面（发送HTTP请求/接收HTTP响应）</p></li><li><p>SPIDER：爬虫，负责提取页面中的数据，并产生对新页面的下载请求</p></li><li><p>MIDDLEWARE：中间件，负责对 Request 对象和 Response对象进行处理</p></li><li><p>ITEM PIPELINE：数据管道，负责对爬取到的数据进行处理</p></li></ul><a id="more"></a><h5 id="数据流中的对象"><a href="#数据流中的对象" class="headerlink" title="数据流中的对象"></a>数据流中的对象</h5><p><strong>REQUEST：Scrapy 中的 HTTP 请求对象</strong><br><strong>RESPONSE：Scrapy 中的 HTTP 响应对象</strong><br><strong>ITEM：提取的页面数据对象</strong></p><p>Request 对象的构造器方法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">源码：scrapy\http\request</span><br><span class="line"></span><br><span class="line">Request(url[, callback=<span class="keyword">None</span>, method=<span class="string">'GET'</span>, headers=<span class="keyword">None</span>,     body=<span class="keyword">None</span>,</span><br><span class="line">              cookies=<span class="keyword">None</span>,  meta=<span class="keyword">None</span>,    encoding=<span class="string">'utf-8'</span>, priority=<span class="number">0</span>,</span><br><span class="line">              dont_filter=<span class="keyword">False</span>, errback=<span class="keyword">None</span>, flags=<span class="keyword">None</span>])</span><br><span class="line">常用参数：</span><br><span class="line">url：</span><br><span class="line">（必选），请求页面的 url 地址</span><br><span class="line"></span><br><span class="line">callback：</span><br><span class="line">页面解析函数，Callable 类型，Request 对象请求的页面下载完成后，</span><br><span class="line">由该参数指定页面解析函数被调用。如果未传递该参数，默认调用 Spider 的 parse 方法</span><br><span class="line"></span><br><span class="line">headers：</span><br><span class="line">HTTP 请求头部字典，dict 类型。设置为 <span class="keyword">None</span>，禁止发送。如 &#123;<span class="string">'Cookie'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">cookies:</span><br><span class="line">Cookie 信息字典，dict 类型</span><br><span class="line"></span><br><span class="line">meta：</span><br><span class="line">Request 的元数据字典，dict 类型，用于给框架中的其他组件传递信息。</span><br><span class="line">比如中间件 Item Pipeline。其他组件可以使用 Request 对象的 meta 属性访问该元数据字典（request.meta）</span><br><span class="line"></span><br><span class="line">encoding；</span><br><span class="line">对 url 和 body 参数进行编码，默认为 utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">dont_filter：</span><br><span class="line">同一个 url 多次请求进行过滤，避免重复下载。默认为 <span class="keyword">False</span>，若爬取内容时刻变化，应设置为 <span class="keyword">True</span>，强制下载</span><br><span class="line"></span><br><span class="line">errback：</span><br><span class="line">请求出现异常或者出现 HTTP 错误时（如 <span class="number">404</span> 页面不存在）的回调函数</span><br></pre></td></tr></table></figure><p>Respose 对象的构造器方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">源码：scrapy\http\response</span><br><span class="line"></span><br><span class="line">常用参数：</span><br><span class="line">meta：</span><br><span class="line">获取传递的 meta 数据，通过 response<span class="selector-class">.meta</span> 获取信息</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">xpath</span><span class="params">(query)</span></span>：</span><br><span class="line">Xpath 选择器提取页面数据</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">css</span><span class="params">(query)</span></span>：</span><br><span class="line">CSS 选择器提取页面数据</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">urljoin</span><span class="params">(url)</span></span>：</span><br><span class="line">构造绝对 url .传入的 url 参数是一个相对地址</span><br></pre></td></tr></table></figure><h5 id="核心类：scripy-Spider"><a href="#核心类：scripy-Spider" class="headerlink" title="核心类：scripy.Spider"></a>核心类：scripy.Spider</h5><p><strong>源码：scrapy\spiders__init__.py</strong></p><p>重要的属性和方法:</p><ul><li>start_urls：请求 url 列表</li><li>start_requests()：调用 make_requests_from_url 方法，发送 Request 请求</li><li>make_requests_from_url()</li><li>parse()：页面解析函数</li></ul><h5 id="使用-Selector-提取页面数据"><a href="#使用-Selector-提取页面数据" class="headerlink" title="使用 Selector 提取页面数据"></a>使用 Selector 提取页面数据</h5><p><strong>源码：/scrapy/selector</strong></p><ul><li>创建对象</li></ul><p>参数：文档字符串或者 Response 对象<br><strong>注意 Response 内置 Selector</strong></p><ul><li>选择对象</li></ul><p>调用 Selector 对象的 xpath 方法或 css 方法，返回 SelectorList 对象</p><ul><li>提取数据</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">extract</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">extract_first</span><span class="params">()</span></span> </span><br><span class="line"><span class="function"><span class="title">re</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">re_first</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li>XPath 选择器语法</li></ul><p>根节点、元素节点、属性节点、文本节点</p><p>参考：<br><a href="http://blog.csdn.net/zcc_0015/article/details/51434714" target="_blank" rel="noopener">关于scrapy网络爬虫的xpath书写经验总结</a><br><a href="http://www.w3school.com.cn/xpath/xpath_functions.asp" target="_blank" rel="noopener">XPath 参考手册</a></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">常用标志：</span><br><span class="line"></span><br><span class="line">/           E1/E2</span><br><span class="line">.           ./E</span><br><span class="line">..</span><br><span class="line">ELEMENT</span><br><span class="line">//ELEMENT       E1//E2</span><br><span class="line">*</span><br><span class="line"><span class="function"><span class="title">text</span><span class="params">()</span></span></span><br><span class="line"><span class="function">@ATTR</span></span><br><span class="line"><span class="function">@*</span></span><br><span class="line"><span class="function">ELEMENT[谓语]     谓语：<span class="title">last</span><span class="params">()</span>、<span class="title">position</span><span class="params">()</span>、</span></span><br><span class="line"><span class="function"><span class="title">string</span><span class="params">(arg)</span>：返回参数的字符串值</span></span><br><span class="line"><span class="function"><span class="title">contains</span><span class="params">(str1，str2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">示例：</span></span><br><span class="line"><span class="function"><span class="title">response</span>.<span class="title">xpath</span><span class="params">('//a[<span class="number">3</span>]')</span></span></span><br><span class="line"><span class="function"><span class="title">response</span>.<span class="title">xpath</span><span class="params">('//a[last()]')</span></span></span><br><span class="line"><span class="function"><span class="title">response</span>.<span class="title">xpath</span><span class="params">('//a[position()&lt;<span class="number">3</span>]')</span></span></span><br><span class="line"><span class="function"><span class="title">response</span>.<span class="title">xpath</span><span class="params">('string(/html/body/a)')</span></span></span><br><span class="line"><span class="function"><span class="title">response</span>.<span class="title">xpath</span><span class="params">('//p[contains(@class,<span class="string">"info"</span>)]')</span></span></span><br></pre></td></tr></table></figure><ul><li>CSS 选择器语法</li></ul><p>参考：</p><p><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">CSS 选择器语法</a></p><p><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/css.jpg" alt="CSS 选择器语法"></p><h5 id="使用-Item-封装数据"><a href="#使用-Item-封装数据" class="headerlink" title="使用 Item 封装数据"></a>使用 Item 封装数据</h5><p><strong>源码：\scrapy\item.py</strong></p><ul><li>Item 基类</li></ul><p>自定义数据类（如MovieItem）的基类，继承 scrapy.item 类</p><ul><li>Field 类</li></ul><p>用来描述自定义数据类包含哪些字段</p><p><strong>注意拓展 item 子类，只需要继承已定义类的即可</strong></p><h5 id="使用-Item-Pipeline-处理数据"><a href="#使用-Item-Pipeline-处理数据" class="headerlink" title="使用 Item Pipeline 处理数据"></a>使用 Item Pipeline 处理数据</h5><p><strong>源码：scrapy\pipelines</strong></p><p>作用：</p><ul><li>清洗数据</li><li>验证数据的有效性</li><li>过滤掉重复的数据</li><li>将数据存入数据库 </li></ul><p>每一个 Item Pipeline 只需要实现某些特定的方法即可</p><ul><li><p>process_item(item,spider)     必须实现，抛出 DropItem 异常后，item 立即抛弃不再传递给下一个 Pipeline</p></li><li><p>open_spider(self,spider)   Spider打开时调用该方法，如连接数据库</p></li><li><p>close_spider(self,spider)   Spider关闭时调用该方法，如关闭数据库</p></li><li><p>from_crawler(cls,crawler)   读取配置文件内容</p></li></ul><h5 id="使用-LinkExtractor-提取页面链接"><a href="#使用-LinkExtractor-提取页面链接" class="headerlink" title="使用 LinkExtractor 提取页面链接"></a>使用 LinkExtractor 提取页面链接</h5><ul><li>使用 Selector</li></ul><p>使用选择器进行页面链接的提取</p><ul><li>使用 LinkExtractor</li></ul><p>位于 scrapy.linkextractors 模块，使用一个或者多个构造器参数描述提取规则，注意 LinkExtractor 构造器的所有参数都有默认值，如果构造对象时不传递任何参数（使用默认值），就提取页面中的所有链接。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">示例一：</span><br><span class="line">from scrapy.linkextractors import LinkExtractor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span>(<span class="title">scrapy</span>.<span class="title">spider</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取下一页链接</span></span><br><span class="line">    <span class="comment"># &lt;li class="next"&gt;&lt;a href="source/page-1.html"&gt;next&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>,response)</span></span><span class="symbol">:</span></span><br><span class="line">        le = LinkExtractor(restrict_css=<span class="string">'ul.pager li.next'</span>)</span><br><span class="line">        links = le.extract_links(response)</span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">links:</span></span><br><span class="line">            next_url = links[<span class="number">0</span>].url </span><br><span class="line">            <span class="comment"># 得到的是绝对 url 地址，无须再调用 response.urljoin 方法</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_url,callback = parse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二：</span></span><br><span class="line"><span class="comment"># 获取页面所有链接</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;le = LinkExtractor()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;links = le.extract_links(response)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;[link.url for link in links]</span><br></pre></td></tr></table></figure><p>LinkExtractor 构造器主要参数：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">allow</span>|<span class="selector-tag">deny</span>：接收一个正则表达式或一个正则表达式列表</span><br><span class="line"><span class="selector-tag">allow_domains</span>|<span class="selector-tag">_domains</span>：接收一个域名或一个域名列表</span><br><span class="line"><span class="selector-tag">restrict_xpaths</span>： 接收一个<span class="selector-tag">XPath</span>表达式或一个<span class="selector-tag">XPath</span>表达式列表</span><br><span class="line"><span class="selector-tag">restrict_css</span>： 接收一个<span class="selector-tag">CSS</span>表达式或一个<span class="selector-tag">CSS</span>表达式列表</span><br><span class="line"><span class="selector-tag">tags</span>：接收一个标签（字符串）或一个标签列表，提取指定标签内的链接，默认为<span class="selector-attr">['a','area']</span></span><br><span class="line"><span class="selector-tag">attrs</span>：接收一个属性（字符串）或一个属性列表，提取指定属性内的链接，默认为<span class="selector-attr">['href']</span></span><br><span class="line"><span class="selector-tag">process_calue</span>：接收一个形如 <span class="selector-tag">func</span>(value) 的回调函数。用于处理提取到的每一个链接</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"><span class="selector-tag">LinkExtractor</span>(allow=<span class="string">'/index/\d+.html$'</span>)</span><br><span class="line"><span class="selector-tag">LinkExtractor</span>(restrict_xpaths=<span class="string">'//div[@id="bottom"]'</span>)</span><br><span class="line"><span class="selector-tag">LinkExtractor</span>(restrict_css=<span class="string">'div#bottom'</span>)</span><br><span class="line"><span class="selector-tag">LinkExtractor</span>(tags=<span class="string">'script'</span>, attr=<span class="string">'src'</span>)</span><br></pre></td></tr></table></figure></p><h5 id="使用-Exporter-导出数据"><a href="#使用-Exporter-导出数据" class="headerlink" title="使用 Exporter 导出数据"></a>使用 Exporter 导出数据</h5><p>Scrapy 中负责导出数据的组件为 Exporter（导出器），其内部实现了多个 Exporter，每个 Exporter 实现一种数据格式的导出。</p><ul><li>JSON (JsonItemExporter)</li><li>JSON lines (JsonLinesItemExporter)</li><li>CSV (CsvItemExporter)</li><li>XML (XmlItemExporter)</li><li>Pickle (PickleItemExporter)</li><li>Marshal (MarshalItemExporter)</li></ul><p>通过以下两种方式指定爬虫如何导出数据：</p><ul><li>通过命令行参数指定</li><li>通过配置文件指定</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例一：</span><br><span class="line"><span class="keyword">scrapy </span>crawl <span class="keyword">books </span>-o <span class="keyword">books.csv</span></span><br><span class="line"><span class="keyword">scrapy </span>crawl <span class="keyword">books </span>-t csv -o <span class="keyword">books.data</span></span><br><span class="line"><span class="keyword">scrapy </span>crawl <span class="keyword">books </span>-o <span class="string">'export_data/%(name)s/%(time)s.csv'</span></span><br><span class="line"><span class="keyword">scrapy </span>crawl <span class="keyword">books </span>-o <span class="keyword">books.csv </span>--nolog</span><br><span class="line">参数：</span><br><span class="line">-o：导出文件路径 </span><br><span class="line">-t：导出数据格式 </span><br><span class="line">%(name)s：Spider 的名字</span><br><span class="line">%(time)s： 文件创建的时间</span><br></pre></td></tr></table></figure><p>配置字典 FEED_EXPORTERS 包括两部分：</p><ul><li>默认配置文件中的 FEED_EXPORTERS_BASE</li><li>用户配置文件中的 FEED_EXPORTERS</li></ul><p>默认的配置字典 FEED_EXPORTERS 位于 scrapy.settings.default_settings 模块</p><p>用户配置文件参数在 settings.py 中设置：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FEED_URL：导出文件路径</span><br><span class="line">FEED_URL = 'export_data/%(name)s.data'</span><br><span class="line"></span><br><span class="line">FEED_FORMAT：导出数据格式</span><br><span class="line">FEED_FORMAT = 'csv'</span><br><span class="line"></span><br><span class="line">FEED_EXPORT_ENCODING：导出文件编码，默认 json 使用数字编码，其他使用 utf-8</span><br><span class="line">FEED_EXPORT_ENCODING = 'gbk'</span><br><span class="line"></span><br><span class="line">FEED_EXPORT_FILEDS：导出数据包含的字段（有序）</span><br><span class="line">FEED_EXPORT_FILEDS = ['name','author','price']</span><br><span class="line"></span><br><span class="line">FEED_EXPORTERS：用户自定义 Exporter字典，添加新的导出数据格式时使用 </span><br><span class="line">FEED_EXPORTERS = &#123;'excel':'projectname.exporters.ExcelItemExporter'&#125;</span><br></pre></td></tr></table></figure></p><p>导出新的数据格式，参照 Scrapy 内部的 Exporter 类（scrapy.exporters 模块）<br>将数据写入 Excel 文件可以使用第三方库 xlwt</p><h5 id="使用-FilesPipeline-和-ImagesPipeline-下载文件和图片"><a href="#使用-FilesPipeline-和-ImagesPipeline-下载文件和图片" class="headerlink" title="使用 FilesPipeline 和 ImagesPipeline 下载文件和图片"></a>使用 FilesPipeline 和 ImagesPipeline 下载文件和图片</h5><p><strong>源码：scrapy/pipelines</strong></p><p>Scrpay 框架内部提供了 FilesPipeline 和 ImagesPipeline，专门用于下载文件和图片，用户只需要通过 item 的一个特殊字段将要下载文件或图片的 url 传递给它们，它们就会自动将文件或图片下载到本地，并将下载结果信息存入 item 的另一个特殊字段，以便用户在导出文件中查询。</p><p>配置如下：</p><ul><li><p>配置文件 setting.py 中启用 FilesPipeline，通常将其置于其他 Item Pipeline 之前</p></li><li><p>配置文件 setting.py 中使用 FILES_SRORE 指定文件下载目录</p></li><li><p>将所需要下载文件的 url 地址收集到一个列表，赋值给 item 的 file_urls 字段（items[‘file_urls’]）。FilesPipeline 在处理每一项 item 时，会读取 item[‘file_urls’]，对其每一个 url 进行下载。</p></li></ul><p>示例如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="string">'scrapy.pipeline.files.FilesPipeline'</span> : <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">FILES_SRORE = <span class="string">'/home/download/scrapy'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>,response)</span></span><span class="symbol">:</span></span><br><span class="line">    item = &#123;&#125;</span><br><span class="line">    <span class="comment"># 下载列表</span></span><br><span class="line">    item[<span class="string">'file_urls'</span>] = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> response.xpath(<span class="string">'//s/@href'</span>).extract()<span class="symbol">:</span></span><br><span class="line">        download_url = response.urljoin(url)</span><br><span class="line">        <span class="comment"># 将 url 加入下载列表</span></span><br><span class="line">        item[<span class="string">'file_urls'</span>] .append(download_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>当 FilesPipeline 下载完 item[‘file_urls’] 中的所有文件后，会将各文件的下载结果信息收集到另一个列表，赋值给 item 的files 字段（item[‘files’]）。下载结果信息包括以下内容：</p><ul><li>Path 文件下载到本地的路径（相对于 FILES_SRORE 的相对路径）。</li><li>Checksum 文件的校验和</li><li>url 文件的 url 地址</li></ul><p>ImagesPipeline 是 FilesPipeline 的子类，使用上和 FilesPipeline 大同小异。只是在所使用的 item 字段和配置选项上略有不同。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">                FilesPipeline                   </span><br><span class="line"></span><br><span class="line">导入路径    scrapy<span class="selector-class">.pipeline</span><span class="selector-class">.files</span><span class="selector-class">.FilesPipeline</span></span><br><span class="line"></span><br><span class="line">Item 字段     file_urls，files</span><br><span class="line"></span><br><span class="line">下载目录        FILES_SRORE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ImagesPipeline</span><br><span class="line"></span><br><span class="line">导入路径    scrapy<span class="selector-class">.pipeline</span><span class="selector-class">.files</span><span class="selector-class">.ImagesPipeline</span></span><br><span class="line"></span><br><span class="line">Item 字段     image_urls，images</span><br><span class="line"></span><br><span class="line">下载目录        IMAGES_STORE</span><br></pre></td></tr></table></figure><p>ImagesPipeline 在 FilesPipeline 的基础上针对图片增加了一些特有的功能</p><ul><li>为图片生成缩略图</li></ul><p>开启该功能，只需要在配置文件 setting.py 中设置 IMAGES_THUMBS，它是一个字典，每一项的值是缩略图的尺寸，代码如下：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IMAGES_THUMBS = &#123;</span><br><span class="line">    <span class="string">'small'</span>: <span class="comment">(50,50)</span>,</span><br><span class="line">    <span class="string">'big'</span>: <span class="comment">(270,270)</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开启该功能后，下载一张图片时，本地会出现 3 张图片（一张原图片，两张缩略图）。路径如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[IMAGES_STORE]/full/<span class="number">23239</span>.png</span><br><span class="line">[IMAGES_STORE]/thumbs/small/<span class="number">23239</span>.png</span><br><span class="line">[IMAGES_STORE]/thumbs/big/<span class="number">23239</span>.png</span><br></pre></td></tr></table></figure></p><ul><li>过滤尺寸过小的图片</li></ul><p>开启该功能，需要在配置文件 setting.py 中设置 IMAGES_MIN_WIDTH 和 IMAGES_MIN_HEIGHT ，他们分别指定图片最小的宽和高，代码如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">IMAGES_MIN_WIDTH</span> = <span class="number">110</span></span><br><span class="line"><span class="attr">IMAGES_MIN_HEIGHT</span> = <span class="number">110</span></span><br></pre></td></tr></table></figure><p>开启该功能后如果下载了一张 105 X 200 的图片，该图片的宽度不符合标准会被抛弃。</p><p>文件名是其 url 的 sha1 散列值。可以修改 FilesPipeline 的文件命名规则，只需要实现一个 FilesPipeline 的子类，覆写 file_path 方法来实现所期望的文件命名规则。示例如下：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">from</span> scrapy.pipeline.files.<span class="type">FilesPipeline</span> <span class="keyword">import</span> FilesPipeline</span><br><span class="line"><span class="title">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="title">from</span> os.path <span class="keyword">import</span> basename,dirname,join</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">MyFilesPipeline</span>(<span class="type">FilesPipeline</span>):</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def file_path(<span class="title">self</span>,<span class="title">request</span>,<span class="title">response</span>=<span class="type">None</span>,<span class="title">info</span>=<span class="type">None</span>):</span></span><br><span class="line"><span class="class">        path = urlparse(<span class="title">request</span>.<span class="title">url</span>).path</span></span><br><span class="line"><span class="class">        return join(<span class="title">basename</span>(<span class="title">dirname</span>(<span class="title">path</span>)),basename(<span class="title">path</span>))</span></span><br></pre></td></tr></table></figure></p><p>下载扩展 <strong>MediaPipeline</strong>，参考链接：<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/media-pipeline.html#module-scrapy.pipeline.files" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/media-pipeline.html#module-scrapy.pipeline.files</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬虫参考指南</title>
      <link href="/2018-03-24/%E7%88%AC%E8%99%AB%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/"/>
      <url>/2018-03-24/%E7%88%AC%E8%99%AB%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p><strong>调试FAQ</strong></p><ul><li><a href="blog.csdn.net/zcc_0015/article/details/51434714">关于scrapy网络爬虫的xpath书写经验总结</a></li><li><a href="https://segmentfault.com/a/1190000003509661" target="_blank" rel="noopener">scrapy 的 shell 命令</a></li></ul><p><strong>工具参考</strong></p><ul><li><a href="https://cuiqingcai.com/4959.html" target="_blank" rel="noopener">跟繁琐的命令行说拜拜！Gerapy分布式爬虫管理框架来袭！ | 静觅</a></li><li><a href="https://blog.scrapinghub.com/" target="_blank" rel="noopener">The Scrapinghub Blog – Turn Web Content Into Useful Data</a></li><li><a href="http://www.hicrawler.com/" target="_blank" rel="noopener">免费的网页数据采集工具, 高智能云爬虫</a></li><li><a href="http://www.newcrawler.com/zh-cn/index.html" target="_blank" rel="noopener">鸟巢采集器 | 免费的网页数据采集工具</a></li><li><a href="http://www.shenjianshou.cn/" target="_blank" rel="noopener">在线网络爬虫/大数据分析/机器学习开发平台-神箭手云</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端背景特效总结一波</title>
      <link href="/2018-01-31/%E5%89%8D%E7%AB%AF%E8%83%8C%E6%99%AF%E7%89%B9%E6%95%88%E6%80%BB%E7%BB%93%E4%B8%80%E6%B3%A2/"/>
      <url>/2018-01-31/%E5%89%8D%E7%AB%AF%E8%83%8C%E6%99%AF%E7%89%B9%E6%95%88%E6%80%BB%E7%BB%93%E4%B8%80%E6%B3%A2/</url>
      <content type="html"><![CDATA[<p><a href="https://alloyteam.github.io/curvejs/" target="_blank" rel="noopener">魔幻线条curvejs</a> 这个感觉实用性不强</p><p><a href="https://www.zybuluo.com/mdeditor#" target="_blank" rel="noopener">粒子特效插件particles-自己的文章</a><br><a href="https://github.com/Barrior/JParticles" target="_blank" rel="noopener">JParticles是多个特效的一个整合</a></p><p><a href="https://github.com/kennethcachia/shape-shifter" target="_blank" rel="noopener">shape-shifter 用粒子组成文字</a><br><a href="http://www.kennethcachia.com/shape-shifter/" target="_blank" rel="noopener">shape-shifter Demo</a></p><p><a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener">anime.js</a> 动画库 其实跟上面的不同 但可以用这个做许多特效 而且例子不错<br><a id="more"></a></p><p><a href="https://github.com/greensock/GreenSock-JS/" target="_blank" rel="noopener">GreenSock-JS</a> 动画库 这个动画的例子真的很棒<br><a href="https://greensock.com/examples-showcases" target="_blank" rel="noopener">GreenSock-JS DEMO</a><br><a href="http://www.w2bc.com/Article/9438" target="_blank" rel="noopener">TweenMax的实例</a><br><a href="http://www.jq22.com/code312" target="_blank" rel="noopener">TweenMax的实例2</a></p><p>看来TweenMax用来做菱形这个背景应该是很拿手的 有空可以看一下</p><p><a href="https://github.com/rishabhp/bideo.js" target="_blank" rel="noopener">HTML5 Background Video</a></p><p><a href="http://www.qdfuns.com/notes/14464/3be240066e8ab4d47f0fd65e2a3060c5.html" target="_blank" rel="noopener">H5腾讯QQ登录界面背景动画特效</a></p><p>不断生成的粒子特效</p><p>其实是three.js的一个例子<br><a href="https://threejs.org/examples/#canvas_particles_waves" target="_blank" rel="noopener">HTML5 3D 粒子波浪动画特效</a></p><p>菱形背景特效</p><p>固定版菱形背景特效</p><p><a href="https://github.com/qrohlf/trianglify" target="_blank" rel="noopener">用的是这个 trianglify插件</a></p><p>用three.js做的低多边形 这个是我比较喜欢的</p><p>转载自：<a href="http://elickzhao.github.io/" target="_blank" rel="noopener">elickzhao’s Blog</a></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy-Elasticsearch-Django 搭建搜索网站</title>
      <link href="/2018-01-12/Scrapy-Elasticsearch-Django%20%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2018-01-12/Scrapy-Elasticsearch-Django%20%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/elasticsearch.jpg" alt="https://www.elastic.co"><br><strong>Elasticsearch官方</strong>：<a href="https://www.elastic.co/use-cases" target="_blank" rel="noopener">https://www.elastic.co/use-cases</a></p><p>其他类似产品：<strong>Elasticsearch solr 、sphinx、ELK</strong><br><a id="more"></a></p><font color="red">Elasticsearch 安装 </font><ul><li>安装：<strong>JavaSE JDK</strong> <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>安装：<strong>Elasticsearch</strong> <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch</a></li><li>推荐安装：<strong>Elasticsearch-rtf</strong> <a href="https://github.com/medcl/elasticsearch-rtf" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-rtf</a></li></ul><p>检测安装是否成功：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">切换至<span class="selector-tag">elasticsearch</span>安装目录、<span class="selector-tag">cmd</span>运行：<span class="selector-tag">elasticsearch</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:9200</span></span><br></pre></td></tr></table></figure></p><font color="red">head 插件和 kibana 的安装 </font><br><strong>head安装：</strong> 数据库管理、基于浏览器<br><strong>Github地址：</strong> <a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a><br><br>需要安装：<strong>node.js npm+cnpm</strong><br>测试：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">elasticsearch-head</span></span><br><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span></span><br><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">run</span> <span class="selector-tag">start</span></span><br><span class="line">打开：127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:9100</span></span><br></pre></td></tr></table></figure><br><br>报错权限问题：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置Elasticsearch.yml</span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.enabled</span>: true</span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.allow-origin</span>: <span class="string">"*"</span></span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.allow-methods</span>: OPTIONS, HEAD, GET, POST, PUT, DELETE</span><br><span class="line">http<span class="selector-class">.cors</span><span class="selector-class">.allow-headers</span>: <span class="string">"X-Requested-With, Content-Type, Content-Length, X-User"</span></span><br></pre></td></tr></table></figure><br><br><strong>kibana安装、与elasticsearch版本对应：</strong><br><strong>下载地址：</strong><a href="https://www.elastic.co/downloads/past-releases/" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases/</a><br>测试、切换至解压目录运行 <code>kibana.bat</code><br><br><font color="red">Elasticsearch 基本的索引和文档 CRUD 操作</font><ul><li>index（索引）==》数据库</li><li>type（类型）==》表</li><li>documents（文档）==》行</li><li>fields ==》列 </li></ul><p><strong>初始化数据库</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT lagou</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"index"</span> :&#123;</span><br><span class="line">        <span class="string">"number_of_shards"</span>:<span class="number">5</span>, 分片</span><br><span class="line">        <span class="string">"number_of_replicas"</span>:<span class="number">1</span> 副本</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>获取数据库信息</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> lagou/_settings</span><br><span class="line"><span class="builtin-name">GET</span> _all/_settings</span><br><span class="line"><span class="builtin-name">GET</span> _all/_settings</span><br><span class="line"><span class="builtin-name">GET</span> .kibana,lagou/_settings</span><br></pre></td></tr></table></figure></p><p><strong>修改 _settings</strong><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT lagou/_settings</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"number_of_shards"</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>获取索引信息</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _all</span><br><span class="line"><span class="builtin-name">GET</span> lagou</span><br></pre></td></tr></table></figure></p><p><strong>保存文档</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT lagou/job/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"python分布式爬虫开发 "</span>,</span><br><span class="line">  <span class="string">"salary_min"</span>:<span class="number">15000</span>,</span><br><span class="line">  <span class="string">"city"</span>:<span class="string">"北京"</span>,</span><br><span class="line">  <span class="string">"company"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"百度"</span>,</span><br><span class="line">    <span class="string">"company_addr"</span>:<span class="string">"北京市软件园"</span></span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"publish_date"</span>:<span class="string">"2017-4-16"</span>,</span><br><span class="line">  <span class="string">"comments"</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>添加数据</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST lagou/job/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"python django 开发工程师"</span>,</span><br><span class="line">  <span class="string">"salary_min"</span>:<span class="number">30000</span>,</span><br><span class="line">  <span class="string">"city"</span>:<span class="string">"上海"</span>,</span><br><span class="line">  <span class="string">"company"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"美团科技"</span>,</span><br><span class="line">    <span class="string">"company_addr"</span>:<span class="string">"北京市软件园A区"</span></span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"publish_date"</span>:<span class="string">"2017-4-16"</span>,</span><br><span class="line">  <span class="string">"comments"</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>查看数据</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> lagou/job/1</span><br><span class="line"><span class="builtin-name">GET</span> lagou/job/1?<span class="attribute">_source</span>=title</span><br><span class="line"><span class="builtin-name">GET</span> lagou/job/1?<span class="attribute">_source</span>=title,city</span><br></pre></td></tr></table></figure></p><p><strong>修改数据</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT lagou/job/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"python分布式爬虫开发 "</span>,</span><br><span class="line">  <span class="string">"salary_min"</span>:<span class="number">15000</span>,</span><br><span class="line">  <span class="string">"company"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"百度"</span>,</span><br><span class="line">    <span class="string">"company_addr"</span>:<span class="string">"北京市软件园"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"publish_date"</span>:<span class="string">"2017-4-16"</span>,</span><br><span class="line">  <span class="string">"comments"</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST lagou/job/<span class="number">1</span>/_<span class="keyword">update</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"doc"</span>: &#123;</span><br><span class="line">    <span class="string">"comment"</span>:<span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>删除数据</strong><br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> lagou/job/<span class="number">1</span></span><br><span class="line"><span class="keyword">DELETE</span> lagou/job</span><br><span class="line"><span class="keyword">DELETE</span> lagou</span><br></pre></td></tr></table></figure></p><font color="red">Elasticsearch 的 mget 和 bulk 批量操作</font><p><strong>mget 操作</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">PUT testdb</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"index"</span> :&#123;</span><br><span class="line">        <span class="string">"number_of_shards"</span>:<span class="number">5</span>, </span><br><span class="line">        <span class="string">"number_of_replicas"</span>:<span class="number">1</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testdb/job1/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"job1_1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testdb/job1/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"job1_2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testdb/job2/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"job2_1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testdb/job2/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>:<span class="string">"job2_2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>:<span class="string">"testdb"</span>,</span><br><span class="line">      <span class="string">"_type"</span>:<span class="string">"job1"</span>,</span><br><span class="line">      <span class="string">"_id"</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>:<span class="string">"testdb"</span>,</span><br><span class="line">      <span class="string">"_type"</span>:<span class="string">"job1"</span>,</span><br><span class="line">      <span class="string">"_id"</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET testdb/_mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_type"</span>:<span class="string">"job1"</span>,</span><br><span class="line">      <span class="string">"_id"</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_type"</span>:<span class="string">"job1"</span>,</span><br><span class="line">      <span class="string">"_id"</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET testdb/job1/_mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_id"</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_id"</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET testdb/job1/_mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"ids"</span>:[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>bulk批量操作</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"lagou"</span>,<span class="string">"_type"</span>:<span class="string">"job"</span>,<span class="string">"_id"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"title"</span>:<span class="string">"python django 开发工程师"</span>,<span class="string">"salary_min"</span>:<span class="number">30000</span>,<span class="string">"city"</span>:<span class="string">"上海"</span>,<span class="string">"company"</span>:&#123;<span class="string">"name"</span>:<span class="string">"美团科技"</span>,<span class="string">"company_addr"</span>:<span class="string">"北京市软件园A区"</span>&#125;,<span class="string">"publish_date"</span>:<span class="string">"2017-4-16"</span>,<span class="string">"comments"</span>:<span class="number">20</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"lagou"</span>,<span class="string">"_type"</span>:<span class="string">"job2"</span>,<span class="string">"_id"</span>:<span class="string">"2"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"title"</span>:<span class="string">"python分布式爬虫开发 "</span>,<span class="string">"salary_min"</span>:<span class="number">15000</span>,<span class="string">"city"</span>:<span class="string">"北京"</span>,<span class="string">"company"</span>:&#123;<span class="string">"name"</span>:<span class="string">"百度"</span>,<span class="string">"company_addr"</span>:<span class="string">"北京市软件园"</span>&#125;,<span class="string">"publish_date"</span>:<span class="string">"2017-4-16"</span>,<span class="string">"comments"</span>:<span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure></p><font color="red">Elasticsearch 的 mapping 映射管理</font><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> lagou/_mapping/job</span><br><span class="line"><span class="builtin-name">GET</span> _all/_mapping</span><br></pre></td></tr></table></figure><br><br><font color="red">Scrapy 写入数据到 Elasticsearch</font><p><strong>elasticsearch-Python</strong> 数据转换包 <strong>elasticsearch-dsl-py</strong><br>Github地址：<a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch-dsl-py</a><br>安装：<code>pip install elasticsearch-dsl</code></p><p>定义数据类型、添加<code>ElasticsearchPipeline</code></p><p><strong>ES完成搜索建议-搜索建议字段保存</strong><br>自动补全文档：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html</a></p><p><strong>查看分析器分析结果</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_smart"</span>, </span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"Python网络开发工程师 "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意安装指定版本</strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install elasticsearch-dsl==<span class="number">5.1</span><span class="number">.0</span></span><br><span class="line">pip install elasticsearch==<span class="number">5.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p><p><font color="red">Django 实现 elasticsearch 的搜索建议</font><br>创建开发环境：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv<span class="selector-class">.bat</span> --python=D:\ProgramData\Anaconda3\python<span class="selector-class">.exe</span> lcv_search</span><br></pre></td></tr></table></figure></p><p>安装django：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> django</span><br></pre></td></tr></table></figure></p><p>GitHub相关：<strong>Django scrapy</strong></p><p><font color="red">scrapyd 部署 scrapy 项目</font><br>Github地址：<a href="https://github.com/scrapy/scrapyd" target="_blank" rel="noopener">https://github.com/scrapy/scrapyd</a><br>scrapyd 相当于服务器<br>安装：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span><span class="keyword">scrapyd</span></span><br><span class="line"><span class="keyword">pip </span><span class="keyword">install </span><span class="keyword">scrapyd-client</span></span><br></pre></td></tr></table></figure></p><p>创建 scrapyd-deploy.bat 文件：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scrapyd-deploy </span>-l</span><br><span class="line"><span class="keyword">scrapy </span>list</span><br></pre></td></tr></table></figure></p><p>部署项目：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapyd-deploy dongfei -<span class="selector-tag">p</span> ArticleSpider</span><br><span class="line"></span><br><span class="line">curl http:<span class="comment">//localhost:6800/daemonstatus.json</span></span><br></pre></td></tr></table></figure></p><p>部署某一个spider：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">http:</span><span class="comment">//localhost:6800/schedule.json -d project=ArticleSpider -d spider=jobbole</span></span><br></pre></td></tr></table></figure></p><p>删除：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">http:</span><span class="comment">//localhost:6800/delproject.json -d project=ArticleSpider</span></span><br></pre></td></tr></table></figure></p><p>官方API文档：<br><a href="http://scrapyd.readthedocs.io/en/stable/api.html#daemonstatus-json" target="_blank" rel="noopener">http://scrapyd.readthedocs.io/en/stable/api.html#daemonstatus-json</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy-Redis 分布式爬虫基础</title>
      <link href="/2018-01-12/Scrapy-Redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
      <url>/2018-01-12/Scrapy-Redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/redis.jpg" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/redis.jpg"></p><p>Redis 文档 <a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></p><p><font color="red">安装</font><br>Redis 官方安装 ：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><p>Linux 安装： <code>sudo apt-get install redis-server</code></p><p>Windows 安装 ：</p><ul><li><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></li><li><a href="https://github.com/ServiceStack/redis-windows" target="_blank" rel="noopener">https://github.com/ServiceStack/redis-windows</a></li></ul><a id="more"></a><p><strong>设置服务、默认端口：6379</strong></p><p><font color="red">Redis 数据类型</font><br><strong>字符串</strong><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> course_name <span class="comment">"scrapy-redis"</span></span><br><span class="line">get <span class="comment">course_name</span></span><br><span class="line">getrange <span class="comment">course_name 2 5</span></span><br><span class="line">strlen <span class="comment">course_name</span></span><br><span class="line">incr/decr course_count</span><br><span class="line">append course_count <span class="comment">"body"</span></span><br></pre></td></tr></table></figure></p><p><strong>散列、哈希</strong><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hset</span> course_dict <span class="keyword">boddy </span><span class="string">"python scrapy"</span></span><br><span class="line"><span class="symbol">hget</span> course_dict <span class="keyword">boddy</span></span><br><span class="line"><span class="keyword">hgetall </span>course_dict </span><br><span class="line"><span class="symbol">hexists</span> couser_dict <span class="keyword">boddy</span></span><br><span class="line"><span class="keyword">hdel </span>course_dict <span class="keyword">boddy </span></span><br><span class="line"><span class="symbol">hkeys</span> course_dict</span><br><span class="line"><span class="symbol">hvals</span> course_dict</span><br></pre></td></tr></table></figure></p><p><strong>列表</strong><br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lpush/rpush mylist <span class="string">"imooc"</span></span><br><span class="line"><span class="keyword">lrange</span> mylist <span class="number">0</span> <span class="number">10</span> </span><br><span class="line">blpop/brpop mylist1[mylist2] timeout</span><br><span class="line">lpop/rpop mylist </span><br><span class="line">llen mylist </span><br><span class="line"><span class="keyword">lindex</span> mylist  index</span><br></pre></td></tr></table></figure></p><p><strong>集合</strong><br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sadd myset <span class="string">"imooc.com"</span></span><br><span class="line">scard myset</span><br><span class="line">sdiff myset<span class="string">[myset2]</span></span><br><span class="line">sinter myset<span class="string">[myset2]</span></span><br><span class="line">spop myset</span><br><span class="line">srandmember myset</span><br><span class="line">smembers myset</span><br></pre></td></tr></table></figure></p><p><strong>可排序集合</strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zadd myset <span class="number">0</span> <span class="string">"python"</span> <span class="number">5</span> <span class="string">"scrapy"</span> <span class="number">35</span> <span class="string">"Django"</span></span><br><span class="line">zrangebyscore myset <span class="number">0</span> <span class="number">3</span></span><br><span class="line">zcount myset <span class="number">5</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></p><p><font color="red">Scrapy-redis 分布式爬虫调试</font><br><strong>Github地址</strong>：<a href="https://github.com/rmax/scrapy-redis" target="_blank" rel="noopener">https://github.com/rmax/scrapy-redis</a><br><strong>安装：</strong><code>pip install redis</code></p><p><strong>建立项目：</strong><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon <span class="keyword">jobboleArticle</span></span><br><span class="line"><span class="keyword">scrapy </span>startproject <span class="keyword">ScrapyRedisTest</span></span><br></pre></td></tr></table></figure></p><p><strong>设置：</strong><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = False</span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    'scrapy_redis.pipelines.RedisPipeline': 300</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>调试：</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key *</span><br><span class="line"></span><br><span class="line">type jobbole:requests</span><br><span class="line"></span><br><span class="line">zrangebyscore jobbole:requests 0 100`</span><br></pre></td></tr></table></figure></p><p>集成 <code>bloomfilter</code> 到 <code>scrapy-redis</code><br><a href="https://github.com/liyaopinner/BloomFilter_imooc" target="_blank" rel="noopener">https://github.com/liyaopinner/BloomFilter_imooc</a></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TortoiseGit 安装与配置</title>
      <link href="/2018-01-12/TortoiseGit%20%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018-01-12/TortoiseGit%20%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>TortoiseGit 简称 <strong>tgit</strong>， 中文名 <strong>海龟Git</strong>。海龟Git只支持神器 Windows 系统，有一个前辈海龟SVN， TortoiseSVN 和 TortoiseGit 都是非常优秀的开源的版本库客户端。分为32位版与64位版并且支持各种语言，包括简体中文。</p><font color="red">下载</font><br>TortoiseGit 下载页面:<br>- <a href="http://download.tortoisegit.org/tgit/" target="_blank" rel="noopener">http://download.tortoisegit.org/tgit/</a><br>- <a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">https://tortoisegit.org/download/</a><br><br>根据 Windows 操作系统版本选择相应的程序安装包和中文语言包<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/TortoiseGit%20%E4%B8%8B%E8%BD%BD.png" alt=""><br><a id="more"></a><br><font color="red">安装程序</font><p>先安装程序包，然后安装语言包（LanguagePack）。 因为 TortoiseGit 只是一个程序壳，必须依赖一个 Git Core，所以必须要安装的 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>。下面以64位版本为演示（64，32位除文件名不一样，其他的操作都一致）</p><p>双击安装程序 <code>TortoiseGit-2.3.0.0-64bit.msi</code> 弹出安装向导界面:<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/203_tgitWizard.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/203_tgitWizard.png"></p><p>下一步，进入版权信息界面、 直接点击下一步（Next）即可。<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/204_tgit_License.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/204_tgit_License.png"><br>下一步，选择SSH客户端、 可以选择 TortoiseGitPlink（位于TortoiseGit安装目录<code>/bin</code> 下）， 也可以选择 Git 默认的 SSH 客户端，位于 Git安装目录<code>/bin/ssh.exe</code>（如果配置了 Path，那直接是 ssh.exe）<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/204_2_tgit_Network.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/204_2_tgit_Network.png"><br>接着是选择安装目录，可以保持默认，或者安装到开发环境目录下，安装的程序组件保持默认即可：<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/205_tgit_dir.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/205_tgit_dir.png"><br>下一步到确认安装界面，点击 Install 按钮安装即可，如下图所示：<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/206_install_tgit.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/206_install_tgit.png"><br>安装完成，点击 Finish 按钮即可：<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/207_tgit_installed.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/207_tgit_installed.png"><br>如果以前有老版本，则选择覆盖，关闭旧程序并尝试重启即可</p><font color="red">安装语言包</font><p>双击打开 <code>TortoiseGit-LanguagePack-2.3.0.0-64bit-zh_CN.msi</code>，则弹出语言包安装向导：<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/208_LanguageWizard.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/208_LanguageWizard.png"></p><p>点击下一步， 语言包会自动安装完成：<br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/209_LangPackFinished.png" alt="http://dongfei.oss-cn-shanghai.aliyuncs.com/209_LangPackFinished.png"><br>点击完成按钮即可。</p>]]></content>
      
      <categories>
          
          <category> 工具助手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TortoiseGit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ElasticSearch 系列问题集锦</title>
      <link href="/2017-12-24/ElasticSearch%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2017-12-24/ElasticSearch%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p><strong>配置FAQ</strong></p><ul><li><a href="https://www.biaodianfu.com/centos-7-install-elasticsearch.html" target="_blank" rel="noopener">Elasticsearch在Centos 7上的安装与配置</a></li><li><a href="http://blog.csdn.net/qq_21387171/article/details/53577115" target="_blank" rel="noopener">elasticsearch常见错误与配置简介 </a></li><li><a href="http://blog.csdn.net/sinat_29581293/article/details/53894033" target="_blank" rel="noopener">ElasticSearch关闭重启命令</a></li></ul><a id="more"></a><p><strong>数据操作</strong></p><ul><li><a href="https://elasticsearch.cn/book/elasticsearch_definitive_guide_2.x/" target="_blank" rel="noopener">Elasticsearch: 权威指南 | Elastic</a></li><li><a href="https://github.com/taskrabbit/elasticsearch-dump" target="_blank" rel="noopener">elasticsearch-dump: Import and export tools for elasticsearch</a></li><li><a href="https://www.zhangluya.com/?p=543" target="_blank" rel="noopener">使用elasticsearch-dump进行es索引数据迁移 – Jesse’s Blog</a></li><li><a href="kms.h3c.com/View.aspx?id=51640">elasticdump 工具使用介绍</a></li><li><a href="https://www.cnblogs.com/yjf512/p/4897294.html" target="_blank" rel="noopener">elasticsearch 查询（match和term）</a></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 安装 Python3 和 Pip3</title>
      <link href="/2017-12-14/CentOS7%20%E5%AE%89%E8%A3%85%20Python3%20%E5%92%8C%20Pip3/"/>
      <url>/2017-12-14/CentOS7%20%E5%AE%89%E8%A3%85%20Python3%20%E5%92%8C%20Pip3/</url>
      <content type="html"><![CDATA[<p><code>CentOS 7</code> 默认安装了 <code>Python 2</code>，当需要使用 <code>Python 3</code> 的时候，可以手动下载 Python 源码后编译安装。</p><p><font color="red">一、安装 Python 3</font><br><strong>安装准备</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /usr/<span class="built_in">local</span>/python3 <span class="comment"># 创建安装目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 Python 源文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：wget获取https的时候要加上：--no-check-certificate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xzvf Python-3.6.0.tgz <span class="comment"># 解压缩包</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Python-3.6.0 <span class="comment"># 进入解压目录</span></span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>编译安装</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ./configure --prefix=/usr/<span class="built_in">local</span>/python3 <span class="comment"># 指定创建的目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br></pre></td></tr></table></figure></p><p><strong>配置： 两个版本共存</strong><br>创建 python3 的软链接：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python3</span><br></pre></td></tr></table></figure></p><p>这样就可以通过 <em>python</em> 命令使用 Python 2，<em>python3</em> 来使用 Python 3。<br><strong>修改默认为 Python 3</strong><br>将 /usr/bin 中的 python 备份<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv <span class="keyword">python</span> <span class="keyword">python</span>.bak</span><br></pre></td></tr></table></figure></p><p>然后创建 python3 的软链接<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python</span><br></pre></td></tr></table></figure></p><p>这样默认的 Python 版本就替换为 Python 3 了。</p><p><strong>因为 yum 使用 Python 2，因此替换为 Python 3 后可能无法正常工作，因此修改 yum 配置文件</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /usr/bin/yum</span></span><br></pre></td></tr></table></figure></p><p>将第一行指定的 python 版本改为 python2.7（<code>#!/usr/bin/python</code> 改为 <code>#!/usr/bin/python2.7</code>）</p><p><font color="red">二、安装 pip</font><br><strong>yum 安装</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先安装 epel 扩展源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum -y install epel-release</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 python-pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum -y install python-pip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除 cache</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum clean all</span></span><br></pre></td></tr></table></figure></p><p>通过这种方式貌似只能安装 pip2，想要安装 Python 3 的 pip，可以通过以下的源代码安装方式。</p><p><strong>源码安装</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载源代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zvxf 9.0.1 -C pip-9.0.1    <span class="comment"># 解压文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> pip-9.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 Python 3 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 setup.py install</span></span><br></pre></td></tr></table></figure></p><p>创建链接<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/pip /u</span>sr<span class="regexp">/bin/</span>pip3</span><br></pre></td></tr></table></figure></p><p>升级 pip<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade pip</span></span><br></pre></td></tr></table></figure></p><p><strong>创建 <code>python</code> 虚拟环境</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> virtualenv virtualenvwrapper</span><br><span class="line"></span><br><span class="line">mkvirtualenv -p /usr/<span class="keyword">bin</span>/python2<span class="number">.7</span> py2</span><br><span class="line">mkvirtualenv -p /usr/<span class="keyword">local</span>/python3/<span class="keyword">bin</span>/python3<span class="number">.6</span>  py3</span><br></pre></td></tr></table></figure></p><p>参考链接：</p><ul><li><a href="https://blog.huzhifeng.com/2016/09/12/CentOS-7-Install-Python3-pip3/" target="_blank" rel="noopener">CentOS 7.2 安装 Python3 和 pip3</a> </li><li><a href="https://ehlxr.me/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/" target="_blank" rel="noopener">CentOS 7 安装Python3、pip3</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Selenium 功能自动化测试工具</title>
      <link href="/2017-12-12/Selenium%20%E5%8A%9F%E8%83%BD%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>/2017-12-12/Selenium%20%E5%8A%9F%E8%83%BD%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><strong>百度百科：</strong><a href="https://baike.baidu.com/item/Selenium/18266" target="_blank" rel="noopener">https://baike.baidu.com/item/Selenium/18266</a></p><p><strong>官方文档：</strong><a href="http://selenium-python.readthedocs.io/api.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html</a></p><p><strong>下载安装相应浏览器的 <code>Driver</code></strong><br><a href="http://selenium-python.readthedocs.io/installation.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/installation.html</a></p><p><strong>安装 Selenium</strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> selenium</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>测试selenium</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome(<span class="attribute">executable_path</span>=<span class="string">"D:/Program Files/BrowserDriver/chromedriver.exe"</span>)</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">"https://detail.tmall.hk/hk/item.htm?.....e-c5d86ff88864"</span>)</span><br><span class="line"><span class="builtin-name">print</span>(browser.page_source)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure></p><p>不同平台下不同的浏览器的启动速度不同</p><p>用 <code>selenium chrome</code>模拟知乎登录遇到 <strong>ElementNotVisibleException: Message: element not visible</strong></p><p>知乎默认打开的时候显示的是二维码登录、所以登录的用户名密码输入框不显示导致的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spider<span class="selector-class">.browser</span><span class="selector-class">.find_element_by_css_selector</span>(<span class="string">".signin-switch-password"</span>).click() </span><br><span class="line"><span class="selector-tag">time</span>.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p><strong>WebDriver–定位元素</strong></p><ul><li><a href="https://www.cnblogs.com/minieye/p/5803640.html" target="_blank" rel="noopener">https://www.cnblogs.com/minieye/p/5803640.html</a></li><li><a href="http://selenium-python.readthedocs.io/locating-elements.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/locating-elements.html</a></li></ul><p>webdriver 定位页面元素插件：<strong><a href="https://addons.mozilla.org/zh-CN/firefox/addon/element-locator-for-webdriv/?src=api" target="_blank" rel="noopener">WebDriver Element Locator</a></strong></p><p><strong>模拟滚动条下拉</strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">browser.<span class="keyword">get</span>(<span class="string">"https://www.oschina.net/blog"</span>)</span><br><span class="line"><span class="comment"># 注意需要页面加载完全</span></span><br><span class="line"><span class="comment"># 执行JavaScript代码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    browser.execute_script(<span class="string">"window.scrollTo(0, document.body.scrollHeight);var lenOfPage = document.body.scrollHeight ;return lenOfPage;"</span>)</span><br><span class="line">    <span class="built_in">time</span>.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p><strong>设置chromedriver不加载图片（加快页面加载速度）</strong><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome_opt = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;<span class="string">"profile.managed_default_content_settings.images"</span>:2&#125;</span><br><span class="line">chrome_opt.add_experimental_option(<span class="string">"prefs"</span>,prefs)</span><br><span class="line">browser = webdriver.Chrome(executable_path=<span class="string">"D:/Program Files/BrowserDriver/chromedriver.exe"</span>,chrome_options=chrome_opt)</span><br><span class="line"><span class="section">browser.get("https://www.taobao.com")</span></span><br></pre></td></tr></table></figure></p><p><strong>Phantomjs</strong>：无界面浏览器、效率高、多进程情况下<code>phantomjs</code>性能下降严重<br>获取动态网页</p><p><strong>Selenium 集成至 Scrapy</strong></p><p>中间组件：scrapy download【GitHub】</p><p>chrome无界面运行【适用于linux】<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install pyvirtualdisplay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyvirtualdisplay import Display</span><br><span class="line">display = Display(<span class="attribute">visible</span>=0, size=(800,600))</span><br><span class="line">display.start()</span><br><span class="line">browser = webdriver.Chrome(<span class="attribute">executable_path</span>=<span class="string">"D:/Program Files/BrowserDriver/chromedriver.exe"</span>)</span><br><span class="line">browser.<span class="builtin-name">get</span>(<span class="string">"https://www.oschina.net/blog"</span>)</span><br></pre></td></tr></table></figure></p><p>类似工具：</p><ul><li><a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="noopener">scrapy-splash</a></li><li><a href="http://www.seleniumhq.org/projects/grid/" target="_blank" rel="noopener">selenium-grid</a></li><li><a href="https://github.com/cobrateam/splinter" target="_blank" rel="noopener">splinter</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy 基础知识（六）</title>
      <link href="/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><a href="http://wiki.jikexueyuan.com/project/scrapy/" target="_blank" rel="noopener">Scrapy 中文指南</a><br><a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="noopener">Scrapy 1.4 Documentation</a></p><p><strong>scrapy 的暂停与重启</strong><br>不同的spider不能共用同一个目录、不同的run下不能共用同一个目录<br><strong>ctrl+c</strong> 暂停爬虫、点击两次、结束爬虫<br><a id="more"></a><br>保存爬虫状态、注意一定是 <strong>JOBDIR</strong><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scrapy </span>crawl <span class="keyword">jobbole </span>-s <span class="keyword">JOBDIR=jobbole_info/001</span></span><br></pre></td></tr></table></figure></p><p><strong>scrapy url去重原理</strong><br>去重的中间件：<code>Lib/site-packages/scrapy/dupefilters.py</code><br><strong>scrapy telnet服务</strong><br><a href="http://wiki.jikexueyuan.com/project/scrapy/telnet-console.html" target="_blank" rel="noopener">Windows10开启telent服务</a><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 6023</span><br><span class="line">spider</span><br><span class="line">settings</span><br><span class="line">settings[<span class="string">"COOKIES_ENABLED"</span>]</span><br><span class="line">暂停：engine.pause()</span><br><span class="line">恢复：engine.unpause()</span><br><span class="line">停止：engine.stop()</span><br></pre></td></tr></table></figure></p><ul><li><strong>scrapy 的数据收集</strong></li><li><strong>http 404 页面收集</strong></li><li><strong>scrapy 信号详解</strong></li><li><strong>scrapy扩展开发（Middleware类似于扩展）</strong></li></ul><p>参考链接：</p><p>-<a href="http://blog.csdn.net/xnby/article/details/52297047" target="_blank" rel="noopener">Scrapy进阶,middleware的使用</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy 基础知识（五）</title>
      <link href="/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<font color="red">Scrapy突破反爬虫的限制</font><p><strong>随机获取 user-agent</strong></p><ul><li>通过 downloadmiddleware 随机更换 user-agent</li></ul><p>全局中间组件Middleware：<code>site-packages/scrapy/downloadermiddlewares/useragent.py</code></p><ul><li>使用第三方包 <a href="https://github.com/hellysmile/fake-useragent" target="_blank" rel="noopener">FakeUserAgent</a></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">ua.ie</span><br><span class="line">ua.<span class="built_in">random</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>实现ip代理池</strong></p><ul><li><a href="http://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a></li><li><a href="https://github.com/aivarsk/scrapy-proxies" target="_blank" rel="noopener">scrapy-proxies</a></li><li><a href="https://github.com/scrapy-plugins/scrapy-crawlera" target="_blank" rel="noopener">scrapy-crawlera</a>   </li><li><a href="http://www.theonionrouter.com/" target="_blank" rel="noopener">洋葱皮Tor网络</a>       </li></ul><p><strong>云打码实现验证码识别</strong><br><a href="http://www.yundama.com/" target="_blank" rel="noopener">云打码官网</a></p><p><strong>cookies 禁用</strong></p><p>对不同的爬虫配置不同的设置<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">    <span class="string">"COOKIES_ENABLED"</span> : True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy 基础知识（四）</title>
      <link href="/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><font color="red">知乎数据爬取注意</font><br>知乎在未登录状态下只能查看部分信息<br><strong>headers添加<code>user-agent</code>信息、否则返回 <code>500</code></strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy <span class="keyword">shell</span> -s USER_AGENT=<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:57.0) Gecko/20100101 Firefox/57.0"</span> http<span class="variable">s:</span>//www.zhihu.<span class="keyword">com</span>/question/<span class="number">29675892</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通过点击问题下的 <strong>【查看全部】</strong>发送的请求 <strong>【注意network中的数据】</strong><br>分析数据:<br><code>https://www.zhihu.com/api/v4/questions/27330476/answers........&amp;offset=3&amp;limit=20&amp;sort_by=default</code></p><p>注意 <strong>offset</strong>与 <strong>limit</strong></p><p>调试时注意关闭不需要跟踪的变量</p><p><font color="red">知乎倒立验证码</font><br><a href="https://github.com/muchrooms/zheye" target="_blank" rel="noopener">GitHub：zheye</a></p><p>安装<code>requirements.txt</code>中依赖的包<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ -r requirements.txt</span></span><br></pre></td></tr></table></figure></p><p>若出现错误，去下面网址下载相应的包<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> tensorflow</span><br></pre></td></tr></table></figure><p><strong>Request模拟登陆知乎、获取cookies后保存至文件、再传入Scrapy模拟登陆</strong></p><p>json中dumps、 loads 、dump、load 的区别</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json<span class="selector-class">.dumps</span> : dict转成str</span><br><span class="line">json<span class="selector-class">.loads</span> : str转成dict</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/bainianminguo/p/6676067.html" target="_blank" rel="noopener">python的json模块的dumps，loads，dump，load方法介绍</a></li><li><a href="http://blog.csdn.net/yan_xing_an/article/details/46892105" target="_blank" rel="noopener">json.dumps loads 终于区分出来了</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy 基础知识（三）</title>
      <link href="/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<font color="red">item 存储数据</font><br><code>\jobboleArticle\ArticleSpider\ArticleSpider\items.py</code><br><br>将数据保存至 <strong>MySQL数据库</strong> 需要安装 <strong>MySQL驱动mysqlclient</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【Windows安装】pip <span class="keyword">install</span> -i https://pypi.douban.com/simple/ mysqlclient</span><br><span class="line">【Ubuntu安装】sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libmysqlclient-dev</span><br><span class="line">【Ubuntu安装】sudo yum <span class="keyword">install</span> python-devel mysql-devel</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><br><strong>Field XXX doesn’t have a default value</strong>错误解决办法：<br>打开<code>my.ini</code>，查找<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sql-mode</span>=<span class="string">"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br></pre></td></tr></table></figure><br><br>修改为<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sql-mode</span>=<span class="string">"NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br></pre></td></tr></table></figure><br><br>数据插入同步操作：scrapy 的解析速度远远大于mysql的插入速度的、会造成堵塞的<br>数据插入异步操作：使用twist框架提供的异步机制、设置连接池<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br><span class="line"><span class="comment"># adbapi可以将mysqldb中的操作变为异步操作</span></span><br></pre></td></tr></table></figure><br><br>可以在<code>settings.py</code>中配置 <code>mysql</code><br>连接时注意设置 <strong>encoding=utf8</strong>不能写为 <strong>utf-8</strong><br><br>也可以参考GitHub中：<code>scrapy-djangoitem</code><br><br><font color="red">scrapy item loader 机制</font><p>解决字段提取后期维护工作、在 item.py 统一处理字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="comment"># 通过item loader加载item</span></span><br><span class="line">item_loader = ItemLoader(item=JobBoleArticleItem() , response=response)</span><br><span class="line">item_loader.add_css(<span class="string">'title'</span>, <span class="string">'.entry-header h1::text'</span>)</span><br><span class="line">item_loader.add_value(<span class="string">'url'</span>, response.url)</span><br><span class="line">item_loader.add_xpath()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要对item进行进一步的处理items.py</span></span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> MapCompose</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_jobbole</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value + <span class="string">"大飞哥"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobBoleArticleItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># MapCompose接收title的值、作为参数传入函数处理</span></span><br><span class="line">    title = scrapy.Field(</span><br><span class="line">        input_processor = MapCompose(<span class="keyword">lambda</span> x: x+<span class="string">"-jobbole"</span>, add_jobbole)</span><br><span class="line">        <span class="comment"># input_processor = MapCompose(add_jobbole)</span></span><br><span class="line">        output_processor = TakeFirst(),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回的是一个数组、提取其中的第一个值、使用TakeFirst模块</span></span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> MapCompose, TakeFirst</span><br><span class="line"><span class="comment"># 优化output_processor()</span></span><br><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleItemLoader</span><span class="params">(ItemLoader)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义ItemLoader，继承scrapy.loader中的ItemLoader</span></span><br><span class="line">    default_output_processor = TakeFirst()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在jobbole.py中就需要使用为自定义的(ItemLoader)</span></span><br><span class="line"><span class="keyword">from</span> ArticleSpider.items <span class="keyword">import</span> JobBoleArticleItem,ArticleItemLoader</span><br><span class="line"><span class="comment"># from scrapy.loader import ItemLoader</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tags 就要自定义 output_processor、使用Join模块</span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join</span><br><span class="line">output_processor = Join(<span class="string">","</span>)</span><br></pre></td></tr></table></figure></p><font color="red">数据保存至文件：<code>article.json</code></font><p>由于 datetime 格式化 create_time、json 序列化工具不能序列化 datetime 类型数据问题。<br><strong>TypeError: Object of type ‘date’ is not JSON serializable</strong></p><ul><li><a href="http://blog.csdn.net/design321/article/details/43308497" target="_blank" rel="noopener">解决json.dumps不能序列化datetime类型的问题</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy 基础知识（二）</title>
      <link href="/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<font color="red">选择器调试</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy<span class="selector-class">.exe</span> shell http:<span class="comment">//blog.jobbole.com/110287/</span></span><br></pre></td></tr></table></figure><p><strong>scrapy shell</strong> 使用 url 参数构造一个 Request 对象，并提供给 Scrapy 引擎，页面下载完成后，程序进入一个 Python shell 当中，在此环境中已经创建好了一些变量（对象和函数），以下几个最为常用：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">request</span>：</span><br><span class="line">最近一次下载对应的 <span class="built_in">Request</span> 对象</span><br><span class="line"></span><br><span class="line"><span class="built_in">response</span>：</span><br><span class="line">最近一次下载对应的 <span class="built_in">Response</span> 对象</span><br><span class="line"></span><br><span class="line">fetch(req_or_url)：</span><br><span class="line">该函数用于下载页面，可传入一个 <span class="built_in">Request</span> 对象或 url 字符串，调用后会更新变量 <span class="built_in">request</span> 和 <span class="built_in">response</span></span><br><span class="line"></span><br><span class="line">view(<span class="built_in">response</span>)：</span><br><span class="line">该函数用于在浏览器中显示 <span class="built_in">response</span> 中的页面</span><br></pre></td></tr></table></figure><font color="red">XPath的应用：</font><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取文章标题</span><br><span class="line">re_selector = response.xpath('/html/body/div[1]/div[3]/div[1]/div[1]/h1/text()')</span><br><span class="line">re2_selector = response.xpath('//*[@id=<span class="string">"post-110287"</span>]/div[1]/h1/text()')</span><br><span class="line">re3_selector = response.xpath('//div[@class=<span class="string">"entry-header"</span>]/h1/text()')</span><br></pre></td></tr></table></figure><p>查看网页源代码与检查元素的代码是不同的</p><ul><li>审查元素(或者用开发者工具，Firebug)：现在实时性的内容(经过js的修改)</li><li>网页源代码：最开始浏览器收到HTTP响应内容<a id="more"></a><strong>scrapy爬取的是网页源代码【不包含JS、CSS等文件】</strong></li></ul><p><strong>获取标题：</strong><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tittle = response.xpath('<span class="comment">//div[@class="entry-header"]/h1/text()')  </span></span><br><span class="line">#未直接进行extract()，是为了使tittle仍可以进行xpath()操作</span><br><span class="line">&gt;&gt;&gt; tittle                                                       </span><br><span class="line"><span class="meta">[&lt;Selector xpath='//div[@class="entry-header"]/h1/text()' data='2016 腾讯软件开发面试题（部分）'&gt;]</span>                </span><br><span class="line">&gt;&gt;&gt; tittle.extract()          </span><br><span class="line">['<span class="number">2016</span> 腾讯软件开发面试题（部分）']   </span><br><span class="line">&gt;&gt;&gt; tittle.extract()[<span class="number">0</span>]             </span><br><span class="line">'<span class="number">2016</span> 腾讯软件开发面试题（部分）'               </span><br><span class="line">&gt;&gt;&gt; tittle.xpath('<span class="comment">//*')                                              </span></span><br><span class="line">[]                           </span><br><span class="line">&gt;&gt;&gt;tittle                                                                   </span><br><span class="line"><span class="meta">[&lt;Selector xpath='//div[@class="entry-header"]/h1/text()' data='2016 腾讯软件开发面试题（部分）'&gt;]</span></span><br></pre></td></tr></table></figure></p><p><strong>获取时间：</strong><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(<span class="string">'//p[@class="entry-meta-hide-on-mobile"]/text()'</span>).extract()[<span class="number">0</span>].<span class="keyword">strip</span>()</span><br><span class="line"><span class="string">'2017/02/18 ·'</span> </span><br><span class="line">#<span class="keyword">text</span>()获取标签内的所有文本内容（包括子标签）、extract()将提取的内容转为列表、<span class="keyword">strip</span>([chars])移除字符串头尾指定的字符、默认删除空白符（包括<span class="string">'\n'</span>, <span class="string">'\r'</span>,  <span class="string">'\t'</span>,  <span class="string">' '</span>)</span><br><span class="line">&gt;&gt;&gt; response.xpath(<span class="string">'//p[@class="entry-meta-hide-on-mobile"]/text()'</span>).extract()[<span class="number">0</span>].<span class="keyword">strip</span>().<span class="keyword">strip</span>(<span class="string">'·'</span>).<span class="keyword">strip</span>()</span><br><span class="line"><span class="string">'2017/02/18'</span></span><br><span class="line">&gt;&gt;&gt; response.xpath(<span class="string">'//p[@class="entry-meta-hide-on-mobile"]/text()'</span>).extract()[<span class="number">0</span>].<span class="keyword">strip</span>().<span class="keyword">strip</span>(<span class="string">' ·'</span>)</span><br><span class="line"><span class="string">'2017/02/18'</span></span><br><span class="line">&gt;&gt;&gt; response.xpath(<span class="string">'//p[@class="entry-meta-hide-on-mobile"]/text()'</span>).extract()[<span class="number">0</span>].<span class="keyword">strip</span>().replace(<span class="string">'·'</span>,<span class="string">''</span>).<span class="keyword">strip</span>()</span><br><span class="line"><span class="string">'2017/02/18'</span></span><br></pre></td></tr></table></figure></p><p><strong>获取赞数：</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; int(response.xpath(<span class="string">'//span[contains(@class,"vote-post-up")]/h10/text()'</span>).extract()[0])</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意contains()函数的用法</span></span><br></pre></td></tr></table></figure></p><p><strong>获取收藏：</strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fav_nums =  response.xpath(<span class="string">'//span[contains(@class,"bookmark-btn")]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">match_re = re.match(<span class="string">r'.*?(\d+).*'</span>,fav_nums)</span><br><span class="line"><span class="keyword">if</span> match_re:</span><br><span class="line">    fav_nums = match_re.group(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#注意使用正则表达式</span></span><br></pre></td></tr></table></figure></p><p><strong>获取标签：</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag_list =  response.xpath(<span class="string">'//p[@class="entry-meta-hide-on-mobile"]/a/text()'</span>).extract()</span><br><span class="line">tag_list =  [<span class="keyword">element</span> <span class="keyword">for</span> <span class="keyword">element</span> <span class="keyword">in</span> tag_list <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">element</span>.strip().endswith(<span class="string">'评论'</span>)]</span><br><span class="line">tags = <span class="string">','</span>.join(tag_list)</span><br><span class="line"><span class="comment">#注意使用列表生成式</span></span><br></pre></td></tr></table></figure></p><p><font color="red">CSS 选择器的应用：</font><br><strong>获取文章标题</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title</span> =  response.css(<span class="string">'.entry-header h1::text'</span>).extract()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p><strong>获取文章创建时间</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">create_date</span> = response.css(<span class="string">'p.entry-meta-hide-on-mobile::text'</span>).extract()[<span class="number">0</span>].strip().strip(<span class="string">' ·'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>获取文章赞数</strong><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">praise_nums =  int(<span class="name">response</span>.css('span.vote-post-up h10:<span class="symbol">:text</span>').extract()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p><strong>获取文章收藏数</strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fav_nums =  response.css(<span class="string">'span.bookmark-btn::text'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">match_re = re.match(<span class="string">r'.*?(\d+).*'</span>,fav_nums)</span><br><span class="line"><span class="keyword">if</span> match_re:</span><br><span class="line">    fav_nums = match_re.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><strong>获取文章评论数</strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">comment_nums =   response.css(<span class="string">'a[href="#article-comment"] span::text'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">match_re = re.match(<span class="string">r'.*?(\d+).*'</span>,comment_nums)</span><br><span class="line"><span class="keyword">if</span> match_re:</span><br><span class="line">    comment_nums = match_re.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><strong>获取文章内容</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">content</span> = response.css(<span class="string">'div.entry'</span>).extract()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p><strong>获取文章标签</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tag_list =  response.css(<span class="string">'p.entry-meta-hide-on-mobile a::text'</span>).extract()</span><br><span class="line">tag_list =  [<span class="keyword">element</span> <span class="keyword">for</span> <span class="keyword">element</span> <span class="keyword">in</span> tag_list <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">element</span>.strip().endswith(<span class="string">'评论'</span>)]</span><br><span class="line">tags = <span class="string">','</span>.join(tag_list)</span><br></pre></td></tr></table></figure></p><p>注意在使用 <strong>extract()[0]</strong>函数时注意若提取的列表为空，会报出异常<br>建议使用 <strong>extract_first()</strong>函数、列表为空时，返回 <strong>None</strong></p><p>注意CSS选择器中的【空格】</p><ul><li><p><strong>（.floated-thumb .post-thumb）表示：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">class</span> <span class="built_in">class</span>=<span class="string">"floated-thumb"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"post-thumb"</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="built_in">class</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>（.floated-thumb.post-thumb）表示：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"floated-thumb post-thumb"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy 基础知识（一）</title>
      <link href="/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017-12-12/Scrapy%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<font color="red">创建工程环境：</font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv<span class="selector-class">.bat</span> --python==<span class="string">"d:\Program Files\Python36\python.exe"</span> jobboleArticle</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><br><font color="red">安装 scrapy</font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ scrapy</span></span><br></pre></td></tr></table></figure><br><br><strong>出现错误：</strong><br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> <span class="string">"f:\virtualenv\jobbolearticle\lib\site-packages\pip\compat\__init__.py"</span>, <span class="literal">line</span> <span class="number">75</span>, <span class="keyword">in</span> console_to_str</span><br><span class="line">    <span class="keyword">return</span> s.decode(<span class="symbol">'utf_8</span>')</span><br><span class="line">UnicodeDecodeError: <span class="symbol">'utf</span>-<span class="number">8</span>' codec can<span class="symbol">'t</span> decode byte <span class="number">0</span>xb6 <span class="keyword">in</span> position <span class="number">30</span>: invalid start byte</span><br></pre></td></tr></table></figure><br><br>windows 修改 75 行的<code>&#39;utf_8&#39;</code>为<code>&#39;gbk&#39;</code><br><font color="red"></font>创建 scrapy 工程项目<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scrapy startproject ArticleSpider</span></span><br></pre></td></tr></table></figure><br><br><font color="red">创建爬取某个域名的Python模板文件</font><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ArticleSpider ==》cd ArticleSpider\</span><br><span class="line"><span class="selector-id">#scrapy</span> genspider example example<span class="selector-class">.com</span>  </span><br><span class="line">scrapy genspider jobbole blog<span class="selector-class">.jobbole</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><br><br><font color="red">工程文件设置：</font><br><code>F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider</code><br>不遵循ROBOTS协议：<strong>ROBOTSTXT_OBEY = False</strong><br><font color="red">CMD 测试环境：</font><br><strong>Windows安装pypiwin32</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ pypiwin3</span></span><br></pre></td></tr></table></figure><br><br><strong>启动爬虫</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy<span class="selector-class">.exe</span> crawl jobbole</span><br></pre></td></tr></table></figure><br><br><font color="red">Pycharm 调试环境</font><br><strong>创建调试文件：</strong> <code>F:\VirtualEnv\jobboleArticle\ArticleSpider\main.py</code><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line">__author__ = <span class="string">"東飛"</span></span><br><span class="line">__date__ = <span class="string">"2017-11-29"</span></span><br><span class="line">from scrapy.cmdline import  <span class="built_in">execute</span></span><br><span class="line">import  sys</span><br><span class="line">import  <span class="built_in">os</span></span><br><span class="line"># <span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__)))</span><br><span class="line">sys.<span class="built_in">path</span>.append(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(__file__)))</span><br><span class="line"><span class="built_in">execute</span>([<span class="string">"scrapy"</span>,<span class="string">"crawl"</span>,<span class="string">"jobbole"</span>])</span><br></pre></td></tr></table></figure><br><br><strong>设置断点：</strong><code>F:\VirtualEnv\jobboleArticle\ArticleSpider\ArticleSpider\spiders\jobbole.py</code><br><br><em>Eclipse 调试单步执行：F6、恢复程序：F8</em><br><br><font color="red">import 引入包问题</font><p>import 引入包时将目录标记<code>source root</code></p><p>在 <code>scrapy项目上右键</code>-》<code>make_directory as</code>–&gt;<code>sources root</code></p><p>避免cmd测试引入包出错、在<code>settings.py</code>中设置<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line">import sys</span><br><span class="line">BASE_DIR = <span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">os</span>.<span class="built_in">path</span>.abspath(<span class="built_in">os</span>.<span class="built_in">path</span>.dirname(__file__)))</span><br><span class="line"># <span class="built_in">print</span>(BASE_DIR)</span><br><span class="line">sys.<span class="built_in">path</span>.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="built_in">os</span>.<span class="built_in">path</span>.join(BASE_DIR, <span class="string">'ArticleSpider'</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python中Cookielib对于Cookies的处理</title>
      <link href="/2017-12-06/Python%20%E4%B8%ADCookielib%E5%AF%B9%E4%BA%8ECookies%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2017-12-06/Python%20%E4%B8%ADCookielib%E5%AF%B9%E4%BA%8ECookies%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>兼容性</strong><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> cookielib  <span class="comment"># 兼容Python2</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookielib  <span class="comment"># python 3 need import http.cookiejar</span></span><br></pre></td></tr></table></figure></p><p><strong>创建 <code>session</code></strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">session</span> = requests.session()</span><br></pre></td></tr></table></figure></p><p><strong>初始化创建<code>cookies</code>对象</strong><br><a id="more"></a><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.cookies = cookielib.LWPCookieJar(<span class="attribute">filename</span>=<span class="string">"cookies.txt"</span>)  </span><br><span class="line"><span class="comment"># LWP实例化的cookie可直接调用save方法</span></span><br></pre></td></tr></table></figure></p><p><strong>请求之前、装载<code>cookies</code></strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.cookies.load(<span class="attribute">ignore_discard</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p><strong><code>session</code>访问网址</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response = session.<span class="builtin-name">get</span>(<span class="string">"https://www.imooc.com"</span>, <span class="attribute">headers</span>=header)  </span><br><span class="line"><span class="comment"># more effective</span></span><br></pre></td></tr></table></figure></p><p><strong>登录成功后、将<code>cookies</code>写入到指定文件中</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session<span class="selector-class">.cookies</span><span class="selector-class">.save</span>()</span><br></pre></td></tr></table></figure></p><p><strong>对<code>cookies</code>载入成功的判断</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    session.cookies.load(<span class="attribute">ignore_discard</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"Cookie正常加载"</span>)</span><br><span class="line">except:</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"Cookie未能加载"</span>)</span><br></pre></td></tr></table></figure></p><p>注意参数：  </p><ul><li><strong>ignore_discard</strong>：甚至保存设置为丢弃的<code>cookie</code></li><li><strong>ignore_expires</strong>：甚至保存已经过期的<code>cookies</code></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Yii 安全性防范</title>
      <link href="/2017-11-30/Yii%20%E5%AE%89%E5%85%A8%E6%80%A7%E9%98%B2%E8%8C%83/"/>
      <url>/2017-11-30/Yii%20%E5%AE%89%E5%85%A8%E6%80%A7%E9%98%B2%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>XSS 是一种经常出现在web应用中的计算机安全漏洞、它允许恶意web用户将代码植入到提供给其他用户使用的页面中、从而对用户进行攻击。</p><font color="red">跨站脚本攻击（Cross Site Scripting）</font><p>用处：</p><ul><li>盗取用户账号</li><li>非法转账</li><li>篡改系统信息</li><li>网站挂马</li></ul><p>比如：在WordPress发布文章时加入一些JavaScript代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户界面弹出窗口：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"hello world"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">获取用户cookie：</span><br><span class="line">var cookie = document.cookie;</span><br><span class="line">window.location.href='http://127.0.0.1/index.php?cookie'+cookie;</span><br></pre></td></tr></table></figure></p><a id="more"></a><font color="red"></font>获取cookie的过程<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">浏览器控制台：document.cookie</span><br><span class="line">审查元素：<span class="attribute">Application</span>==》Storage==》Cookies、双击复制</span><br><span class="line">通过浏览器请求服务器，使用network监听通信，在Request Headers中获取</span><br></pre></td></tr></table></figure><br><br><font color="red">利用Cookie模拟用户登陆</font><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">寻找登陆cookie</span><br><span class="line">删除登录cookie后，用户退出</span><br><span class="line">添加登录cookie数据</span><br><span class="line">控制台输入：document.cookie = <span class="string">"wordpress_logged_in_bbfa5b726c6b7a9cf3cda9370be3ee91=root%7C1512193898%7CyBo1Ik1GgJMKojgI5ACjYDSNfkQDQUQy3ehwnJCH9Ak%7C446e21cdf30a58bddc3647ea2d9755058de7ae24f3c72041430b5dd81d254a98;"</span></span><br><span class="line">重新刷新浏览器，用户登入</span><br></pre></td></tr></table></figure><br><br><font color="red">HTTPonly</font><p>有些cookie数据是获取不到的、服务器对发送给浏览器的cookie进行一些处理、加入<code>httponly</code>、使得浏览器端不能通过JavaScript获取登录cookie。</p><font color="red">非法转账</font><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转账页面：https:<span class="regexp">//</span>shenghuo.alipay.com/send/payment/fill.htm?_tosheet=<span class="literal">true</span>&amp;_pdType=afcabecbafgggffdhjch</span><br><span class="line">设置收款人：<span class="built_in">document</span>.getElementById(<span class="string">'ipt-search-key'</span>).value=<span class="string">'2948545180@qq.com'</span></span><br><span class="line">设置付款金额：<span class="built_in">document</span>.getElementById(<span class="string">'amount'</span>).value=<span class="string">'100'</span></span><br><span class="line">设置付款说明：<span class="built_in">document</span>.getElementById(<span class="string">'reason'</span>).value=<span class="string">'劫富济贫'</span></span><br><span class="line">设置点击付款：<span class="built_in">document</span>.getElementsByClassName(<span class="string">"ui-button-text"</span>)[<span class="number">0</span>].click()</span><br></pre></td></tr></table></figure><br><br><font color="red">反射型Xss攻击、浏览器过滤</font><p>浏览器的控制台【console】要在设置中开启保留日志【Preserve log】</p><p><code>http://localhost/basic/web/index.php?r=article/post&amp;name=&lt;script&gt;alert(&quot;hello world&quot;)&lt;/script&gt;</code></p><p><code>http://localhost/basic/web/index.php?r=article/post&amp;name=&lt;h1&gt;www&lt;/h1&gt;</code></p><p>Chrome可以防止XSS攻击，Firefox不可以</p><p><strong>构建非法链接</strong></p><p><code>https://shenghuo.alipay.com/send/payment/fill.htm?_pdType=adbhajcaccgejhgdaeih&lt;script&gt;alert(3)&lt;/script&gt;</code></p><p>将非法链接隐含在博客或者论坛中</p><p><strong>转账代码反射</strong></p><p>元素审查中搜索url中<code>_pdType</code>的值<code>【adbhajcaccgejhgdaeih】</code></p><p><strong>代码越狱</strong></p><p>分析：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="actionscript">pageABsUrl = <span class="string">"..._pdType=adbhajcaccgejhgdaeih"</span>,alert(<span class="number">3</span>)<span class="comment">//"</span></span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果：<code>https://shenghuo.alipay.com/send/payment/fill.htm?_pdType=adbhajcaccgejhgdaeih&quot;,alert(3)//&quot;</code></p><font color="red">HTML实体编码</font><p><a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">HTML ISO-8859-1 参考手册</a></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;==》<span class="meta">&amp;lt;    &gt;==》&amp;gt;    "==》&amp;quot;</span></span><br><span class="line"><span class="meta">&amp;lt;div&amp;gt;Hello World&amp;lt;/div&amp;gt;</span></span><br><span class="line">&lt;div&gt;<span class="meta">&amp;quot;world&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><font color="red">URL编码</font><p>使用参数传递<code>&amp;quot;</code><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/test/<span class="built_in">demo</span>.php?<span class="built_in">key</span>=&amp;quot;</span><br><span class="line"></span><br><span class="line">URl传递了两个参数<span class="built_in">key</span>和quot、值均为空</span><br><span class="line">&amp; ==》<span class="number">26</span><span class="symbol">%</span></span><br><span class="line"></span><br><span class="line">http://localhost/test/<span class="built_in">demo</span>.php?<span class="built_in">key</span>=%26quot;</span><br></pre></td></tr></table></figure></p><font color="red">查看URL编码</font><ul><li><p>URL 编码表：<a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_urlencode.html</a></p></li><li><p>使用JavaScript函数escape()</p></li></ul><p>浏览器控制台：escape(“&amp;”)、结果：<code>https://shenghuo.alipay.com/send/payment/fill.htm?_pdType=adbhajcaccgejhgdaeih%26quot,alert(3)//&quot;</code></p><p><strong>“==》&amp;quot==》%26quot==》到达服务器==》&amp;quot==》%26quot【服务器有重新编码】</strong></p><font color="red">XSS反射性攻击场景</font><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="handlebars"><span class="xml">var a = "123<span class="php"><span class="meta">&lt;?</span>=$_GET[key];<span class="meta">?&gt;</span></span>";</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">http://localhost/test/demo.php?key=%26quot;;alert(3);//</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x"</span> <span class="attr">onerror</span>=<span class="string">'var a = "123&lt;?=$_GET[key];?&gt;";'</span>&gt;</span></span><br><span class="line">http://localhost/test/demo.php?key=%26quot;;alert(3);//</span><br></pre></td></tr></table></figure><br><br>浏览器可以对简单的JavaScript代码拦截，但对于JavaScript代码伪装编码之后、浏览器就无法识别了<br><br><font color="red">XSS蠕虫攻击</font><p><strong>JavaScript 对 URL 解码 unescape()</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    \YII::$app-&gt;response-&gt;headers-&gt;add(<span class="string">'X-XSS-Protection'</span>, <span class="string">'0'</span>);</span><br><span class="line">    $script = \YII::$app-&gt;request-&gt;get(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">echo</span> $script;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//localhost/basic/web/index.php?r=worm/test1&amp;script=&lt;script&gt;alert("hello world")&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><font color="red">XSS转码防范</font><p><code>vender/yiisoft/yii2/helpers/Html.php</code></p><p><code>vendor/yiisoft/yii2/helpers/BaseHtml.php</code></p><p><strong>htmlspecialchars()函数</strong></p><p><a href="https://www.w3cschool.cn/php/func-string-htmlspecialchars.html" target="_blank" rel="noopener">W3school PHP htmlspecialchars() 函数</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    \YII::$app-&gt;response-&gt;headers-&gt;add(<span class="string">'X-XSS-Protection'</span>, <span class="string">'0'</span>);</span><br><span class="line">    $script = \YII::$app-&gt;request-&gt;get(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">echo</span> \yii\helpers\Html::encode($script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">XSS过滤防范</font><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    \YII::$app-&gt;response-&gt;headers-&gt;add(<span class="string">'X-XSS-Protection'</span>, <span class="string">'0'</span>);</span><br><span class="line">    $script = \YII::$app-&gt;request-&gt;get(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">echo</span> \yii\helpers\HtmlPurifier::process($script);</span><br><span class="line">&#125;</span><br><span class="line">http:<span class="comment">//localhost/basic/web/index.php?r=worm/test2&amp;script=&lt;script&gt;alert("hello world")&lt;/script&gt;</span></span><br><span class="line">http:<span class="comment">//localhost/basic/web/index.php?r=worm/test1&amp;script=aaaa&lt;script&gt;alert("hello world")&lt;/script&gt;bbbb</span></span><br></pre></td></tr></table></figure><font color="red">CSRF攻击</font><p>CSRF（Cross-site request forgery）跨站请求伪造、是一种对网站的恶意利用。</p><p>攻击防范：</p><ul><li>验证码 </li><li>HTTP请求中的Referer </li><li>服务器添加防伪标志</li></ul><p><strong>在表单与cookie均存放_csrf、cookie中存放的_csrf是加密过的</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (\YII::$app-&gt;request-&gt;isPost) &#123;</span><br><span class="line">        <span class="keyword">echo</span> \YII::$app-&gt;request-&gt;post(<span class="string">'title'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $csrfToken = \YII::$app-&gt;request-&gt;csrfToken;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;renderPartial(<span class="string">'test1'</span>,[<span class="string">'csrfToken'</span>=&gt;$csrfToken]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"title"</span> value=<span class="string">"Hello world"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_csrf"</span> value=<span class="string">"&lt;?=$csrfToken;?&gt;"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><font color="red">SQL注入</font><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'zhangsan'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'123456'</span></span><br><span class="line">用户名：</span><br><span class="line">zhangsan<span class="string">' --</span></span><br><span class="line"><span class="string">'</span>;<span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">users</span>; <span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> articles <span class="keyword">where</span> score&lt;<span class="number">60</span> <span class="keyword">and</span> title <span class="keyword">like</span> <span class="string">'%youyiku%'</span></span><br><span class="line"><span class="string">' or 1=1 -- 或者 '</span> || <span class="number">1</span>=<span class="number">1</span> <span class="comment">-- </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> articles <span class="keyword">where</span> score&lt;<span class="number">60</span> <span class="keyword">and</span> title <span class="keyword">like</span> <span class="string">'%'</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span> <span class="comment">-- %'</span></span><br></pre></td></tr></table></figure><p><a href="http://www.w3school.com.cn/php/func_string_addslashes.asp" target="_blank" rel="noopener">addslashes()函数</a>：对字符进行转义、在预定义字符之前添加反斜杠的字符串。</p><p><a href="http://www.w3school.com.cn/php/func_string_chr.asp" target="_blank" rel="noopener">PHP chr() 函数</a>：从指定的 ASCII 值返回字符。</p><p><a href="http://www.w3school.com.cn/tags/html_ref_ascii.asp" target="_blank" rel="noopener">HTML ASCII 参考手册</a></p><p><a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">HTML ISO-8859-1 参考手册</a></p><p>示例代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">header(<span class="string">'Content-type:text/html;charset=gbk'</span>);</span></span><br><span class="line"><span class="php"><span class="comment">// echo chr(33);die();</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">// $key = "' || 1=1 -- ";</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$key =chr(<span class="number">0xdf</span>).<span class="string">"' || 1=1 -- "</span>; <span class="comment">//?' || 1=1 --</span></span></span><br><span class="line"><span class="php"><span class="comment">//?' ==&gt; df27</span></span></span><br><span class="line"><span class="php">$key = addslashes($key);<span class="comment">//? \' || 1=1 -- </span></span></span><br><span class="line"><span class="php"><span class="comment">//?\' ==&gt; df5c27  在utf-8中编码</span></span></span><br><span class="line"><span class="php"><span class="comment">// df5c在gbk编码中作为一个汉字  運' || 1=1 --</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $key;</span></span><br><span class="line"><span class="php">$sql = <span class="string">"select * from articles where score&lt;60 and title like '%"</span>.$key.<span class="string">"%'"</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><font color="red">PDO</font> <p>PDO 一是PHP数据对象（PHP Data Object）的缩写、解决不同数据库之间的交互</p><p><strong>config/db.php配置：’emulatePrepare’ =&gt; false</strong></p><p><strong>执行sql语句使，PHP传送两部分数据至mysql</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionTest1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $user = (<span class="keyword">new</span> \yii\db\Query())</span><br><span class="line">            -&gt;select(<span class="string">'*'</span>)</span><br><span class="line">            -&gt;from(<span class="string">'users'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'name=:name'</span>,[<span class="string">':name'</span>=&gt;<span class="string">'zhangsan'</span>])</span><br><span class="line">            -&gt;one();</span><br><span class="line"></span><br><span class="line">    print_r($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="red">文件上传漏洞之类型校验</font><ul><li><p>表单提交时，浏览器会对提交的数据编码</p></li><li><p>表单添加属性：enctype=”multipart/form-data”</p></li><li><p>fidder 数据拦截与修改</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_POST) &#123;</span></span><br><span class="line"><span class="php">        $ext = pathinfo($_FILES[<span class="string">'photo'</span>][<span class="string">'name'</span>],PATHINFO_EXTENSION);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (in_array($ext,[<span class="string">'png'</span>,<span class="string">'jpg'</span>,<span class="string">'gif'</span>])) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"类型检测成功"</span>;</span></span><br><span class="line"><span class="php">            move_uploaded_file($_FILES[<span class="string">'photo'</span>],[<span class="string">'tmp_name'</span>],<span class="string">'./'</span>.$_FILES[<span class="string">'photo'</span>][<span class="string">'name'</span>]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"hello world##"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> Yii 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Yii 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Yii 提升程序运行效率</title>
      <link href="/2017-11-28/Yii%20%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87/"/>
      <url>/2017-11-28/Yii%20%E6%8F%90%E5%8D%87%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87/</url>
      <content type="html"><![CDATA[<p><strong>官方文档：<a href="http://www.yiichina.com/doc/guide/2.0" target="_blank" rel="noopener">Yii Framework 2.0 权威指南</a></strong></p><p>Yii 配置中设置 mysql 端口号 、参见：<a href="http://blog.ouoshop.com/archives/306" target="_blank" rel="noopener">http://blog.ouoshop.com/archives/306</a></p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'connectionString'</span> =&gt; <span class="symbol">'mysql</span>:host=localhost;port=<span class="number">13306</span>;dbname=yii',</span><br></pre></td></tr></table></figure><font color="red">类的延迟加载</font><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">设置加载函数</span><br><span class="line">function my_loader($class)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">'class/'</span>.$class.<span class="string">'.php'</span>;</span><br><span class="line">    /<span class="regexp">/ require 'class/class</span>1.php<span class="string">';</span></span><br><span class="line"><span class="string">    // require '</span><span class="class"><span class="keyword">class</span>/<span class="title">class2</span>.<span class="title">php</span>';</span></span><br><span class="line">&#125;</span><br><span class="line">注册加载函数</span><br><span class="line">spl_autoload_register(<span class="string">'my_loader'</span>);</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><br><br><font color="red">类的映射表 <code>class map</code></font><br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::<span class="formula">$classMap['app<span class="tag">\<span class="name">models</span></span><span class="tag">\<span class="name">Customer</span></span>']='D:<span class="tag">\<span class="name">wamp</span></span>64<span class="tag">\<span class="name">www</span></span><span class="tag">\<span class="name">basic</span></span><span class="tag">\<span class="name">models</span></span><span class="tag">\<span class="name">Customer</span></span>.php'</span></span><br></pre></td></tr></table></figure><br><br><font color="red">组件的延迟加载 </font><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认使用__get()加载</span><br><span class="line"><span class="variable">$session</span> = \<span class="symbol">Yii:</span><span class="symbol">:</span><span class="variable">$app</span>-&gt;session;</span><br></pre></td></tr></table></figure><br><br><font color="red">数据缓存之增删改查</font><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 获取缓存组件</span><br><span class="line">$<span class="keyword">cache</span> = \Yii::$app-&gt;<span class="keyword">cache</span>;</span><br><span class="line"></span><br><span class="line">// 向缓存中写数据</span><br><span class="line">$<span class="keyword">cache</span>-&gt;<span class="keyword">add</span>(<span class="string">'key1'</span>,<span class="string">'Hello World'</span>);</span><br><span class="line">$<span class="keyword">cache</span>-&gt;<span class="keyword">add</span>(<span class="string">'key1'</span>,<span class="string">'Hello World2'</span>);//先判断、无则添加、有则不变</span><br><span class="line">// $<span class="keyword">cache</span>-&gt;<span class="keyword">add</span>(<span class="string">'key2'</span>,<span class="string">'Hello World2'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 修改数据</span><br><span class="line">// $<span class="keyword">cache</span>-&gt;<span class="keyword">set</span>(<span class="string">'key1'</span>,<span class="string">'Hello Yii'</span>);</span><br><span class="line"></span><br><span class="line">// 删除数据</span><br><span class="line">// $<span class="keyword">cache</span>-&gt;<span class="keyword">delete</span>(<span class="string">'key1'</span>);</span><br><span class="line"></span><br><span class="line">// 亲空数据</span><br><span class="line">// $<span class="keyword">cache</span>-&gt;<span class="keyword">flush</span>();</span><br><span class="line"></span><br><span class="line">// 读取缓冲中的数据</span><br><span class="line">$data = $<span class="keyword">cache</span>-&gt;<span class="keyword">get</span>(<span class="string">'key1'</span>);</span><br><span class="line">var_dump($data) ;</span><br></pre></td></tr></table></figure><br><br><font color="red">缓存数据有效期设置</font><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">cache</span>-&gt;<span class="keyword">add</span>(<span class="string">'key1'</span>,<span class="string">'Hello World'</span>,<span class="number">15</span>);  //有效期15s</span><br><span class="line">$<span class="keyword">cache</span>-&gt;<span class="keyword">set</span>(<span class="string">'key1'</span>,<span class="string">'Hello World'</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><font color="red">数据缓存中依赖关系</font><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">文件依赖</span><br><span class="line">$dependency = <span class="keyword">new</span> \yii\caching\FileDependency([<span class="string">'fileName'</span>=&gt;<span class="string">'hc.txt'</span>]);</span><br><span class="line">$cache-&gt;add(<span class="string">'file_key'</span>,<span class="string">'Hello World'</span>,<span class="number">3000</span>,$dependency);</span><br><span class="line">var_dump($cache-&gt;get(<span class="string">'file_key'</span>));</span><br><span class="line"></span><br><span class="line">表达式的依赖</span><br><span class="line">$dependency = <span class="keyword">new</span> \yii\caching\ExpressionDependency(</span><br><span class="line">    [<span class="string">'expression'</span>=&gt;<span class="string">'Yii::$app-&gt;request-&gt;get("name")'</span>]</span><br><span class="line">);</span><br><span class="line">$cache-&gt;add(<span class="string">'expression_key'</span>,<span class="string">'Hello World'</span>,<span class="number">3000</span>,$dependency);</span><br><span class="line">var_dump($cache-&gt;get(<span class="string">'expression_key'</span>));</span><br><span class="line"></span><br><span class="line">Db依赖</span><br><span class="line">$dependency = <span class="keyword">new</span> \yii\caching\DbDependency(</span><br><span class="line">    [<span class="string">'sql'</span>=&gt;<span class="string">'select count(*) from yii.Customer_order'</span>]</span><br><span class="line">);</span><br><span class="line">$cache-&gt;add(<span class="string">'db_key'</span>,<span class="string">'Hello World'</span>,<span class="number">3000</span>,$dependency);</span><br><span class="line">var_dump($cache-&gt;get(<span class="string">'db_key'</span>));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> Yii 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Yii 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 正则表达式 re 模块</title>
      <link href="/2017-11-27/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%20re%20%E6%A8%A1%E5%9D%97/"/>
      <url>/2017-11-27/Python%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%20re%20%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它匹配了，否则，该字符串就是不合法的。</p><p>适用于 <code>Python</code> 或 <code>Perl</code> 等编程语言的部分元字符以及说明：<br><img src="http://oy89aex8x.bkt.clouddn.com/re.png" alt="re.png"><br><a id="more"></a><br>实例1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d&#123;<span class="number">3</span>&#125;s+d&#123;<span class="number">3</span>,<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">d&#123;<span class="number">3</span>&#125; 表示匹配<span class="number">3</span>个数字 例如<span class="number">010</span></span><br><span class="line"></span><br><span class="line">s 匹配一个空格或tab，s+表示至少有一个空格 例如 '  '</span><br><span class="line"></span><br><span class="line">d&#123;<span class="number">3</span>，<span class="number">8</span>&#125; 表示<span class="number">3</span><span class="number">-8</span>个数字，例如 <span class="number">1234567</span></span><br></pre></td></tr></table></figure></p><p>实例2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0574</span><span class="number">-65972291</span></span><br><span class="line"></span><br><span class="line">d&#123;<span class="number">4</span>&#125;-d&#123;<span class="number">4</span>,<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure></p><font color="red"><strong>re 模块</strong></font><p>在 Python 中，我们可以使用内置的 re 模块来使用正则表达式。</p><p>有一点需要特别注意的是，正则表达式使用 <code>\</code>对特殊字符进行转义，比如，为了匹配字符串 <code>python.org</code>，我们需要使用正则表达式 <code>&#39;python\.org&#39;</code>，而 Python 的字符串本身也用 <code>\</code> 转义，所以上面的正则表达式在 Python 中应该写成 <code>&#39;python\\.org&#39;</code>，这会很容易陷入<code>\</code> 的困扰中，因此，我们建议使用 Python 的原始字符串，只需加一个<code>r</code>前缀，上面的正则表达式可以写成：<strong><code>r&#39;python\.org&#39;</code></strong></p><p>re 模块提供了不少有用的函数，用以匹配字符串，比如：</p><ul><li><p>compile 函数</p></li><li><p>match 函数</p></li><li><p>search 函数</p></li><li><p>findall 函数</p></li><li><p>finditer 函数</p></li><li><p>split 函数</p></li><li><p>sub 函数</p></li><li><p>subn 函数</p></li></ul><p>re 模块的一般使用步骤如下：</p><ul><li><p>使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象</p></li><li><p>通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）</p></li><li><p>最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作</p></li></ul><font color="red">compile 函数</font><p>compile 函数用于编译正则表达式，生成一个 Pattern 对象，它的一般使用形式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">re</span><span class="selector-class">.compile</span>(<span class="selector-tag">pattern</span><span class="selector-attr">[, flag]</span>)</span><br></pre></td></tr></table></figure><p>其中，pattern 是一个字符串形式的正则表达式，flag 是一个可选参数，表示匹配模式，比如忽略大小写，多行模式等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 将正则表达式编译成 Pattern 对象 </span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br></pre></td></tr></table></figure></p><p>在上面，我们已将一个正则表达式编译成 Pattern 对象，接下来，我们就可以利用 pattern 的一系列方法对文本进行匹配查找了。</p><font color="red">match 方法</font><p>match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。它的一般使用形式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">match</span><span class="params">(string[, pos[, endpos]])</span></span></span><br></pre></td></tr></table></figure><p>其中，<code>string</code> 是待匹配的字符串，<code>pos</code> 和<code>endpos</code>是可选参数，指定字符串的起始和终点位置，默认值分别是 <code>0</code> 和 <code>len</code>(字符串长度)。因此，当你不指定<code>pos</code> 和 <code>endpos</code> 时，<code>match</code> 方法默认匹配字符串的头部。</p><p>当匹配成功时，返回一个 <code>Match</code> 对象，如果没有匹配上，则返回 <code>None</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'\d+'</span>)                    <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>)        <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从'e'的位置开始匹配，没有匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从'1'的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> m                                         <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>在上面，当匹配成功时返回一个 Match 对象，其中：</p><p><strong>group([group1, …])</strong> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code>或 <code>group(0)</code>；</p><p><strong>start([group])</strong>方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</p><p><strong>end([group])</strong> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</p><p><strong>span([group])</strong> 方法返回 (start(group), end(group))。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import re</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; pattern = re.compile(r<span class="string">'([a-z]+) ([a-z]+)'</span>, re.I)   <span class="comment"># re.I 表示忽略大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = pattern.match(<span class="string">'Hello World Wide Web'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print m                               <span class="comment"># 匹配成功，返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10bea83e8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.group(<span class="number">0</span>)                            <span class="comment"># 返回匹配成功的整个子串</span></span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.span(<span class="number">0</span>)                             <span class="comment"># 返回匹配成功的整个子串的索引</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.group(<span class="number">1</span>)                            <span class="comment"># 返回第一个分组匹配成功的子串</span></span><br><span class="line"><span class="string">'Hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.span(<span class="number">1</span>)                             <span class="comment"># 返回第一个分组匹配成功的子串的索引</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.group(<span class="number">2</span>)                            <span class="comment"># 返回第二个分组匹配成功的子串</span></span><br><span class="line"><span class="string">'World'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.span(<span class="number">2</span>)                             <span class="comment"># 返回第二个分组匹配成功的子串</span></span><br><span class="line">(<span class="number">6</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.groups()                            <span class="comment"># 等价于 (m.group(1), m.group(2), ...)</span></span><br><span class="line">(<span class="string">'Hello'</span>, <span class="string">'World'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.group(<span class="number">3</span>)                            <span class="comment"># 不存在第三个分组</span></span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">IndexError:</span> no such group</span><br></pre></td></tr></table></figure><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m1 = re.match(<span class="string">r'\d+'</span>, <span class="string">'One12twothree34four'</span>)</span><br><span class="line"><span class="keyword">if</span> m1:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string:'</span>,m1.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'m1 is:'</span>,m1</span><br><span class="line">    </span><br><span class="line">m2 = re.match(<span class="string">r'\d+'</span>, <span class="string">'12twothree34four'</span>)</span><br><span class="line"><span class="keyword">if</span> m2:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string:'</span>, m2.group()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'m2 is:'</span>,m2</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">m1 <span class="keyword">is</span>: <span class="keyword">None</span></span><br><span class="line">matching string: <span class="number">12</span></span><br></pre></td></tr></table></figure></p><font color="red">search 方法</font><p>search 方法用于查找字符串的任何位置，它也是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果，它的一般使用形式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">search</span><span class="params">(string[, pos[, endpos]])</span></span></span><br></pre></td></tr></table></figure><p>其中，<code>string</code> 是待匹配的字符串，<code>pos</code> 和 <code>endpos</code> 是可选参数，指定字符串的起始和终点位置，默认值分别是 <code>0</code> 和<code>len</code>(字符串长度)。</p><p>当匹配成功时，返回一个<code>Match</code> 对象，如果没有匹配上，则返回<code>None</code>。<br>示例一：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import re</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; pattern = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = pattern.search(<span class="string">'one12twothree34four'</span>)  <span class="comment"># 这里如果使用 match 方法则不匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10cc03ac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.group()</span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m = pattern.search(<span class="string">'one12twothree34four'</span>, <span class="number">10</span>, <span class="number">30</span>)  <span class="comment"># 指定字符串区间</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10cc03b28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.group()</span><br><span class="line"><span class="string">'34'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; m.span()</span><br><span class="line">(<span class="number">13</span>, <span class="number">15</span>)</span><br></pre></td></tr></table></figure></p><p>示例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将正则表达式编译成 Pattern 对象</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 search() 查找匹配的子串，不存在匹配的子串时将返回 None </span></span><br><span class="line"><span class="comment"># 这里使用 match() 无法成功匹配 </span></span><br><span class="line">m = pattern.search(<span class="string">'hello 123456 789'</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> m: </span><br><span class="line">    <span class="comment"># 使用 Match 获得分组信息 </span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string:'</span>,m.group()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'position:'</span>,m.span()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">matching string: <span class="number">123456</span></span><br><span class="line">position: (<span class="number">6</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><font color="red">findall 方法</font><p>上面的 match 和 search 方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。</p><p>findall 方法的使用形式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">findall</span><span class="params">(string[, pos[, endpos]])</span></span></span><br></pre></td></tr></table></figure><p>其中，<code>string</code> 是待匹配的字符串，<code>pos</code> 和 <code>endpos</code>是可选参数，指定字符串的起始和终点位置，默认值分别是 <code>0</code> 和 <code>len</code> (字符串长度)。</p><p><code>findall</code> 以列表形式返回全部能匹配的子串，如果没有匹配，则返回一个空列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">'hello 123456 789'</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">'one1two2three3four4'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> result1</span><br><span class="line"><span class="keyword">print</span> result2</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">[<span class="string">'123456'</span>, <span class="string">'789'</span>]</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure><font color="red">finditer 方法</font><p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line">result_iter1 = pattern.finditer(<span class="string">'hello 123456 789'</span>)</span><br><span class="line">result_iter2 = pattern.finditer(<span class="string">'one1two2three3four4'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> type(result_iter1)</span><br><span class="line"><span class="keyword">print</span> type(result_iter2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'result1...'</span></span><br><span class="line"><span class="keyword">for</span> m1 <span class="keyword">in</span> result_iter1:   <span class="comment"># m1 是 Match 对象</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string: &#123;&#125;, position: &#123;&#125;'</span>.format(m1.group(), m1.span())</span><br><span class="line"><span class="keyword">print</span> <span class="string">'result2...'</span></span><br><span class="line"><span class="keyword">for</span> m2 <span class="keyword">in</span> result_iter2:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'matching string: &#123;&#125;, position: &#123;&#125;'</span>.format(m2.group(), m2.span())</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">&lt;type <span class="string">'callable-iterator'</span>&gt;</span><br><span class="line">&lt;type <span class="string">'callable-iterator'</span>&gt;</span><br><span class="line">result1...</span><br><span class="line">matching string: <span class="number">123456</span>, position: (<span class="number">6</span>, <span class="number">12</span>)</span><br><span class="line">matching string: <span class="number">789</span>, position: (<span class="number">13</span>, <span class="number">16</span>)</span><br><span class="line">result2...</span><br><span class="line">matching string: <span class="number">1</span>, position: (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">matching string: <span class="number">2</span>, position: (<span class="number">7</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'\d+'</span>, <span class="string">'hello 12345 789'</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">[<span class="string">'12345'</span>, <span class="string">'789'</span>]</span><br></pre></td></tr></table></figure></p><font color="red">split 方法</font><p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">split</span><span class="params">(string[, maxsplit])</span></span></span><br></pre></td></tr></table></figure><p>其中，<code>maxsplit</code> 用于指定最大分割次数，不指定将全部分割。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">p = re.compile(<span class="string">r'[\s\,\;]+'</span>)</span><br><span class="line"><span class="keyword">print</span> p.split(<span class="string">'a,b;; c   d'</span>)</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure></p><font color="red">sub 方法</font><p>sub 方法用于替换。它的使用形式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sub</span><span class="params">(repl, string[, count])</span></span></span><br></pre></td></tr></table></figure><p>其中，<code>repl</code> 可以是字符串也可以是一个函数：</p><p>如果 <code>repl</code> 是字符串，则会使用 <code>repl</code> 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，<code>repl</code> 还可以使用 \id 的形式来引用分组，但不能使用编号 0；</p><p>如果 <code>repl</code> 是函数，这个方法应当只接受一个参数（<code>Match</code>对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br><code>count</code> 用于指定最多替换次数，不指定时全部替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'hello 123, hello 456'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span> + <span class="string">' '</span> + m.group(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> p.sub(<span class="string">r'hello world'</span>, s)  <span class="comment"># 使用 'hello world' 替换 'hello 123' 和 'hello 456'</span></span><br><span class="line"><span class="keyword">print</span> p.sub(<span class="string">r'\2 \1'</span>, s)        <span class="comment"># 引用分组</span></span><br><span class="line"><span class="keyword">print</span> p.sub(func, s)</span><br><span class="line"><span class="keyword">print</span> p.sub(func, s, <span class="number">1</span>)         <span class="comment"># 最多替换一次</span></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">hello world, hello world</span><br><span class="line"><span class="number">123</span> hello, <span class="number">456</span> hello</span><br><span class="line">hi <span class="number">123</span>, hi <span class="number">456</span></span><br><span class="line">hi <span class="number">123</span>, hello <span class="number">456</span></span><br></pre></td></tr></table></figure><font color="red">subn 方法</font><p>subn 方法跟 sub 方法的行为类似，也用于替换。它的使用形式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">subn</span><span class="params">(repl, string[, count])</span></span></span><br></pre></td></tr></table></figure><p>它返回一个元组：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">sub</span>(<span class="name">repl</span>, string[, count]), 替换次数)</span><br></pre></td></tr></table></figure><p>元组有两个元素，第一个元素是使用<code>sub</code>方法的结果，第二个元素返回原字符串被替换的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'hello 123, hello 456'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span> + <span class="string">' '</span> + m.group(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> p.subn(<span class="string">r'hello world'</span>, s)</span><br><span class="line"><span class="keyword">print</span> p.subn(<span class="string">r'\2 \1'</span>, s)</span><br><span class="line"><span class="keyword">print</span> p.subn(func, s)</span><br><span class="line"><span class="keyword">print</span> p.subn(func, s, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">(<span class="string">'hello world, hello world'</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">'123 hello, 456 hello'</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">'hi 123, hi 456'</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">'hi 123, hello 456'</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>使用 re 模块有两种方式：</p><ul><li><p>使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找；</p></li><li><p>直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找；</p></li></ul><p>示例一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 将正则表达式先编译成 Pattern 对象</span></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.match(<span class="string">'123, 123'</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.search(<span class="string">'234, 234'</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.findall(<span class="string">'345, 345'</span>)</span><br></pre></td></tr></table></figure></p><p>示例二：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">print</span> re.match(<span class="string">r'\d+'</span>, <span class="string">'123, 123'</span>)</span><br><span class="line"><span class="keyword">print</span> re.search(<span class="string">r'\d+'</span>, <span class="string">'234, 234'</span>)</span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'\d+'</span>, <span class="string">'345, 345'</span>)</span><br></pre></td></tr></table></figure></p><p>如果一个正则表达式需要用到多次（比如上面的 <code>\d+</code>），在多种场合经常需要被用到，出于效率的考虑，我们应该预先编译该正则表达式，生成一个 <code>Pattern</code>对象，再使用该对象的一系列方法对需要匹配的文件进行匹配；而如果直接使用 <code>re.match, re.search</code>等函数，每次传入一个正则表达式，它都会被编译一次，效率就会大打折扣。推荐使用示例一用法。</p><font color="red">匹配中文</font><p>在某些情况下，我们想匹配文本中的汉字，有一点需要注意的是，中文的 <code>unicode</code> 编码范围 主要在<code>[\u4e00-\u9fa5]</code>，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的。</p><p>假设现在想把字符串<code>title = u&#39;你好，hello，世界&#39;</code> 中的中文提取出来，可以这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">title = <span class="string">u'你好，hello，世界'</span></span><br><span class="line">pattern = re.compile(<span class="string">ur'[\u4e00-\u9fa5]+'</span>)</span><br><span class="line">result = pattern.findall(title)</span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><p>注意到，我们在正则表达式前面加上了两个前缀 <code>ur</code>，其中<code>r</code> 表示使用原始字符串，<code>u</code>表示是 <code>unicode</code>字符串。</p><p>执行结果:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">u'\u4f60\u597d'</span>, <span class="string">u'\u4e16\u754c'</span>]</span><br></pre></td></tr></table></figure></p><font color="red">贪婪匹配</font><p>在 Python 中，正则匹配默认是贪婪匹配（在少数语言中可能是非贪婪），也就是匹配尽可能多的字符。</p><p>比如，我们想找出字符串中的所有 div 块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">'aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc'</span></span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;div&gt;.*&lt;/div&gt;'</span>)</span><br><span class="line">result = pattern.findall(content)</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line">执行结果：</span><br><span class="line">[<span class="string">'&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;'</span>]</span><br></pre></td></tr></table></figure></p><p>由于正则匹配是贪婪匹配，也就是尽可能多的匹配，因此，在成功匹配到第一个 <code>&lt;/div&gt;</code> 时，它还会向右尝试匹配，查看是否还有更长的可以成功匹配的子串。</p><p>如果我们想非贪婪匹配，可以加一个 <code>?</code>，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">'aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc'</span></span><br><span class="line">pattern = re.compile(<span class="string">r'&lt;div&gt;.*?&lt;/div&gt;'</span>)    <span class="comment"># 加上 ?</span></span><br><span class="line">result = pattern.findall(content)</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[<span class="string">'&lt;div&gt;test1&lt;/div&gt;'</span>, <span class="string">'&lt;div&gt;test2&lt;/div&gt;'</span>]</span><br></pre></td></tr></table></figure></p><p>小结</p><p>re 模块的一般使用步骤如下：</p><ul><li><p>使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象；</p></li><li><p>通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）；</p></li><li><p>最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作；</p></li><li><p>Python 的正则匹配默认是贪婪匹配。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 中的echo、print、print_r() 和var_dump()</title>
      <link href="/2017-11-27/PHP%20%E4%B8%AD%E7%9A%84echo%E3%80%81print%E3%80%81print_r()%E5%92%8Cvar_dump()/"/>
      <url>/2017-11-27/PHP%20%E4%B8%AD%E7%9A%84echo%E3%80%81print%E3%80%81print_r()%E5%92%8Cvar_dump()/</url>
      <content type="html"><![CDATA[<font color="red"> echo  &nbsp;与  &nbsp; print </font><p><code>echo</code> 和 <code>print</code> 都不是函数，而是语言结构，所以圆括号都不是必需的。两者十分相似，功能几乎是完全一样。</p><p>1、<code>echo</code> 可以输出多个字符串，使用 <strong>,</strong> 连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>;</span><br><span class="line">输出：abc</span><br><span class="line"></span><br><span class="line">如果你非要加上圆括号，需要注意</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);      <span class="comment">//错误</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="string">'a'</span>),(<span class="string">'b'</span>),(<span class="string">'c'</span>);  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>2、<code>print</code> 只能输出一个字符串</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>;  <span class="comment">//错误</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'abc'</span>;        <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'a'</span>.<span class="string">'b'</span>.<span class="string">'c'</span>;  <span class="comment">//正确</span></span><br><span class="line">注意：上面的 <span class="string">'a'</span>.<span class="string">'b'</span>.<span class="string">'c'</span> 并不是多个字符串，而是 PHP 中拼接（<span class="built_in">concat</span>）多个字符串后的一个字符串。</span><br></pre></td></tr></table></figure><p>3、<code>echo</code> 没有返回值，<code>print</code> 有返回值 1</p><p>因此<code>print</code>能用在表达式中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ret</span> = <span class="built_in">print</span> <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ret</span> + 1;</span><br><span class="line">输出：abc2</span><br></pre></td></tr></table></figure><p>4、<code>echo</code> 输出的速度比 <code>print</code> 快</p><font color="red"> print_r()  &nbsp;与  &nbsp;var_dump()</font><p><code>print_r()</code> 显示关于一个变量的易于理解的信息。如果给出的是 <code>string</code>、<code>integer</code> 或 <code>float</code>，将打印变量值本身。如果给出的是 <code>array</code>，将会按照一定格式显示键和元素。<code>object</code> 与数组类似。</p><p><code>print_r()</code>会舍弃掉小数位末尾的 <strong>0</strong>；布尔值 <code>true</code> 输出 <strong>1</strong>，<code>false</code> 不输出；空字符串 和 <code>null</code> 不输出。如果给出的是 <code>array</code>，将会按照一定格式显示键和元素。<code>object</code> 与数组类似。</p><p><code>var_dump()</code>方法是判断一个变量的类型与长度，并输出变量的值和数据类型。<code>var_dump()</code> 输出比 <code>print_r()</code>更详细，一般调试时用得多。两者区别如下：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="number">5</span>, <span class="number">5.0</span>, <span class="string">'hello'</span>, <span class="string">''</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">var_dump($arr);</span><br><span class="line">print_r($arr);</span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">7</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">5</span>)</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">float</span>(<span class="number">5</span>)</span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  string(<span class="number">5</span>) <span class="string">"hello"</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  string(<span class="number">0</span>) <span class="string">""</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="keyword">true</span>)</span><br><span class="line">  [<span class="number">5</span>]=&gt;</span><br><span class="line">  <span class="keyword">bool</span>(<span class="keyword">false</span>)</span><br><span class="line">  [<span class="number">6</span>]=&gt;</span><br><span class="line">  <span class="keyword">NULL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">5</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">5</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; hello</span><br><span class="line">    [<span class="number">3</span>] =&gt; </span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; </span><br><span class="line">    [<span class="number">6</span>] =&gt; </span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>题外：如果想捕捉 <code>print_r()</code> 的输出，可添加一个 <code>true</code> 参数。此时 <code>print_r()</code> 将不打印结果，而是返回其输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">"hello"</span>;</span><br><span class="line"><span class="variable">$result</span> = print_r(<span class="variable">$str</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span>;</span><br><span class="line">输出：hello</span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><a href="https://github.com/onestark/blog/issues/6" target="_blank" rel="noopener">PHP：echo、print、print_r() 和 var_dump() </a></li><li><a href="http://www.jb51.net/article/38858.htm" target="_blank" rel="noopener">php输出echo、print、print_r、printf、sprintf、var_dump的区别比较</a></li><li><a href="https://zerlong.com/494.html" target="_blank" rel="noopener">PHP中echo print() print_r() var_dump()的区别</a></li></ul>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 中的短标签与长标签</title>
      <link href="/2017-11-27/PHP%20%E4%B8%AD%E7%9A%84%E7%9F%AD%E6%A0%87%E7%AD%BE%E4%B8%8E%E9%95%BF%E6%A0%87%E7%AD%BE/"/>
      <url>/2017-11-27/PHP%20%E4%B8%AD%E7%9A%84%E7%9F%AD%E6%A0%87%E7%AD%BE%E4%B8%8E%E9%95%BF%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p><code>&lt;?= ?&gt;</code> 与 <code>&lt;?php ?&gt;</code>的区别</p><p><strong>&lt;? ?&gt;</strong>   是短标签<br><strong>&lt;?php ?&gt;</strong>是长标签<br>在php的配置文件（<code>php.ini</code>）中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code></p><p>同时，只有开启这个才可以使用 <code>&lt;?=</code>以代替<code>&lt;? echo</code>。</p><p>但是这个短标签是不推荐的，使用<code>&lt;?php ?&gt;</code>才是规范的方法。只是因为这种短标签使用的时间比较长，这种特性才被保存了下来。</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub中有意思的项目</title>
      <link href="/2017-11-25/GitHub%E4%B8%AD%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2017-11-25/GitHub%E4%B8%AD%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<font color="red"><strong>The Fuck</strong></font><p>Github: <a href="https://github.com/nvbn/thefuck" target="_blank" rel="noopener">https://github.com/nvbn/thefuck</a></p><p><img src="https://raw.githubusercontent.com/nvbn/thefuck/master/example.gif" alt=""></p><a id="more"></a><p>当你输入的命令有错误后，直接输入fuck就可以自动执行修复后的命令。</p><p>安装使用：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">安装需求：<span class="keyword">python</span> (<span class="number">2.7</span>+ <span class="built_in">or</span> <span class="number">3.3</span>+) 、pip、<span class="keyword">python</span>-dev</span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python3</span>-dev <span class="keyword">python3</span>-pip</span><br><span class="line"></span><br><span class="line">安装方法：</span><br><span class="line">sudo pip3 install thefuck</span><br><span class="line"></span><br><span class="line">安装后配置：</span><br><span class="line"><span class="keyword">vim</span> ~/.bashrc</span><br><span class="line">添加下面一行：</span><br><span class="line">alias fuck=<span class="string">'eval $(thefuck $(fc -ln -1)); history -r'</span></span><br><span class="line">配置生效：</span><br><span class="line"><span class="keyword">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><font color="red"><strong>ASCII Camera</strong></font><p>Github: <a href="https://github.com/idevelop/ascii-camera" target="_blank" rel="noopener">https://github.com/idevelop/ascii-camera</a></p><p><img src="https://camo.githubusercontent.com/3d6476c4f512a34b54dc0b635d8792b2397b3d11/687474703a2f2f69646576656c6f702e6769746875622e636f6d2f61736369692d63616d6572612f696d616765732f73637265656e73686f742e706e67" alt="ASCII Camera"></p><p>将摄像头视频流转换成ascii码流展示出来</p><p>在线摄像头录像页面：<a href="https://idevelop.ro/ascii-camera/" target="_blank" rel="noopener">ASCII Camera</a></p><font color="red"><strong>Predator Vision</strong></font><p>Github: <a href="https://github.com/idevelop/predator-vision" target="_blank" rel="noopener">https://github.com/idevelop/predator-vision</a></p><p>将您的摄像头流转换为实时移动触发的热图表示、需要网络摄像头和WebRTC启用浏览器。</p><p><img src="https://camo.githubusercontent.com/868ac7ae2e22d87c6b77e8b0b6f0d8292b1f401a/687474703a2f2f69646576656c6f702e6769746875622e636f6d2f7072656461746f722d766973696f6e2f696d616765732f73637265656e73686f742e706e67" alt="Predator Vision"></p><p>在线摄像头录像页面：<a href="https://idevelop.ro/predator-vision/" target="_blank" rel="noopener">Predator Vision</a></p><p>作者主页：<a href="http://idevelop.ro/" target="_blank" rel="noopener">Andrei Gheorghe</a></p><font color="red"><strong>Wego</strong></font><p>Github: <a href="https://github.com/schachmat/wego" target="_blank" rel="noopener">https://github.com/schachmat/wego</a></p><p><img src="https://camo.githubusercontent.com/c3d2b92671f1ded5d5a9a9ebafdc836527f97269/687474703a2f2f7363686163686d61742e6769746875622e696f2f7765676f2f7765676f2e676966" alt="Wego"></p><p>命令行里的天气预报。</p><p>安装使用：</p><ul><li>wego 是用 Go 编写的，需要安装 Go 语言、然后再安装 wego。 <a href="http://ask.xmodulo.com/install-go-language-linux.html" target="_blank" rel="noopener">Go 语言安装链接</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">安装 wego</span><br><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/schachmat/wego</span></span><br><span class="line"></span><br><span class="line">wego 会被安装到 $GOPATH/bin，需要将 $GOPATH/bin 添加到 $PATH 环境变量。</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export PATH="$PATH:$GOPATH/bin"'</span>&gt;&gt;~/.bashrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br><span class="line"></span><br><span class="line">命令行启动 wego </span><br><span class="line"><span class="meta">$</span><span class="bash"> wego</span></span><br><span class="line">You have to register for one at https://developer.forecast.io/register</span><br></pre></td></tr></table></figure><p>第一次运行 weg 会生成一个配置文件（<code>~/.wegorc</code>），需要指定一个天气 API key。 你可以从 <a href="https://developer.forecast.io/register" target="_blank" rel="noopener">darksky.net</a>获取一个免费的 API key。</p><p>成功取得 API key 之后，将它写入到 wego 配置中了。 打开 <code>~/.wegorc</code> 文件， 找到这几个选项， 然后按照规则替换即可：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">forecast-api-key</span>=API key</span><br><span class="line"><span class="attr">forecast-lang</span>=zh</span><br><span class="line"><span class="attr">location</span>=<span class="number">39.90403</span>,<span class="number">116.407526</span></span><br></pre></td></tr></table></figure></p><p>只需要配置这三个选项就够了。  <code>forecast-lang</code> 是天气预报数据的语言，wego 默认会把它设置成 en、改成 zh、 显示中文。</p><p>显示出来的天气信息包括：温度、风速和风向、可视距离、降水量和降水概率 </p><p>默认情况下会显示 3 天的天气预报。如果要进行修改，可以通过参数改变天气范围（最多5天），比如要查看 5 天的天气预报：<code>$ wego 5</code></p><font color="red"> Bash 2048</font><p>Github: <a href="https://github.com/mydzor/bash2048" target="_blank" rel="noopener">https://github.com/mydzor/bash2048</a></p><p><img src="http://oy89aex8x.bkt.clouddn.com/BasH2012.jpg" alt="Bash 2048"></p><p>Bash 版 2048</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> 奇淫技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 系列问题集锦</title>
      <link href="/2017-11-24/Linux%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2017-11-24/Linux%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p><strong>命令操作</strong></p><ul><li><a href="https://www.cnblogs.com/xianghang123/archive/2011/08/03/2125977.html" target="_blank" rel="noopener">linux 如何显示一个文件的某几行(中间几行)</a></li><li><a href="http://blog.csdn.net/jerry_1126/article/details/52027539" target="_blank" rel="noopener">Shell中的数组及其相关操作 </a></li></ul><p><strong>神级工具</strong></p><ul><li><a href="http://scottming.com/private/2017-07-22-json_tools/" target="_blank" rel="noopener">Json 神器 - 明生的博客 | Scott’s Blog</a></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> 奇淫技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7添加和删除用户</title>
      <link href="/2017-11-23/CentOS7%20%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/"/>
      <url>/2017-11-23/CentOS7%20%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/</url>
      <content type="html"><![CDATA[<font color="red"><strong>介绍</strong></font><br>当你第一次使用一台新的 <strong>Linux</strong> 服务器时，添加和删除用户是你应该知道如何做的最基本的任务之一。 当你创建一个新的服务器，你只给了 <strong>root</strong>默认帐户。<br><br>虽然这给了你很多的权力和灵活性，但是经常使用具有这么大的权力的帐户也是危险的; 例如，一个 <strong>root</strong>用户更容易受到安全漏洞，因为该帐户下运行的任何命令都可以影响服务器的整个文件系统。 添加一个额外的，无特权的用户来执行常见任务几乎总是一个更好的主意。您还应为需要访问服务器的任何其他用户创建其他帐户。每个用户应该有一个额外的帐户，以便可以监控和管理他们的活动。您仍然可以获取管理权限，在需要的时候，通过一个名为机制 <strong>sudo</strong> 。<br><br>在本指南中，我们将介绍如何创建用户帐户，分配 <strong>sudo</strong>一个 <strong>CentOS 7</strong>服务器上的权限和删除用户。<br><a id="more"></a><br><font color="red"><strong>添加用户</strong></font><p>如果你是作为签署 <strong>root</strong>用户，您可以创建在通过键入任何时候一个新的用户：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">adduser </span>username</span><br></pre></td></tr></table></figure></p><p>如果要在谁被赋予了非 <strong>root</strong>用户登录， <strong>sudo</strong>权限，如在本教程的下一节证明，你可以添加通过键入新用户：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> <span class="keyword">adduser </span>username</span><br></pre></td></tr></table></figure><p>接下来，你需要给你的用户密码，以便他们能够登录要做到这一点，可以使用。 passwd命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">passwd username</span></span><br></pre></td></tr></table></figure><p>注意：请记住添加 <strong>sudo</strong> ，如果你是作为一个非 <strong>root</strong>用户签约在未来的命令 <strong>sudo</strong>特权。系统将提示您键入两次密码以进行确认。现在，您的新用户已设置好，可以使用了！您现在可以使用您设置的密码作为该用户登录。</p><font color="red">向用户授予 <strong>Sudo</strong>权限</font><p>如果您的新用户应该有执行命令的能力 <strong>root</strong>（管理）权限，您将需要给新的用户访问 <strong>sudo</strong> 。我们可以通过增加用户对做 <strong>wheel</strong>组（这使 <strong>sudo</strong>默认访问其所有成员）通过 <strong>gpasswd</strong>命令。这是管理最安全和最简单的方式 <strong>sudo</strong>用户权限。 如果您目前已登录为 <strong>root</strong>用户，键入：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -<span class="selector-tag">a</span> username wheel</span><br></pre></td></tr></table></figure><p>如果您在使用一个非root用户签署sudo权限，输入这个：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -<span class="selector-tag">a</span> username wheel</span><br></pre></td></tr></table></figure></p><p>现在，您的新用户能够使用管理权限执行命令。要做到这一点，只需输入 <strong>sudo</strong>未来要执行作为管理员的命令：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo some_<span class="keyword">command</span></span><br></pre></td></tr></table></figure></p><p>系统将提示您输入您登录的常规用户帐户的密码。一旦正确的密码已经提交，您输入的命令将被执行 <strong>root</strong>权限。</p><font color="red">使用 <strong>Sudo</strong>权限管理用户</font><p>虽然你可以添加和从一组（如删除用户 <strong>wheel</strong> ）与 <strong>gpasswd</strong> ，该命令没有一种方式来显示哪些用户是一个组的成员。 为了查看哪些用户是部分 <strong>wheel</strong>组（因此<strong>sudo</strong>默认权限），你可以用 <strong>lid</strong>的功能。 <strong>lid</strong>通常用来显示用户所属的组，但与 <strong>-g</strong>标志，可以反转它并显示哪些用户属于一个组：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo lid -g wheel</span></span><br></pre></td></tr></table></figure></p><p>输出将显示与组相关联的用户名和 <strong>UID</strong>。这是一个确认您的以前的命令是成功的一个好方法，并且用户具有他们需要的权限。</p><font color="red">删除用户</font><p>如果您有不再需要的用户帐户，最好删除旧帐户。你有几个方法这样做，虽然选择使用哪种方法取决于你自己的情况。 如果你想删除的用户，而不删除任何他们的文件中，键入此命令为 <strong>root</strong> ：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">userdel username</span></span><br></pre></td></tr></table></figure></p><p>如果你想与用户帐户本身一起删除用户的主目录，键入此命令为 <strong>root</strong> ：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">userdel -r username</span></span><br></pre></td></tr></table></figure></p><p>注意：请记住添加 <strong>sudo</strong> ，如果你是作为一个非 <strong>root</strong>用户签约在未来的命令 <strong>sudo</strong>特权。 与任一命令时，用户将自动从他们被加入到任何组，包括除去 <strong>wheel</strong> ，如果他们被给予组 <strong>sudo</strong>特权。 如果您以后使用相同的名称添加其他用户，他们将不得不被添加到 <strong>wheel</strong>组再次获得 <strong>sudo</strong>访问。</p><p>转载链接：<a href="https://www.howtoing.com/how-to-add-and-delete-users-on-a-centos-7-server/" target="_blank" rel="noopener">如何添加和删除用户一个CentOS 7服务器上</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>彻底删除CentOS上的Nginx</title>
      <link href="/2017-11-23/%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4CentOS%E4%B8%8A%E7%9A%84Nginx/"/>
      <url>/2017-11-23/%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4CentOS%E4%B8%8A%E7%9A%84Nginx/</url>
      <content type="html"><![CDATA[<p><strong>停止Nginx软件</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@idroot.net ~]#<span class="built_in"> service </span>nginx stop</span><br></pre></td></tr></table></figure><p><strong>删除Nginx的自动启动</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@idroot</span>.net ~]<span class="meta"># chkconfig nginx off</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>从源头删除Nginx</strong><br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@idroot</span>.net ~]<span class="meta"># rm -rf /usr/sbin/nginx</span></span><br><span class="line">[root<span class="symbol">@idroot</span>.net ~]<span class="meta"># rm -rf /etc/nginx</span></span><br><span class="line">[root<span class="symbol">@idroot</span>.net ~]<span class="meta"># rm -rf /etc/init.d/nginx</span></span><br></pre></td></tr></table></figure></p><p><strong>再使用yum清理</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="builtin-name">remove</span> nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github设置添加SSH</title>
      <link href="/2017-11-23/Github%E8%AE%BE%E7%BD%AE%E6%B7%BB%E5%8A%A0SSH/"/>
      <url>/2017-11-23/Github%E8%AE%BE%E7%BD%AE%E6%B7%BB%E5%8A%A0SSH/</url>
      <content type="html"><![CDATA[<p>用 github 管理项目的时候，使用https url克隆比较方便，复制<code>https url</code>然后到 git Bash 里面直接用clone命令克隆到本地就好了。而使用 <code>SSH url</code>克隆却需要在克隆之前先配置和添加好 SSH key 。因此，如果你想要使用 <code>SSH url</code>克隆的话，你必须是这个项目的拥有者。否则你是无法添加 SSH key 的。</p><p><strong>https 和 SSH 的区别：</strong></p><ul><li><p>前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p></li><li><p>https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p></li></ul><a id="more"></a><font color="red">在 github 上添加 SSH key 的步骤：</font><font color="red">1、配置 git 用户</font><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"superGG1990"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"superGG1990@163.com"</span></span><br></pre></td></tr></table></figure><font color="red">2、检查你电脑是否已经有 SSH key </font><p>运行 git Bash 客户端，输入如下代码：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件。【windows 环境下一般在用户的家目录下】如果文件已经存在、那么你可以跳过步骤3，直接进入步骤4。</p><font color="red">3、创建一个 SSH key </font><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "<span class="selector-tag">your_email</span>@<span class="keyword">example</span>.<span class="keyword">com</span>"</span><br></pre></td></tr></table></figure><p>代码参数含义：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">t 指定密钥类型，默认是 rsa ，可以省略。</span></span><br><span class="line"><span class="ruby">-C 设置注释文字，比如邮箱。</span></span><br><span class="line"><span class="ruby">-f 指定密钥文件存储文件名。</span></span><br></pre></td></tr></table></figure></p><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line"># Enter <span class="keyword">file</span> <span class="keyword">in</span> which <span class="keyword">to</span> save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是 github管理者的密码），</p><p>当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> <span class="literal">no</span> passphrase): </span><br><span class="line"><span class="comment"># Enter same passphrase again:</span></span><br></pre></td></tr></table></figure></p><p>接下来，就会显示如下代码提示，如：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">identification</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">saved</span> <span class="selector-tag">in</span> /<span class="selector-tag">c</span>/<span class="selector-tag">Users</span>/<span class="selector-tag">you</span>/<span class="selector-class">.ssh</span>/<span class="selector-tag">id_rsa</span>.</span><br><span class="line"># <span class="selector-tag">Your</span> <span class="selector-tag">public</span> <span class="selector-tag">key</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">saved</span> <span class="selector-tag">in</span> /<span class="selector-tag">c</span>/<span class="selector-tag">Users</span>/<span class="selector-tag">you</span>/<span class="selector-class">.ssh</span>/<span class="selector-tag">id_rsa</span><span class="selector-class">.pub</span>.</span><br><span class="line"># <span class="selector-tag">The</span> <span class="selector-tag">key</span> <span class="selector-tag">fingerprint</span> <span class="selector-tag">is</span>:</span><br><span class="line"># <span class="selector-tag">01</span><span class="selector-pseudo">:0f</span><span class="selector-pseudo">:f4</span><span class="selector-pseudo">:3b</span><span class="selector-pseudo">:ca</span><span class="selector-pseudo">:85</span><span class="selector-pseudo">:d6</span><span class="selector-pseudo">:17</span><span class="selector-pseudo">:a1</span><span class="selector-pseudo">:7d</span><span class="selector-pseudo">:f0</span><span class="selector-pseudo">:68</span><span class="selector-pseudo">:9d</span><span class="selector-pseudo">:f0</span><span class="selector-pseudo">:a2</span><span class="selector-pseudo">:db</span> <span class="selector-tag">your_email</span>@<span class="selector-tag">example</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到 github 的SSH key上就可以了。</p><font color="red">4、添加你的 SSH key 到 github </font><p>编辑复制 id_rsa.pub 文件中的内容，也可以用git命令复制该文件的内容，如：<br><code>clip &lt; ~/.ssh/id_rsa.pub</code><br>。</p><p>登录 github 账号，在右上角的设置（<code>Account Settings</code>）进入，然后点击菜单栏的 <code>SSH key</code>进入页面添加 SSH key。</p><p>点击 <code>Add SSH key</code>按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。</p><font color="red">5、测试一下该 SSH key</font><p>在git Bash 中输入以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure><p>当你输入以上代码时，会有一段警告代码，如：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity <span class="keyword">of</span> host 'github.com (<span class="number">207.97</span><span class="number">.227</span><span class="number">.239</span>)' can't be established.</span><br><span class="line"><span class="comment"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="comment"># Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase <span class="keyword">for</span> <span class="built_in">key</span> <span class="string">'/c/Users/Administrator/.ssh/id_rsa'</span>:</span><br></pre></td></tr></table></figure></p><p>当然如果你密码输错了，会再要求你输入，知道对了为止。</p><p><strong>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</strong></p><p>密码正确后你会看到下面这段话，如：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span></span><br><span class="line"><span class="comment"># provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 <code>access denied</code> ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><font color="red">修改 git 的 remote url</font><br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看当前的 <span class="string">remote </span><span class="string">url</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span>-v </span><br><span class="line"></span><br><span class="line">调整<span class="string">remote </span><span class="string">url</span></span><br><span class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git@</span><span class="string">github.</span><span class="string">com:someaccount/</span><span class="string">someproject.</span><span class="string">git</span></span><br></pre></td></tr></table></figure><br><br><font color="red">常见问题：</font><p>报错信息 ：<code>WARNING: UNPROTECTED PRIVATE KEY FILE! Permissions 0644 for &#39;/c/Users/Ben/.ssh/id_rsa&#39; are too open</code></p><p>文件权限问题、解决方法：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">chmod 700 id_rsa</span><br><span class="line"></span><br><span class="line">若无法修改，可能是由于之前安装过 Cygwin</span><br><span class="line">尝试更新或者卸载 Cygwin、再重新执行命令</span><br></pre></td></tr></table></figure></p><p>参考链接：</p><ul><li><a href="http://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="noopener">github设置添加SSH</a></li><li><a href="http://www.cnblogs.com/ayseeing/p/4445194.html" target="_blank" rel="noopener">生成多个git ssh密钥</a></li><li><a href="https://superuser.com/questions/397288/using-cygwin-in-windows-8-chmod-600-does-not-work-as-expected" target="_blank" rel="noopener">Using Cygwin in Windows 8, chmod 600 does not work as expected</a></li><li><a href="https://stackoverflow.com/questions/1556119/ssh-private-key-permissions-using-git-gui-or-ssh-keygen-are-too-open" target="_blank" rel="noopener">SSH Private Key Permissions using Git GUI or ssh-keygen are too open</a></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云ECS+Centos+Windows搭建Hexo博客</title>
      <link href="/2017-11-23/%E9%98%BF%E9%87%8C%E4%BA%91ECS-Centos-Windows%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017-11-23/%E9%98%BF%E9%87%8C%E4%BA%91ECS-Centos-Windows%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<font color="red">搭建过程</font><br><hr><br>第一部分: Hexo博客架构及发布原理<br><br>第二部分: 本地软件安装，包括NodeJS、Git、hexo-cli软件、Hexo初始化，生成静态网站<br><br>第三部分: 服务器环境搭建，包括安装 Git 、Nginx配置 、创建 git 用户 。<br><br>第四部分: 使用Git自动化部署发布博客<br><br>第五部分: 其它设置<br><br>第六部分: 文章引用<br><br><a id="more"></a><br><br><font color="red">博客架构</font><br><hr><br>通过下图先理解博客发布原理。<br><br><img src="http://dongfei.oss-cn-shanghai.aliyuncs.com/jiagou.png" alt=""><br><br>整个流程就是本地将 <code>*.md</code>渲染成静态文件，然后Git推送到服务器的repository,服务器再通过 git-hooks 同步网站根目录。<br><hr><br><font color="red">本地(Windows端)软件安装</font><br>包括 NodeJS、 Git、 Hexo-cli 软件<br><strong>安装Git for Windows</strong><br><br><font color="red">软件下载</font><p>客户端系统采用Windos系统，需要安装Git for Windows。下载Git for Windows。<br><a href="https://github.com/git-for-windows/git/releases/" target="_blank" rel="noopener">Git for Windows 下载</a></p><font color="red">软件安装</font><p>选择相应的版本进行安装，安装方式采用默认安装就行了，全部下一步，如果你想安装在其它目录，可以自行修改安装目录（建议默认路径）。</p><font color="red">Git本地配置</font><p>打开Git Bash 终端（以后如无特殊说明，均在GitBash内执行），执行以下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改为 Github 用户名</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"YourName"</span></span><br><span class="line"><span class="comment"># 修改为 Github 登录用的邮箱                </span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"Yourmail@domain.com"</span>    </span><br><span class="line"><span class="comment">#生成密钥，采用的邮箱一定要和上面的邮箱相同，否则后面登录无效</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"Yourmail@domain.com"</span></span><br></pre></td></tr></table></figure><p><strong>其它系统安装</strong></p><font color="red">Linux系统如下安装执行：</font><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo yum install git -y        <span class="comment">#基于 Redhat 系统</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo apt-get install git -y    <span class="comment">#基于 Debian 系统）</span></span></span><br></pre></td></tr></table></figure><font color="red">Mac系统：</font><p>下载地址：<a href="https://sourceforge.net/projects/git-osx-installer/files/git-2.14.1-intel-universal-mavericks.dmg/download?use_mirror=autoselect" target="_blank" rel="noopener">Git for Mac</a></p><p><strong>安装Nodejs</strong></p><font color="red">下载Nodejs</font><p>Nodejs_64位下载地址： <a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">Nodejs中文64位</a> || <a href="https://nodejs.org/dist/" target="_blank" rel="noopener">Nodejs英文64位</a></p><font color="red">安装Nodejs</font><p>下载完成后，直接点击进行安装，安装方式采用默认安装就行了，全部下一步，如果你想安装在其它目录，可以自行修改安装目录（建议默认路径）。</p><p><strong>安装、初始化 Hexo-cli 生成本地博客</strong></p><font color="red">安装 Hexo-cli</font><br>在Git Bash上执行安装<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><br><br><font color="red">初始化Hexo程序</font><p>先建立主目录，然后初始化。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="string">/d/hexo</span>    <span class="comment">#在D盘下新建blog目录，做为博客主目录。</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/d/hexo</span>          <span class="comment">#进入博客主目录</span></span><br><span class="line">hexo init blog      <span class="comment">#初始化hexo并指定名称为blog</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><font color="red">安装插件</font><p>执行初始化后，安装<code>hexo-deployer-git(git部署插件）</code>、<code>hexo-server(本地服务器插件）</code>、<code>hexo-asset-image（图片插件）</code></p><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git帮助文档</a></p><p><a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">hexo-server帮助文档</a></p><p><a href="http://www.jianshu.com/p/c2ba9533088a" target="_blank" rel="noopener">hexo-asset-image 参考</a></p><p>在添加图片插件前，需要修改博客目录下的 <code>_config.yml</code>文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span><span class="literal">true</span>        <span class="comment">#修改值为 true</span></span><br></pre></td></tr></table></figure><p>然后执行以下安装命令。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-asset-image <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。你可以使用两种两种方法添加文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#1、markdown 语法</span></span><br><span class="line">！[<span class="string">This is image</span>](<span class="link">文章名/图片.jpg</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">#2、使用标签插件</span></span><br><span class="line">&#123;% asset_img 图片.jpg This is image %&#125;</span><br></pre></td></tr></table></figure><font color="red">生成博客文章 </font><p>使用 <code>hexo n &lt;文章名称&gt;</code>来新建文章，该命令会成成一个.md文件放置在 <code>sources/_posts</code>文件夹。<br>你可以使用其它软件编辑，或直接使用vim编辑<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的第一篇博客"</span></span><br><span class="line">vim sources<span class="regexp">/_posts/</span>我的第一篇博客.md</span><br></pre></td></tr></table></figure></p><p>编辑完毕后，使用<code>hexo g</code>将.md文件渲染成静态文件，然后启动服务器<code>hexo -server</code> </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>现在就可以使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>查看博客了。</p><p><hr></p><font color="red">服务器端搭建</font><p><strong>Git和NodeJS安装(CentOS环境）</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下操作无特殊说明，均在服务器上执行。</span></span><br><span class="line"><span class="comment"># 安装Git    </span></span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装NodeJS  </span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.<span class="number">33.2</span>/install.sh | bash</span><br><span class="line"></span><br><span class="line">nvm install stable</span><br><span class="line"></span><br><span class="line">检验安装是否成功</span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>NodeJS 安装可以参考：<a href="http://blog.csdn.net/xuaa/article/details/52262586" target="_blank" rel="noopener">在CentOS 7上安装Node.js的4种方法（包含npm）</a></p><p><strong>创建 git 用户并设置免密登录</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户    </span></span><br><span class="line">adduser git</span><br><span class="line"><span class="meta">#</span><span class="bash">设置用户密码</span></span><br><span class="line">passwd git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把用户添加到Sudo用户组</span></span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>找到以下内容：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line"><span class="attribute">root</span>    <span class="literal">ALL</span>=(<span class="literal">ALL</span>)     <span class="literal">ALL</span></span><br></pre></td></tr></table></figure></p><p>在下面添加一行：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git        <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)    <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure></p><p>然后使用<code>wq!</code>强制保存退出vim编辑器。</p><p><strong>切换到git用户，添加~/.ssh文件夹和~/.ssh/authorized_key文件，并赋予相应权限。</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~<span class="string">/.ssh</span></span><br><span class="line">vim ~<span class="string">/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p>切换到本地GitBash,执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制刚才生成的公钥</span></span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure><p>回到服务器端把公钥粘贴到 <code>authorized_keys</code> 文件中，保存退出。<br>修改文件权限。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~<span class="string">/.ssh/authorized_keys</span></span><br><span class="line">chmod 700 ~<span class="string">/.ssh</span></span><br></pre></td></tr></table></figure><p><strong>回到客户端Git Bash执行ssh命令，测试是否可以免密登录。</strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -v git<span class="variable">@Server</span>    <span class="comment">#Server=你的服务器地址</span></span><br></pre></td></tr></table></figure></p><p>到此，git用户添加，免密登录完成。</p><ul><li>安装配置 Nginx</li></ul><p><strong>安装nginx</strong></p><p>这里使用yum方式安装nginx,更多安装方法请百度、google查找</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">更新软件源</span><br><span class="line">sudo yum -y <span class="keyword">update</span> </span><br><span class="line">sudo yum <span class="keyword">install</span> nginx</span><br><span class="line">sudo systemctl <span class="keyword">start</span> nginx     //启动Nginx服务</span><br><span class="line">sudo systemctl <span class="keyword">enable</span> nginx //开机自动启动Nginx服务</span><br></pre></td></tr></table></figure><p><strong>配置Nginx</strong></p><p>在/etc/nginx下找到nginx.conf文件并修改，如果仅有管理一个网站，则直接在此配置文件下修改；如果有多个网站，建议将每个网站做单独的配置文件，以便修改。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim +37 /etc/nginx/nginx.conf            <span class="comment">#直接定位到要操作的行</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> include /etc/nginx/default.d/*.conf;    <span class="comment"># 添加此语句到37行，保存退出。</span></span></span><br></pre></td></tr></table></figure></p><p>这样就可以在<code>/etc/nginx/default.d/</code>文件夹下添加独立网站的配置文件了。<br>新建配置文件<code>blog.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/nginx/default.d/blog.conf</span><br><span class="line"></span><br><span class="line">添加如下内容，保存退出 ：</span><br><span class="line"></span><br><span class="line">server         <span class="comment">#服务</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;                                      <span class="comment">#监听IPV4的本地80端口</span></span><br><span class="line">    <span class="comment">#listen [::]:80;                                #监听IPV6的本地80端口</span></span><br><span class="line">    <span class="attribute">server_name</span> www.dongfei.me dongfei.me;    <span class="comment">#目录绑定的域名</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.php            <span class="comment">#默认主页 default.php;</span></span><br><span class="line">   </span><br><span class="line">    root  /var/www/html/blog;                       <span class="comment">#网站根目录    </span></span><br><span class="line">    <span class="comment">#error_page   404   /404.html;    错误页跳转</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(ico|gif|jpg|jpeg|png|bmp|swf)$</span>    <span class="comment">#可显示的图片</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">access_log</span>   <span class="literal">off</span>;                            <span class="comment">#日志开关</span></span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">1d</span>;                            <span class="comment">#记录时长</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css|txt|xml)?$</span>                <span class="comment">#可解析的文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">access_log</span>   <span class="literal">off</span>;                            <span class="comment">#日志开关</span></span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">12h</span>;                            <span class="comment">#记录时长</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="attribute">location</span> / &#123;                                    <span class="comment">#网站根目录</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;                    <span class="comment">#404跳转页</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/blog.log;            <span class="comment">#日志路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>/var/www/html/blog/</code>目录授权给git用户。否则在同步部署时git用户没有权限，不容易部署成功。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/var/</span>www<span class="regexp">/html/</span>blog</span><br><span class="line">chown -R <span class="string">git:</span>git <span class="regexp">/var/</span>www<span class="regexp">/html/</span>blog</span><br></pre></td></tr></table></figure></p><p><strong>注意：修改Nginx配置文件后、需要重启服务<code>systemctl start nginx</code>、而且阿里云ECS也需要开启相应的端口访问</strong></p><font color="red">使用Git自动化部署发布博客</font><font color="red">在服务器上建立git裸库</font><p><strong>创建一个裸仓库，裸仓库就是只保存git信息的 Repository、首先切换到git用户、确保git用户拥有仓库所有权一定要加 –-bare，这样才是一个裸库。</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line">git init <span class="params">--bare</span> blog.git</span><br></pre></td></tr></table></figure>&lt;font color=”red”使用<code>git-hooks</code>同步网站&gt;<p>在这里我们使用的是<code>post-receive</code>这个钩子，当 git 有收发的时候就会调用这个钩子。 在 ~/blog.git裸库的hooks文件夹中，<br>新建 <code>post-receive</code> 文件。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="regexp">/blog.git/</span>hooks<span class="regexp">/post-receive</span></span><br></pre></td></tr></table></figure></p><p>添加如下内容，保存退出。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/sh</span></span><br><span class="line">git <span class="attribute">--work-tree</span>=/var/www/html/blog <span class="attribute">--git-dir</span>=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure></p><p>赋予可执行权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ~<span class="regexp">/blog.git/</span>hooks<span class="regexp">/post-receive</span></span><br></pre></td></tr></table></figure><p>禁用 git 用户的 shell 登录权限：参考<a href="http://blog.csdn.net/moumaobuchiyu/article/details/70312740" target="_blank" rel="noopener">在服务器上搭建hexo博客</a></p><font color="red">配置_config.yml文件，完成自动化部署</font><p>回到客户端在Git Bash编辑在博客根目录下的_config.yml文件。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim +<span class="number">79</span> <span class="regexp">/d/</span>Hexo<span class="regexp">/blog/</span>_config.yml</span><br></pre></td></tr></table></figure></p><p>修改添加以下内容：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">    <span class="attribute">type</span>: git</span><br><span class="line">    <span class="attribute">repo</span>: git<span class="variable">@SERVER</span>:/home/git/blog.git       <span class="comment">//&lt;repository url&gt;</span></span><br><span class="line">    <span class="attribute">branch</span>: master                           <span class="comment">//这里填写分支   [branch]</span></span><br><span class="line">    <span class="attribute">message</span>:                                <span class="comment">//提交的信息</span></span><br></pre></td></tr></table></figure></p><p>保存后，把我们新建立的文章部署到服务器上。<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean                #清除缓存</span><br><span class="line">hexo <span class="keyword">generate</span> --deploy     #生成文件并部署</span><br></pre></td></tr></table></figure></p><p>参考链接：</p><ul><li><p><a href="https://blog.longger.net/2017/11/windows+linux%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">阿里云ECS+Centos+Windows搭建Hexo博客</a></p></li><li><p><a href="http://www.kingscow.com/archives/328" target="_blank" rel="noopener">阿里云ECS环境下搭建基于Hexo+Git+Nginx的静态博客平台</a></p></li><li><p><a href="http://blog.csdn.net/fjinhao/article/details/77096951" target="_blank" rel="noopener">优化hexo访问速度-将hexo部署到云主机VPS</a></p></li><li><p><a href="http://quantuminit.com/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E9%85%8Dgit%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%88%B0vps%E4%B8%8A%E9%9D%A2/" target="_blank" rel="noopener">使用hexo搭配git部署博客到vps上面</a></p></li><li><p><a href="http://jimmy9876.top/2017/06/16/%E9%98%BF%E9%87%8C%E4%BA%91vps%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">阿里云vps搭建自己的hexo博客</a></p></li><li><p><a href="https://www.huangtengxq.com/2017/08/19/BuildHexoOnVps/" target="_blank" rel="noopener">部署Hexo到个人服务器</a></p></li><li><p><a href="http://www.xjyhs.com/14658783656436.html" target="_blank" rel="noopener">hexo的rsync发布方式</a></p></li><li><p><a href="http://www.stephenzhang.me/2017/07/06/hexo-%E9%98%BF%E9%87%8C%E4%BA%91ECS-CentOS7-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">hexo + 阿里云ECS(CentOS7)搭建个人博客</a></p></li><li><p><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">简单部署</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7中Firewall防火墙配置以及切换为Iptables防火墙</title>
      <link href="/2017-11-21/CentOS7%20%E4%B8%ADFirewall%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%88%87%E6%8D%A2%E4%B8%BAIptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2017-11-21/CentOS7%20%E4%B8%ADFirewall%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%88%87%E6%8D%A2%E4%B8%BAIptables%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="html"><![CDATA[<p><strong>注意：以下firewalld 的操作只有重启之后才有效：<code>service firewalld restart</code>重启</strong></p><font color="red">CentOS 切使用 firewalld 防火墙</font><p>1、系统配置目录 <code>/usr/lib/firewalld/services</code><br>目录中存放定义好的网络服务和端口参数，系统参数，不能修改。</p><p>2、用户配置目录 <code>/etc/firewalld/</code></p><p>3、命令的方式添加端口<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">firwall-<span class="keyword">cmd</span><span class="bash"> --permanent --add-port=9527/tcp </span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">参数介绍：</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">1、firwall-cmd：是Linux提供的操作firewall的一个工具；</span></span><br><span class="line"><span class="bash">2、--permanent：表示设置为持久；</span></span><br><span class="line"><span class="bash">3、--add-port：标识添加的端口；</span></span><br></pre></td></tr></table></figure></p><p>另外，firewall中有Zone的概念，可以将具体的端口制定到具体的zone配置文件中。</p><p>例如：添加8010端口 <code>firewall-cmd --zone=public --permanent --add-port=8010/tcp</code><br><strong>–zone=public：指定的zone为 public</strong><br><a id="more"></a><br>4、修改配置文件的方式添加端口<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>For use in public areas.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rule</span> <span class="attr">family</span>=<span class="string">"ipv4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">address</span>=<span class="string">"122.10.70.234"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"514"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accept</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rule</span> <span class="attr">family</span>=<span class="string">"ipv4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">address</span>=<span class="string">"123.60.255.14"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"10050-10051"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accept</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rule</span> <span class="attr">family</span>=<span class="string">"ipv4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">address</span>=<span class="string">"192.249.87.114"</span>/&gt;</span> 放通指定ip，指定端口、协议</span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"80"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accept</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">family</span>=<span class="string">"ipv4"</span>&gt;</span> 放通任意ip访问服务器的9527端口</span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"9527"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accept</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述的一个配置文件可以很好的看出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、添加需要的规则，开放通源ip为<span class="number">122.10</span><span class="number">.70</span><span class="number">.234</span>，端口<span class="number">514</span>，协议tcp；</span><br><span class="line"><span class="number">2</span>、开放通源ip为<span class="number">123.60</span><span class="number">.255</span><span class="number">.14</span>，端口<span class="number">10050</span><span class="number">-10051</span>，协议tcp；/<span class="number">3</span>、开放通源ip为任意，端口<span class="number">9527</span>，协议tcp</span><br></pre></td></tr></table></figure><p>5、firewall 常用命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1、重启、关闭、开启firewalld.service服务</span><br><span class="line"></span><br><span class="line">service firewalld restart 重启</span><br><span class="line">service firewalld start 开启</span><br><span class="line">service firewalld stop 关闭</span><br><span class="line"> </span><br><span class="line">2、查看firewall服务状态</span><br><span class="line"></span><br><span class="line">systemctl status<span class="built_in"> firewall </span></span><br><span class="line"> </span><br><span class="line">3、查看firewall的状态</span><br><span class="line"></span><br><span class="line">firewall-cmd --state</span><br><span class="line"> </span><br><span class="line">4、查看防火墙规则</span><br><span class="line"></span><br><span class="line">firewall-cmd --list-all </span><br><span class="line"></span><br><span class="line">5、添加</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=80/tcp --permanent （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=1000-2000/tcp --permanent </span><br><span class="line"></span><br><span class="line">6、重新载入</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">7、查看</span><br><span class="line">firewall-cmd --zone= public <span class="attribute">--query-port</span>=80/tcp</span><br><span class="line"></span><br><span class="line">8、删除</span><br><span class="line">firewall-cmd --zone= public <span class="attribute">--remove-port</span>=80/tcp --permanent</span><br></pre></td></tr></table></figure><font color="red">CentOS 切换为iptables防火墙</font><p><strong>注意：切换到iptables首先应该关掉默认的firewalld，然后安装iptables服务。</strong></p><p>1、关闭firewall：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service firewalld <span class="keyword">stop</span></span><br><span class="line">systemctl mask firewalld <span class="meta"># 屏蔽服务</span></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service <span class="meta">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure></p><p>2、安装iptables防火墙</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> iptables-services <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>3、编辑iptables防火墙配置<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="meta-keyword">/etc/</span>sysconfig/iptables <span class="meta">#编辑防火墙配置文件</span></span><br></pre></td></tr></table></figure></p><p>下边是一个完整的配置文件：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Firewall configuration written by system-config-firewall</span><br><span class="line"></span><br><span class="line">Manual customization of this file is not recommended.</span><br><span class="line"></span><br><span class="line"><span class="strong">*filter</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">:INPUT ACCEPT [0:0]</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">:FORWARD ACCEPT [0:0]</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">:OUTPUT ACCEPT [0:0]</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -p icmp -j ACCEPT</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -i lo -j ACCEPT</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">COMMIT</span></span><br></pre></td></tr></table></figure></p><p><code>:wq!</code> #保存退出</p><p><code>service iptables start</code> #开启</p><p><code>service iptables save</code> #保存设置</p><p><code>systemctl enable iptables.service</code> #设置防火墙开机启动</p><p><code>systemctl disable iptables.service</code> #取消防火墙开机启动</p><p>注意：若要再切换为firewalld 、需要执行下面命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop iptables.service</span><br><span class="line">systemctl unmask firewalld<span class="selector-class">.service</span> 显示服务</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pip 修改官方源为豆瓣源</title>
      <link href="/2017-11-21/Pip%20%E4%BF%AE%E6%94%B9%E5%AE%98%E6%96%B9%E6%BA%90%E4%B8%BA%E8%B1%86%E7%93%A3%E6%BA%90/"/>
      <url>/2017-11-21/Pip%20%E4%BF%AE%E6%94%B9%E5%AE%98%E6%96%B9%E6%BA%90%E4%B8%BA%E8%B1%86%E7%93%A3%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>一、创建文件<br>使用 pip 安装 python 依赖库、 经常网速很慢、 甚至被墙、 无法完成安装. 好在国内有较为成熟的pip镜像站、 这里选择豆瓣源.</p><p>编辑配置文件、 如果没有、 新建一份:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">touch ~/.pip/pip.conf</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure></p><p>添加内容如下:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.douban.com/simple</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>另外、使用setup.py安装依赖库、还是会从默认的<a href="http://pypi.python.org" target="_blank" rel="noopener">http://pypi.python.org</a>下载、解决方案如下:</p><p>编辑配置文件、如果没有、新建一份:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch ~/<span class="selector-class">.pydistutils</span><span class="selector-class">.cfg</span></span><br><span class="line">vim ~/<span class="selector-class">.pydistutils</span><span class="selector-class">.cfg</span></span><br></pre></td></tr></table></figure></p><p>添加内容如下:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"> [easy_install]</span></span><br><span class="line"><span class="attr">index_url</span> = http://pypi.douban.com/simple</span><br><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>之后便可以安装需要的依赖库了</p><p>二、该文件放置在指定位置. </p><ul><li><font color="red">linux下指定位置为 </font></li></ul><p><code>$HOME/.config/pip/pip.conf</code></p><p>或者</p><p><code>$HOME/.pip/pip.conf</code></p><ul><li><font color="red">mac下指定位置为  </font></li></ul><p><code>$HOME/Library/Application Support/pip/pip.conf</code></p><p>或者</p><p><code>$HOME/.pip/pip.conf</code></p><ul><li><font color="red">windows下指定位置为 </font></li></ul><p><code>%APPDATA%\pip\pip.ini</code></p><p>或者</p><p><code>%HOME%\pip\pip.ini</code></p><p>其中 <strong>$HOME</strong>指的是用户主目录</p><p>三、如果你使用了virtualenv、那么配置文件应该放置在virtualenv生成的文件夹中.</p><p>例如：你通过 <code>virtualenv  &lt;env_name&gt;</code>命令创建了一个虚拟环境, 那么在当前录下会生成一个新的文件夹<code>&lt;env_name&gt;</code>, 配置文件应该被放置在<code>&lt;env_name&gt;</code>文件夹中.</p><p>ps: 下面是国内几个常见的pip源、 大家根据自己的地理位置、 选择对应的源.</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//pypi.hustunique.com/ 华中理工大学</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//pypi.sdutlinux.org/ 山东理工大学</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//pypi.mirrors.ustc.edu.cn/ 中国科学技术大学</span></span><br></pre></td></tr></table></figure><p><strong>windows 修改参见：</strong></p><ul><li><a href="http://www.jb51.net/article/98401.htm" target="_blank" rel="noopener">windows及linux环境下永久修改pip镜像源的方法</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu下安装Python虚拟环境Virtualenv</title>
      <link href="/2017-11-21/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83Virtualenv/"/>
      <url>/2017-11-21/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83Virtualenv/</url>
      <content type="html"><![CDATA[<p>一、升级python包管理工具pip<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure></p><p>备注：当你想升级一个包的时候 <code>pip install --upgrade 包名</code></p><p>二、python虚拟环境安装<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install python-virtualenv</span><br><span class="line">sudo easy_install virtualenvwrapper</span><br></pre></td></tr></table></figure></p><p>上述工具装好后找不到 <strong>mkvirtualenv</strong>命令，需要执行以下环境变量设置:</p><ul><li>创建目录用来存放虚拟环境 <code>mkdir $HOME/.virtualenvs</code></li><li><p>在<code>~/.bashrc</code>中添加行：</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">WORKON_HOME</span>=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>source ~/.bashrc</code> </p></li></ul><a id="more"></a><p>三、创建python虚拟环境</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv <span class="string">[虚拟环境名称]</span></span><br><span class="line">workon <span class="string">[虚拟环境名称]</span></span><br><span class="line">workon 查看创建的虚拟环境</span><br></pre></td></tr></table></figure><p>四、退出虚拟环境 <code>deactivate</code></p><p>五、删除<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv <span class="string">[虚拟环境名称]</span></span><br></pre></td></tr></table></figure></p><font color="red"></font>python 2 版本开发<br><br>创建 python2 的虚拟开发环境<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -<span class="selector-tag">p</span> /usr/bin/python2.<span class="number">7</span> py2</span><br></pre></td></tr></table></figure><br><br>（<strong>/usr/bin/python2.7</strong> 是 python2.7 的安装目录）<br>使用 <strong>python2.7+django1.7.8</strong> 环境，你应该安装如下环境：<br><br><code>pip freeze list</code>  //进入一个虚拟环境后，这个命令是查看本环境的安装的配置<br><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span>==<span class="number">8.1</span>.<span class="number">0</span></span><br><span class="line"><span class="attr">Django</span>==<span class="number">1.7</span>.<span class="number">8</span></span><br><span class="line"><span class="attr">ipdb</span>==<span class="number">0.8</span>.<span class="number">1</span></span><br><span class="line"><span class="attr">ipython</span>==<span class="number">3.2</span>.<span class="number">0</span></span><br><span class="line"><span class="attr">Pillow</span>==<span class="number">2.8</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><br><br>把以上包名存储到 <code>package_py2.txt</code>，在你的 python 虚拟环境中，执行下面的命令使用：<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r <span class="keyword">package</span><span class="number">_p</span>y<span class="number">2</span>.txt</span><br></pre></td></tr></table></figure><br><br><font color="red">python 3版本开发</font><p>创建 python3 的虚拟开发环境<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -<span class="selector-tag">p</span> /usr/bin/python3.<span class="number">4</span>  py3</span><br></pre></td></tr></table></figure></p><font color="">pip命令速查</font> <p>查看已安装的包</p><ul><li><code>pip show --files SomePackage</code></li></ul><p>检查哪些包需要更新</p><ul><li><code>pip list --outdated</code></li></ul><p>升级包</p><ul><li><code>pip install --upgrade SomePackage</code></li></ul><p>卸载包</p><ul><li><code>pip uninstall SomePackage</code></li></ul><p>使用豆瓣源安装包</p><ul><li><code>pip install pythonModuleName -i https://pypi.douban.com/simple</code></li></ul><p>参数解释</p><ul><li><code>pip --help</code></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu查看网关地址方法</title>
      <link href="/2017-11-20/Ubuntu%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80%E6%96%B9%E6%B3%95/"/>
      <url>/2017-11-20/Ubuntu%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%85%B3%E5%9C%B0%E5%9D%80%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><font color="red">1、<strong>ip route show</strong></font><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">figure@figure-virtual-machine:~$<span class="built_in"> ip route </span>show</span><br><span class="line">default via 192.168.137.1 dev ens33 proto static metric 100 </span><br><span class="line"><span class="comment">#eth33 网关地址:192.168.137.1</span></span><br><span class="line">169.254.0.0/16 dev ens33 scope link metric 1000 </span><br><span class="line">192.168.137.0/24 dev ens33 proto kernel scope link src 192.168.137.155</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><font color="red">2、<strong>route -n</strong> 或者 <strong>netstat -rn</strong></font><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">figure@figure-virtual-machine:~$<span class="built_in"> route </span>-n</span><br><span class="line">内核<span class="built_in"> IP </span>路由表</span><br><span class="line">目标            网关            子网掩码        标志  跃点   引用  使用 接口</span><br><span class="line">0.0.0.0         192.168.137.1   0.0.0.0         UG    100    0        0 ens33</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1000   0        0 ens33</span><br><span class="line">192.168.137.0   0.0.0.0         255.255.255.0   U     0      0        0 ens33</span><br></pre></td></tr></table></figure></p><p><strong>eth33 网关地址:192.168.137.1</strong></p><p><font color="red">3、<strong>traceroute <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong></font><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">figure@figure-virtual-machine:~$ traceroute www.baidu.com</span><br><span class="line">traceroute to www.baidu.com (<span class="number">112.80</span>.<span class="number">248.73</span>), <span class="number">30</span> hops max, <span class="number">60</span> byte packets</span><br><span class="line"> <span class="number">1</span>  gateway (<span class="number">192.168</span>.<span class="number">137.1</span>)  <span class="number">1.891</span> <span class="keyword">ms</span> <span class="title">* *</span></span><br><span class="line"><span class="title"> 2</span>  * * *</span><br><span class="line"> <span class="number">3</span>  <span class="number">121.248</span>.<span class="number">211.1</span> (<span class="number">121.248</span>.<span class="number">211.1</span>)  <span class="number">7.278</span> <span class="keyword">ms</span>  <span class="title">7</span>.<span class="number">811</span> <span class="keyword">ms</span>  <span class="title">10</span>.<span class="number">781</span> ms</span><br><span class="line"> <span class="number">4</span>  <span class="number">192.168</span>.<span class="number">100.5</span> (<span class="number">192.168</span>.<span class="number">100.5</span>)  <span class="number">10.594</span> <span class="keyword">ms</span>  <span class="title">11</span>.<span class="number">026</span> <span class="keyword">ms</span>  <span class="title">10</span>.<span class="number">945</span> ms</span><br><span class="line"> <span class="number">5</span>  <span class="number">192.168</span>.<span class="number">100.13</span> (<span class="number">192.168</span>.<span class="number">100.13</span>)  <span class="number">12.039</span> <span class="keyword">ms</span>  <span class="title">12</span>.<span class="number">511</span> <span class="keyword">ms</span>  <span class="title">12</span>.<span class="number">565</span> ms</span><br><span class="line"> <span class="number">6</span>  <span class="number">192.168</span>.<span class="number">100.106</span> (<span class="number">192.168</span>.<span class="number">100.106</span>)  <span class="number">12.505</span> <span class="keyword">ms</span>  <span class="title">27</span>.<span class="number">972</span> <span class="keyword">ms</span>  <span class="title">4</span>.<span class="number">797</span> ms</span><br><span class="line">^C</span><br><span class="line">第一跳的地址就是网关地址</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows下安装 Python 虚拟环境 Virtualenv</title>
      <link href="/2017-11-20/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83Virtualenv/"/>
      <url>/2017-11-20/Windows%E4%B8%8B%E5%AE%89%E8%A3%85Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83Virtualenv/</url>
      <content type="html"><![CDATA[<font color="red">前言</font><p>由于 Python 的版本众多，还有Python2和Python3的争论，因此有些软件包或第三方库就容易出现版本不兼容的问题。</p><p>通过 <code>virtualenv</code> 这个工具，就可以构建一系列 虚拟的Python环境 ，然后在每个环境中安装需要的软件包(配合 pip 使用)，这一系列的环境是相互隔离的。作为一个独立的环境就不容易出现版本问题，还方便部署。</p><a id="more"></a><font color="red">安装</font><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> virtualenv</span><br></pre></td></tr></table></figure><br><br><font color="red">virtualenv的基本使用</font> <p>创建虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">virtualenv venv</span></span><br></pre></td></tr></table></figure><p>为环境指定Python解释器:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -<span class="selector-tag">p</span> c:\python27\python<span class="selector-class">.exe</span> venv</span><br></pre></td></tr></table></figure></p><p>激活虚拟环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">activate</span> venv</span><br></pre></td></tr></table></figure><p>停止虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure><p>删除虚拟环境</p><p>直接删除目录即可.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rm -rf  venv</span></span><br></pre></td></tr></table></figure><font color="red">virtualenvwrapper</font> <p>为了使用 <code>virtualenv</code>更方便，可以借助 <code>virtualenvwrapper</code></p><p>安装 <code>virtualenvwrapper</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>创建虚拟环境 </p><p>默认创建的虚拟环境位于 <code>C:\Users\username\envs</code>、可以通过环境变量 <code>WORKON_HOME</code>来定制。</p><p>通过 <strong>计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量</strong> 在系统变量中新建 <strong>变量名 ： WORKON_HOME</strong>、<strong>变量值：自定义的路径</strong>。</p><p>创建后，会自动激活环境，注意看 <code>Shell</code>提示符的改变:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(venv)</span>c:\&gt;</span><br></pre></td></tr></table></figure></p><p>列出所有虚拟环境<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsvirtualenv</span></span><br></pre></td></tr></table></figure></p><p>激活虚拟环境<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon venv</span></span><br></pre></td></tr></table></figure></p><p>进入虚拟环境目录<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cdvirtualenv</span></span><br></pre></td></tr></table></figure></p><p>进入虚拟环境的<code>site-packages</code>目录 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cdsitepackages</span></span><br></pre></td></tr></table></figure><p>列出 <code>site-packages</code>目录的所有软件包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lssitepackages</span></span><br></pre></td></tr></table></figure><p>列停止虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure><p>删除虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rmvirtualenv venv</span></span><br></pre></td></tr></table></figure><font color="red">重建 <code>Python</code>环境 </font><p>冻结环境</p><p>所谓 冻结(freeze) 环境，就是将当前环境的软件包等固定下来:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">pip</span> <span class="selector-tag">freeze</span> &gt;<span class="selector-tag">packages</span><span class="selector-class">.txt</span>　　# 安装包列表保存到文件 <span class="selector-tag">packages</span><span class="selector-class">.txt</span> 中</span><br></pre></td></tr></table></figure><p>重建环境</p><p>重建(rebuild) 环境就是在部署的时候，在生产环境安装好对应版本的软件包，不要出现版本兼容等问题:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r packages.txt</span><br></pre></td></tr></table></figure><p>配合 pip，可以批量安装对应版本的软件包，快速重建环境，完成部署。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu修改apt-get源</title>
      <link href="/2017-11-19/Ubuntu%E4%BF%AE%E6%94%B9apt-get%E6%BA%90/"/>
      <url>/2017-11-19/Ubuntu%E4%BF%AE%E6%94%B9apt-get%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>1、背景</p><p>服务器上安装了最新的<code>Ubuntu Server 17.04</code> ，代号为 <strong>zesty</strong>。使用apt-get命令安装软件时，有时候速度比较慢，有时候会失败。因此考虑用国内的镜像源更换下apt-get的默认源。</p><p>2、实现</p><p>（1）备份并编辑源文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">cp</span> /etc/apt/<span class="keyword">source</span>.<span class="keyword">list</span> /etc/apt/<span class="keyword">source</span>.<span class="keyword">list</span>.bak</span><br><span class="line">sudo <span class="keyword">vim</span> /etc/apt/sources.<span class="keyword">list</span></span><br></pre></td></tr></table></figure></p><p>（2）使用网易apt-get源，将原来的源地址，替换为如下，由于服务器的版本是17.04，因此源地址的代号部分都是 <strong>zesty</strong>，如果是其他版本，可以替换为对应的版本，具体版本代号可以网上查找。</p><a id="more"></a><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.<span class="number">163</span>.com<span class="regexp">/ubuntu/</span> zesty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>（3）执行<code>apt-get update</code>，会发现会报错，<code>apt-get: Could not resolve &#39;mirrors.163.com’</code>的错误，这种原因其实是因为还缺少一个步骤，就是将添加的网址和IP进行映射，修改<code>/etc/</code>目录下的host文件。</p><p>（4）通过<code>ip.chinaz.com</code>进行查询网址<code>mirrors.163.com</code>，对应的ip地址如下所示，然后将其添加到hosts文件里。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123<span class="selector-class">.58</span><span class="selector-class">.190</span><span class="selector-class">.228</span>     <span class="selector-tag">mirrors</span><span class="selector-class">.163</span><span class="selector-class">.com</span></span><br><span class="line">123<span class="selector-class">.58</span><span class="selector-class">.190</span><span class="selector-class">.236</span>     <span class="selector-tag">mirrors</span><span class="selector-class">.163</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>（5）再执行<code>sudo apt-get update，apt-get upgrade</code>，就配置好了。</p><p>参考：</p><ul><li><a href="http://www.cnblogs.com/lixiaolun/p/5495911.html" target="_blank" rel="noopener">ubuntu sudo apt-get update 失败解决方法 </a></li><li><a href="http://www.2cto.com/os/201410/341871.html" target="_blank" rel="noopener">ubuntu apt-get update 失败解决方案 </a></li><li><a href="http://blog.csdn.net/qq_33746131/article/details/52966547" target="_blank" rel="noopener">ubuntu16.04更换为国内源</a></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu系统的常用配置</title>
      <link href="/2017-11-19/Ubuntu%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2017-11-19/Ubuntu%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<font color="red">1、删除libreoffice</font><p>libreoffice虽然是开源的，但是Java写出来的office执行效率实在不敢恭维，装完系统后果断删掉<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> libreoffice-common</span><br></pre></td></tr></table></figure></p><font color="red">2、删除Amazon的链接</font><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> unity-webapps-common</span><br></pre></td></tr></table></figure><font color="red">3、删掉基本不用的自带软件（用的时候再装也来得及）</font><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install  </span><br><span class="line"></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> onboard deja-dup</span><br></pre></td></tr></table></figure><p>这样系统就基本上干净了。</p><font color="red">4、安装Vim</font><p>居然默认没有集成Vim神器，只能手动安装了。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install vim</span><br></pre></td></tr></table></figure></p><font color="red">5、设置时间使用UTC</font><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/rcS</span></span><br></pre></td></tr></table></figure><p>将 <code>UTC=no</code> 改为 <code>UTC=yes</code></p><font color="red">6、安装Chrome</font><p>到 <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a> 下载最新的安装文件。<br>然后<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install libappindicator1 libindicator7  </span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb   </span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -f install</span><br></pre></td></tr></table></figure></p><p>这样以后就可以apt安装和更新chrome浏览器了。</p><font color="red">7、安装搜狗输入法</font><p><code>vim /etc/apt/sources.list.d/ubuntukylin.list</code> 文件，加入 ubuntu kylin 的apt源<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//archive.ubuntukylin.com:10006/ubuntukylin trusty main</span></span><br></pre></td></tr></table></figure></p><p>然后</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update  </span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install sogoupinyin</span><br></pre></td></tr></table></figure><p>这样就可以apt安装和更新搜狗输入法了。</p><font color="red">8、安装WPS Office</font><p>目前MS一直不出Linux版的Office，只能凑合着用WPS了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install wps-office</span><br></pre></td></tr></table></figure></p><font color="red">9、安装Oracle Java</font><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/java    </span><br><span class="line">sudo apt-get update    </span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>由于系统自带的是OpenJDK，卸载OpenJDK之后会带有残留，导致运行<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure></p><p>第一行不是java的版本号，会是 <strong>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar</strong></p><p>这个提示，导致很多检测java版本号的脚本会运行出错，因此需要手动清除残留。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm <span class="regexp">/usr/</span>share<span class="regexp">/upstart/</span>sessions<span class="regexp">/jayatana.conf</span></span><br></pre></td></tr></table></figure></p><p>删除<code>/usr/share/upstart/sessions/jayatana.conf</code>文件，重启之后再运行<code>java -version</code>就不会再有<code>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar</code>提示了。</p><font color="red">10、安装Sublime Text 3</font><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/sublime-text-3    </span><br><span class="line">sudo apt-get update    </span><br><span class="line">sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure><font color="red">11、安装经典菜单指示器</font><br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:diesch/testing  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install classicmenu-indicator</span><br></pre></td></tr></table></figure><br><br><font color="red">12、安装系统指示器SysPeek</font><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:nilarimogard/webupd8    </span><br><span class="line">sudo apt-get update    </span><br><span class="line">sudo apt-get install syspeek</span><br></pre></td></tr></table></figure><font color="red">13、自定义DHCP网络的DNS Server IP地址</font><br><code>sudo vim /etc/dhcp/dhclient.conf</code>文件，<br>在第21行<code>#prepend domain-name-servers 127.0.0.1;</code><br>下一行添加如下2行使用aliyun和114的DNS：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">prepend</span> <span class="selector-tag">domain-name-servers</span> 114<span class="selector-class">.114</span><span class="selector-class">.114</span><span class="selector-class">.114</span>;  </span><br><span class="line"><span class="selector-tag">prepend</span> <span class="selector-tag">domain-name-servers</span> 223<span class="selector-class">.5</span><span class="selector-class">.5</span><span class="selector-class">.5</span>;</span><br></pre></td></tr></table></figure><br><br>这样可以优先使用aliyun的dns，次要使用114的DNS。<br><br><font color="red">14、安装git和vpnc</font><br>git和vpn大家都懂的，程序员的好工具。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install vpnc git</span><br></pre></td></tr></table></figure><br><br><font color="red">15、安装axel</font><p>axel是Linux命令行界面的多线程下载工具，比wget的好处就是可以指定多个线程同时在命令行终端里下载文件。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install axel</span><br></pre></td></tr></table></figure></p><p>安装之后，就可以代替wget用多线程下载了。</p><font color="red">16、安装openssh-server</font><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install openssh-server</span><br></pre></td></tr></table></figure><p>安装之后，就可以在Win下用ssh工具远程登陆了，当然也多了一个安全隐患，如果不想远程登陆本机的话，可以不装 openssh-server。</p><font color="red">17、安装CMake和Qt Creator</font><p>CMake和Qt Creator是Linux下开发C++程序的神器，Ubuntu 15.04已经集成了最新版的Qt Creator （3.1.1）。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install cmake qtcreator</span><br></pre></td></tr></table></figure></p><font color="red">18、安装ExFat文件系统驱动</font><p>Ubuntu默认不支持exFat文件系统的挂载，需要手动安装exfat的支持<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install exfat-fuse</span><br></pre></td></tr></table></figure></p><p>装上exfat-fuse之后就可以挂载exfat分区的磁盘了。</p><font color="red">19、安装lnav</font><p>lnav工具是在终端界面看日志的神器<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install lnav</span><br></pre></td></tr></table></figure></p><p>装上之后在终端里就可以用lnav彩色显示日志了。</p><font color="red">20、安装unrar</font><p>系统默认不带解压缩rar文件的功能，手动安装unrar程序<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install unrar</span><br></pre></td></tr></table></figure></p><p>装上之后就可以用命令解压缩rar文件了。<br>使用如下命令解压缩文件到当前目录。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">unrar</span> <span class="selector-tag">x</span> <span class="selector-tag">test</span><span class="selector-class">.rar</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu安装完后设置root密码</title>
      <link href="/2017-11-19/Ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E5%90%8E%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81/"/>
      <url>/2017-11-19/Ubuntu%E5%AE%89%E8%A3%85%E5%AE%8C%E5%90%8E%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>1、用当前登录用户打开终端，在终端输入命令 <code>sudo passwd</code>，输入当前用户的密码然后回车</p><p>2、提示输入新密码，输入完成后回车</p><p>3、然后提示再输入一次新密码以确认，然后回车，设置成功<br><a id="more"></a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">figure<span class="variable">@figure</span>-virtual-<span class="symbol">machine:</span>~<span class="variable">$ </span>sudo passwd</span><br><span class="line">输入新的 UNIX 密码： </span><br><span class="line">重新输入新的 UNIX 密码： </span><br><span class="line">passwd：已成功更新密码</span><br><span class="line">figure<span class="variable">@figure</span>-virtual-<span class="symbol">machine:</span>~<span class="variable">$ </span>su root</span><br><span class="line">密码： </span><br><span class="line">root<span class="variable">@figure</span>-virtual-<span class="symbol">machine:</span>/home/figure<span class="comment"># su figure</span></span><br><span class="line">figure<span class="variable">@figure</span>-virtual-<span class="symbol">machine:</span>~$</span><br></pre></td></tr></table></figure><p>注意：这个新密码就是root的密码，可以与当前用户的密码不同。</p><p>在终端中输入 <code>su root</code>，然后输入root的密码，验证成功即可切换到root用户。</p><p>在root用户下做完操作后，用<code>exit</code>命令即可退出root用户，退回当前登陆用户。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH 无法连接远端 Ubuntu 的解决方法</title>
      <link href="/2017-11-19/SSH%20%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%AB%AF%20Ubuntu%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2017-11-19/SSH%20%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%AB%AF%20Ubuntu%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>一、远程登录虚拟机的准备：</p><p>Ubuntu虚拟机的联网方式应该选择Bridged（桥接模式），可以在Ubuntu中配置静态IP，或者使用路由器（自己使用的是WiFi连接，经过无线路由器进行配置）通过DCHP服务器进行IP地址分配（一般配置后不再改变，通过MAC地址识别来分配地址，除非IP地址已经耗尽）。</p><a id="more"></a><p>二、关于远端主机（Ubuntu）上的一些配置：</p><p>由于sshd的设置不允许root用户用密码远程登录，修改<code>/etc/ssh/sshd_config</code>文件，但必须是安装了 <strong>openssh-server</strong>才会有这个文件，如果文件不存在，请检查是否安装了openssh。如果没有安装，则通过以下命令安装： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install</span> openssh-<span class="keyword">server</span></span><br><span class="line"></span><br><span class="line">查看 SSH 是否启动</span><br><span class="line">netstat -an | grep <span class="number">22</span> </span><br><span class="line">或者</span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line">查看 <span class="number">22</span> 端口是否处于 LISTEN 状态或 ssh 服务是否已经运行</span><br><span class="line">如果是，则说明 Ubuntu 主机上的 ssh 已经配置好了。</span><br><span class="line"></span><br><span class="line">如果只有 ssh-<span class="keyword">agent</span> 表示还没启动，执行下面命令：</span><br><span class="line">sudo /etc/init.d/ssh <span class="keyword">start</span></span><br><span class="line">sudo /etc/init.d/ssh restart（重新启动ssh服务）</span><br></pre></td></tr></table></figure><p>具体可参考：<a href="http://os.51cto.com/art/201104/256070.htm" target="_blank" rel="noopener">Ubuntu下安装OpenSSH Server并在客户端远程连接Ubuntu</a></p><p>如果没有问题可能是ssh-server的配置文件设置了拒绝以root用户登录的模式：<br><code>sudo vim /etc/ssh/sshd_config</code> 找到：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Authentication:</span></span><br><span class="line"><span class="attribute">LoginGraceTime</span> <span class="number">120</span></span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">StrictModes <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>改成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Authentication:</span></span><br><span class="line"><span class="string">LoginGraceTime</span> <span class="number">120</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">StrictModes</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>然后退出vim编辑，输入命令<code>/etc/init.d/ssh restart</code>、重启ssh服务即可。 </p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VMware 虚拟机【NAT模式】配置静态IP(Ubuntu 17 64位)</title>
      <link href="/2017-11-14/VMware%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%90NAT%E6%A8%A1%E5%BC%8F%E3%80%91%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP(Ubuntu%2017%2064%E4%BD%8D)/"/>
      <url>/2017-11-14/VMware%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%90NAT%E6%A8%A1%E5%BC%8F%E3%80%91%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP(Ubuntu%2017%2064%E4%BD%8D)/</url>
      <content type="html"><![CDATA[<font color="red">查看主机的网卡是否将网络共享给虚拟网卡 <code>VMnet8</code> </font><p>打开 <strong>网络共享中心</strong> ==&gt; <strong>更改适配器设置</strong>、然后右击你使用的那个网卡、我使用的无线。所以右击 <strong>无线网络连接</strong> ==&gt; <strong>属性</strong> ==&gt; <strong>共享</strong>、在选择框里选上 <code>VMnet8</code>网卡。</p><p><strong>注意：当无线网更改后，仍要重新设置共享<code>VMnet8</code></strong></p><p>这个作用就是将无线网卡和虚拟机的网卡对接上 主机、虚拟机就是通过 <code>VMnet8</code> 这个虚拟网卡进行通讯的。</p><p><strong>运行<code>services.msc</code> 开启<code>VMnetDHCP</code>和 <code>VMware NAT Service</code> 服务</strong></p><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet8.png" alt=""></p><a id="more"></a><font color="red">查看主机给 <code>VMnet8</code> 网卡分配的 IP</font><p>这个 IP 就是虚拟机配置静态IP时的网关<br><img src="http://oqiflua2i.bkt.clouddn.com/vmnet80.png" alt=""></p><font color="red">VMware 网络配置</font><p><strong>VMware软件</strong> ==&gt; <strong>编辑</strong> ==&gt; <strong>虚拟网络编辑器</strong> ==&gt; <strong>更改设置</strong></p><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet800.png" alt=""></p><font color="red">修改 NAT 设置</font><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet8000.png" alt=""></p><font color="red">查看 VMware 的虚拟 DHCP 服务器划分的有效ip地址范围，这一步只是查看，并不需要设置。（切记只是查看不是设置，最后点击取消。）</font><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet80000.png" alt=""></p><font color="red">Ubuntu 设置 静态IP地址、通过网路管理面板设置 IP</font><p>这里设置的IP地址为： </p><p>IP： 192.168.137.155</p><p>子网掩码： 255.255.255.0 </p><p>网关： 192.168.137.2</p><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet800000.png" alt=""></p><font color="red">网卡配置文件设置</font><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>network<span class="regexp">/interfaces</span></span><br></pre></td></tr></table></figure><p>配置如下:</p><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet8000000.png" alt=""></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assgin static IP by eric on 26-SEP-2012</span></span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.137.155 #change <span class="keyword">to</span> your static IP</span><br><span class="line">netmask 255.255.255.0  #change <span class="keyword">to</span> your netmask</span><br><span class="line">gateway 192.168.137.2    #change <span class="keyword">to</span> your getway</span><br><span class="line"><span class="comment">#We must specify dns-nameserver here</span></span><br><span class="line"><span class="comment">#in order to get internet access from host</span></span><br><span class="line">dns-nameservers 114.114.114.114</span><br><span class="line">auto eth0</span><br></pre></td></tr></table></figure><font color="red">DNS 设置  </font><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/resolv.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p><img src="http://oqiflua2i.bkt.clouddn.com/vmnet80000000.png" alt=""></p><font color="red">重启网络 </font><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/networking restart</span></span><br></pre></td></tr></table></figure><font color="red">测试是否配置成功</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python Requests库里的text&amp;&amp;content属性的区别</title>
      <link href="/2017-11-06/Python%20Requests%E5%BA%93%E9%87%8C%E7%9A%84text&amp;&amp;content%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017-11-06/Python%20Requests%E5%BA%93%E9%87%8C%E7%9A%84text&amp;&amp;content%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>官方的文档说明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  text   &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line"><span class="meta"> @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">text</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Content of the response, in unicode."""</span></span><br><span class="line">                ·········</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  content  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line"><span class="meta">@property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">content</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Content of the response, in bytes."""</span></span><br><span class="line">                ·········</span><br></pre></td></tr></table></figure></p><a id="more"></a><ul><li><font color="red">response.text  返回的是 Unicode 型的数据</font></li><li><font color="red">response.content 返回的是 bytes 型，也就是二进制的数据</font></li><li><font color="red">如果取文本，可以通过 r.text</font></li><li><font color="red">如果取图片和文件，则可以通过 r.content</font></li></ul><p>例如：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载保存一张图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">image_url = <span class="string">'http://img.infinitynewtab.com/wallpaper/881.jpg'</span></span><br><span class="line">r = requests.<span class="built_in">get</span>(image_url)</span><br><span class="line">content = r.content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'image.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(content)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 中常见的几种文件下载方法</title>
      <link href="/2017-11-06/Python%20%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95/"/>
      <url>/2017-11-06/Python%20%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>下载比较小的文件：</strong></p><ul><li><font color="red">方法一：使用urllib库</font><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># -*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line">import urllib</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">url = 'http://mvideo.spriteapp.cn/video/<span class="number">2017</span>/<span class="number">0414</span>' \</span><br><span class="line">      '/697de826-<span class="number">20b5</span>-<span class="number">11e7</span>-9c72-1866daeb0df1cut_wpcco.mp4'</span><br><span class="line"><span class="built_in">print</span> <span class="string">"downloading with urllib"</span></span><br><span class="line">start = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">urllib.urlretrieve(url, <span class="string">"video.mp4"</span>)</span><br><span class="line">end = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="built_in">print</span> 'Finish <span class="keyword">in</span> ：', end - start</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p><font color="red">方法二：使用urllib2库</font></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line">import urllib2</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">url = 'http://mvideo.spriteapp.cn/video/<span class="number">2017</span>/<span class="number">0414</span>/' \</span><br><span class="line">      '697de826-<span class="number">20b5</span>-<span class="number">11e7</span>-9c72-1866daeb0df1cut_wpcco.mp4'</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">"downloading with urllib2"</span></span><br><span class="line">start = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">data = urllib2.urlopen(url).<span class="built_in">read</span>()</span><br><span class="line">with open('video.mp4', 'wb') as video:</span><br><span class="line">    video.write(data)</span><br><span class="line">end = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="built_in">print</span> 'Finish <span class="keyword">in</span> ：', end - start</span><br></pre></td></tr></table></figure></li><li><font color="red">方法三：使用requests库</font></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line">import requests</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">url = 'http://mvideo.spriteapp.cn/video/<span class="number">2017</span>/<span class="number">0414</span>/' \</span><br><span class="line">      '697de826-<span class="number">20b5</span>-<span class="number">11e7</span>-9c72-1866daeb0df1cut_wpcco.mp4'</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">"downloading with requests"</span></span><br><span class="line">start = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">r = requests.<span class="built_in">get</span>(url)</span><br><span class="line">with open('video.mp4', 'wb') as video:</span><br><span class="line">    video.write(r.<span class="built_in">content</span>)</span><br><span class="line">end = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="built_in">print</span> 'Finish <span class="keyword">in</span> ：', end - start</span><br></pre></td></tr></table></figure><p><strong>下载比较大的文件：</strong></p><ul><li><font color="red">方法一：使用urllib2库</font></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line">import urllib2</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">url = 'http://mvideo.spriteapp.cn/video/<span class="number">2017</span>/<span class="number">0414</span>/' \</span><br><span class="line">      '697de826-<span class="number">20b5</span>-<span class="number">11e7</span>-9c72-1866daeb0df1cut_wpcco.mp4'</span><br><span class="line"></span><br><span class="line">r = urllib2.Request(url)</span><br><span class="line">u = urllib2.urlopen(r)</span><br><span class="line">start = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">with open('video.mp4', 'w') as f:</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        tmp = u.<span class="built_in">read</span>(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tmp:</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        f.write(tmp)</span><br><span class="line">end = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="built_in">print</span> 'Finish <span class="keyword">in</span> ：', end - start</span><br></pre></td></tr></table></figure><ul><li><font color="red">方法二：使用requests库</font></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-<span class="number">8</span> -*-</span><br><span class="line">import requests</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line">url = 'http://mvideo.spriteapp.cn/video/<span class="number">2017</span>/<span class="number">0414</span>/' \</span><br><span class="line">      '697de826-<span class="number">20b5</span>-<span class="number">11e7</span>-9c72-1866daeb0df1cut_wpcco.mp4'</span><br><span class="line"># 当把<span class="built_in">get</span>函数的stream参数设置成False时，</span><br><span class="line"># 它会立即开始下载文件并放到内存中，如果文件过大，有可能导致内存不足。</span><br><span class="line"></span><br><span class="line"># 当把<span class="built_in">get</span>函数的stream参数设置成True时，它不会立即开始下载，</span><br><span class="line"># 使用iter_content或iter_lines遍历内容或访问内容属性时才开始下载</span><br><span class="line">r = requests.<span class="built_in">get</span>(url, stream=True)</span><br><span class="line">f = open(<span class="string">"file_path"</span>, <span class="string">"wb"</span>)</span><br><span class="line">start = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">if</span> chunk:</span><br><span class="line">        f.write(chunk)</span><br><span class="line">        f.<span class="built_in">flush</span>()</span><br><span class="line"># iter_content：一块一块的遍历要下载的内容</span><br><span class="line"># iter_lines：一行一行的遍历要下载的内容</span><br><span class="line"># 这两个函数下载大文件可以防止占用过多的内存，因为每次只下载小部分数据</span><br><span class="line">end = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="built_in">print</span> 'Finish <span class="keyword">in</span> ：', end - start</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 中在控制台传参数</title>
      <link href="/2017-11-06/Python%20%E4%B8%AD%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BC%A0%E5%8F%82%E6%95%B0/"/>
      <url>/2017-11-06/Python%20%E4%B8%AD%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BC%A0%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<ul><li><font color="red">根据控制台输入数字的参数判断数值大小</font></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">param = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    param = int(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> param <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Alert"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"The param is not set"</span></span><br><span class="line"><span class="keyword">elif</span> param &lt; <span class="number">-10</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"The param is small"</span></span><br><span class="line"><span class="keyword">elif</span> param &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"The param is big"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"The param is middle"</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sys.argv是一个系统List变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Python解释器在运行Python程序是将命令行参数传入sys.argv中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sys.argv中的第一个值（索引为0）是Python程序名，从第2个（索引为1）开始</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 的其他元素为字符串类型的控制台输入参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有输入参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> C:\Users\29485\Desktop   </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ python test.py         </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Alert                    </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The param is not <span class="built_in">set</span>     </span></span><br><span class="line">     </span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入较小的参数                    </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> C:\Users\29485\Desktop   </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ python test.py -18     </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The param is small       </span></span><br><span class="line">         </span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入中等值的参数                                    </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> C:\Users\29485\Desktop   </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $ python test.py 2       </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The param is middle</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 里的异常处理（下）</title>
      <link href="/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>在出现异常时正确地管理各种系统资源（如文件，锁和链接）通常是一个棘手的问题。<br>例如，引发的异常可能导致控制流跳过释放关键资源（如锁）的语句。</p><ul><li><font color="red">with 语句支持在由上下文管理器对象控制的运行时上下文中执行一系列语句</font> </li></ul><p>例如：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"debuglog"</span>,<span class="string">"a"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">"Debugging \n"</span>)</span><br><span class="line">     statements</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">"Done \n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当控制流离开with语句后面的代码块时，with语句将自动关闭已打开的文件。</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    # 关键部分</span><br><span class="line">    statements</span><br><span class="line">    # 关键部分结束</span><br><span class="line"></span><br><span class="line">#当控制流进入<span class="keyword">with</span>语句后面的代码块时自动请求一个锁，而在控制流离开时有自动释放这个锁</span><br></pre></td></tr></table></figure><ul><li><font color="red"> 断言 assert语句</font></li></ul><p>assert 语句可以在程序中引入调试代码。</p><p>assert 的一般格式为：<code>assert test [, msg]</code></p><p>其中test是一个表达式，其值应该为True或False。如果test求值为False，assert就会引发AssertionError异常并使用在assert中提供的可选信息msg，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_data</span><span class="params">(file,data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> file, <span class="string">"write_data : file not defind !"</span></span><br><span class="line"></span><br><span class="line">    ···</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 中实现一行输入多个值</title>
      <link href="/2017-11-06/Python%20%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A1%8C%E8%BE%93%E5%85%A5%E5%A4%9A%E4%B8%AA%E5%80%BC/"/>
      <url>/2017-11-06/Python%20%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A1%8C%E8%BE%93%E5%85%A5%E5%A4%9A%E4%B8%AA%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>Python 2 的 raw_input（）以及 Python 3 的 input（）获取的是整行的字符串。</p><p>那么对于一行输入多值，例如：<br>输入为一行，包括用空格分隔的三个整数，分别为 a、b、c</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法一:</span></span><br><span class="line"></span><br><span class="line"> a, b, c = <span class="keyword">map</span>(<span class="keyword">int</span>, raw_input(<span class="string">'请输入3个整数, 用空格分隔：'</span>).<span class="keyword">split</span>())  </span><br><span class="line"><span class="comment"># 如果是Python 3, 自行替换raw_input为input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n输入3个整数为：%s %s %s'</span>%(a, b, c)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">a</span>, b, c = raw_input(<span class="string">'请输入3个整数, 用空格分隔：'</span>).<span class="built_in">split</span>()</span><br><span class="line"></span><br><span class="line">print <span class="string">'\n输入3个整数为：%s %s %s'</span>%(<span class="keyword">a</span>, b, c)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方法三:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> a, b, c = (int(x) <span class="keyword">for</span> x <span class="keyword">in</span> raw_input(<span class="string">'请输入3个整数, 用空格分隔：'</span>).split())</span></span><br><span class="line"></span><br><span class="line">print '\n输入3个整数为：%s %s %s'%(a, b, c)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 里的异常处理（上）</title>
      <link href="/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>异常意味着出现错误，并且会中断程序的正常控制流。</p><ul><li><font color="red">使用 raise 语句可以<code>引发异常</code></font></li></ul><p>raise语句的一般格式：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> <span class="keyword">Exception</span>（[value]）</span><br><span class="line"><span class="keyword">Exception</span>是异常类型，而value是说明异常相关细节的可选值</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">raise</span> RuntimeError（<span class="symbol">'Unrecoverable</span> Error'）</span><br></pre></td></tr></table></figure></p><a id="more"></a><ul><li><p><font color="red">使用 try…except…语句可以<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例如：</span><br></pre></td></tr></table></figure></font></p><p>try:<br>  f=open(‘test’)<br>except IOError as e:<br>  print  ‘处理I/O错误’</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">出现异常时，解释器将停止执行 <span class="keyword">try</span> 代码块中的语句，并寻找可匹配该异常的 <span class="keyword">except</span> 子句。如果找到，控制权就会传递给 <span class="keyword">except</span> 子句中的第一条语句。执行完 <span class="keyword">except</span> 子句后，控制权就会传递给出现`<span class="keyword">try</span>...<span class="keyword">except</span>...`代码块之后的第一条语句。否则，异常将传递给<span class="keyword">try</span>语句所在的上一级代码块。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> 语句的可选修饰符<span class="keyword">as</span> <span class="keyword">var</span> 提供了一个变量名称。如果出现异常，就会在其中放置一个提供给 <span class="keyword">raise</span> 语句的异常类型的实例。</span><br></pre></td></tr></table></figure></li></ul><p>注意事项：</p><h1 id="在以前的版本-Python-2-6-使用下面的except语句，不推荐使用"><a href="#在以前的版本-Python-2-6-使用下面的except语句，不推荐使用" class="headerlink" title="在以前的版本(Python 2.6)使用下面的except语句，不推荐使用"></a>在以前的版本(Python 2.6)使用下面的except语句，不推荐使用</h1><p> except Exception , e:<br>    pass</p><h1 id="新的代码使用as-var语法："><a href="#新的代码使用as-var语法：" class="headerlink" title="新的代码使用as var语法："></a>新的代码使用as var语法：</h1><p> except Exception as e:<br>    pass<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">"red"</span>&gt;使用多条except子句指定多个异常处理代码块&lt;/<span class="keyword">font</span>&gt;</span><br></pre></td></tr></table></figure></p><p>try:<br>    do something<br>except IOError as e:</p><pre><code># 处理I/O错误</code></pre><p>except TypeError as e:</p><pre><code>#处理类型错误</code></pre><p>except NameError as e:</p><pre><code>#处理名称错误</code></pre><p>或者</p><p>try:<br>    do something<br>except (IOError,TypeError,NameError) as e:</p><pre><code># 处理I/O、类型或名称错误</code></pre><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">"red"</span>&gt;使用pass语句忽略异常，不做任何处理&lt;/<span class="keyword">font</span>&gt;</span><br></pre></td></tr></table></figure><p>try:<br>    do something<br>except IOError:<br>    pass<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">"red"</span>&gt;捕获除与程序退出相关异常之外的所有异常&lt;/<span class="keyword">font</span>&gt;</span><br></pre></td></tr></table></figure></p><p>try:<br>    do something<br>except Exception as e:<br>    error_log.write(“An error occur red: %s\n” %e)<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;<span class="keyword">font</span> <span class="keyword">color</span>=<span class="string">"red"</span>&gt;使用except语句不带任何异常类型，将会捕获所有异常&lt;/<span class="keyword">font</span>&gt;</span><br></pre></td></tr></table></figure></p><p>try:<br>    do something<br>except :<br>    error_log.write(“An error occur red\n”)<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;<span class="built_in">font</span> <span class="built_in">color</span>=<span class="string">"red"</span>&gt;try...except...<span class="keyword">else</span>  语句&lt;/<span class="built_in">font</span>&gt;</span><br></pre></td></tr></table></figure></p><p>#如果try代码块中的代码没有引发异常，就会执行else子句中的所有代码<br>try:<br>    f=open(‘test’,’r’)<br>except Exception, e:<br>    error_log.write(“Unable to open test : %s\n” % e)<br>else:<br>    data=f.read()<br>    f.close()<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;font color=<span class="string">"red"</span>&gt;<span class="keyword">try</span>.<span class="built_in">..except</span>.<span class="built_in">..finally</span> 语句&lt;/font&gt;</span><br></pre></td></tr></table></figure></p><p>finally子句不用与捕获，无论是否出现错误都会执行<br>try:<br>    pass<br>except IOError as e:<br>    raise e<br>finally:<br>    pass<br><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows 服务管理</title>
      <link href="/2017-11-06/Windows%20%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2017-11-06/Windows%20%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>Windows 下服务管理有多种方式</p><ul><li><p>在 cmd 命令提示符下输入 <code>net start</code> 、可以快速查看已启用的服务。</p></li><li><p>直接 <code>services.msc</code>可以打开服务窗口</p></li></ul><font color="red">利用 sc.exe（Service Control 的缩写）管理服务</font><p><strong>sc.exe 命令来查询、启动、停止，甚至删除服务</strong></p><p>命令行状态下、输入<code>sc</code>或者<code>sc help</code> 查看 sc 命令的使用帮助 </p><a id="more"></a><p>sc 命令的语法格式：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc <span class="symbol">&lt;server&gt;</span> [<span class="keyword">command</span>] [service name] <span class="symbol">&lt;option1&gt;</span> <span class="symbol">&lt;option2&gt;</span>...</span><br></pre></td></tr></table></figure></p><p>sc 命令使用例子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sc query</span><br><span class="line">查看所有服务的运行状态</span><br><span class="line"> </span><br><span class="line">sc query 服务名</span><br><span class="line">查看某个服务的运行状态 </span><br><span class="line"></span><br><span class="line">sc qc 服务名</span><br><span class="line">查看某个服务的配置信息 </span><br><span class="line"></span><br><span class="line">sc start 服务名</span><br><span class="line">启动服务 例如启动 apache2.2服务器，就写成 sc start apache2.2 </span><br><span class="line"></span><br><span class="line">sc stop 服务名</span><br><span class="line">停止服务 例如 sc stop apache2.2  </span><br><span class="line"></span><br><span class="line">sc delete 服务名</span><br><span class="line">删除服务 例如 sc delete apache2.2  </span><br><span class="line"></span><br><span class="line">sc query state= inactive（注意=有空格）</span><br><span class="line">查看未运行的服务</span><br><span class="line"></span><br><span class="line">sc<span class="built_in"> config </span>服务名 start= auto|demand|disabled</span><br><span class="line">修改服务启动类型 ：start 参数的值可以是 demand（手动）、disabled（禁用），auto（自动） </span><br><span class="line">例如 sc<span class="built_in"> config </span>apache2.2 start= demand 、将apache设置为手动启动 </span><br><span class="line">特别注意：start= 后面有一个空格</span><br></pre></td></tr></table></figure><p>使用提示:</p><ul><li><p>如果服务名称中包含有空格，记得在服务名称上加引号。例如 <code>sc stop &quot;my service&quot;</code></p></li><li><p><strong>服务名称</strong> 和 <strong>服务显示名称</strong> 是不一样的。sc 指令使用的是 <strong>服务名称</strong>。<br>通过 <strong>控制面板</strong> =&gt; <strong>系统和安全</strong> =&gt; <strong>管理工具</strong> =&gt; 打开 <strong>服务</strong>，我们看到服务的显示名称，双击打开某个服务可以看到真正的服务名字。</p></li><li><p><code>sc start</code>和 <code>sc stop</code>功能上类似于 <code>net start</code>和 <code>net stop</code>，但速度更快且能停止的服务更多。</p></li><li><p><code>sc delete</code> 命令的实质都是删除 <code>HKEY_LOCAL_MACHINE\ SYSTEM\ CurrentControlSet\ Services</code> 下的 <code>ServiceName</code>分支。所以你也可以用 <code>reg</code>命令删除名为<code>ServiceName</code>的服务：<code>reg delete HKLM\ SYSTEM\ CurrentControlSet\ Services\ ServiceName</code></p></li></ul>]]></content>
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 里的循环与迭代函数（下）</title>
      <link href="/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul><li><font color="red">zip( ) 和 izip( )函数</font></li></ul><p>当循环迭代两个以上的序列时，例如，写一个下面这样的循环，每次迭代获得不同序列中的元素：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf<span class="number">-8</span> -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">title</span> = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line">author = [<span class="string">'Jack'</span>, <span class="string">'Carl'</span>, <span class="string">'David'</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(<span class="keyword">title</span>) <span class="keyword">and</span> i &lt; len(author):</span><br><span class="line">    x = <span class="keyword">title</span>[i]  <span class="meta"># 获取title的一个元素</span></span><br><span class="line">    y = author[i]  <span class="meta"># 获取author的一个元素</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'第%d组title：%s,author：%s'</span> % (i+<span class="number">1</span>, x, y)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>　使用zip()函数可以简化这段代码，例如：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf<span class="number">-8</span> -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">title</span> = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line">author = [<span class="string">'Jack'</span>, <span class="string">'Carl'</span>, <span class="string">'David'</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y in zip(<span class="keyword">title</span>, author):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'第%d组title：%s,author：%s'</span> % (i + <span class="number">1</span>, x, y)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>　zip( s , t ) 将序列是 s 和 t 组合为一个元组序列 ( s[0] , t[0] )、( s[1] , t[1] )、( s[2] , t[2] )等，如果 s 和 t 的长度不等，则至用完长度最短的索引为止。使用zip( )函数时需要注意一点，即在Python 2 中，它会将的元素完全消耗尽，创建一个元组的列表。函数itertools.izip( )实现的效果与zip相同，但一次值生成一个元组，而不是创建一个元组列表。</p><ul><li><font color="red">break 语句</font></li></ul><p>使用break语句可从循环体中跳出来。例如下面代码的功能是从文件中读取文本行，直到遇到空的文本行为止：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">'test.txt'</span>, <span class="string">'r'</span>):</span><br><span class="line">    stripped = <span class="built_in">line</span>.strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stripped:</span><br><span class="line">        break    <span class="comment">#遇到一个空行，停止读取</span></span><br><span class="line">    print(stripped)</span><br></pre></td></tr></table></figure></p><ul><li><font color="red">continue 语句</font></li></ul><p>使用continue语句可以跳到循环的下一个迭代（跳过循环体中的余下代码）。例如，如下代码跳过一个文件中的所有空行：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">'test.txt'</span>,<span class="string">'r'</span>):</span><br><span class="line">    stripped=<span class="built_in">line</span>.strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stripped:</span><br><span class="line">        continue    <span class="comment">#跳过空行</span></span><br><span class="line">    print stripped</span><br></pre></td></tr></table></figure></p><hr><p>　break和continue语句仅应用于正在执行的最内层循环。如果需要跳出多层嵌套循环结构，可以使用异常。Python不提供 “goto” 语句。</p><ul><li><font color="red">else 语句</font></li></ul><p>在循环结构中也可以加入 else 语句，例如：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line"><span class="built_in">for</span> <span class="built_in">line</span> in <span class="built_in">open</span>(<span class="string">'test.txt'</span>, <span class="string">'r'</span>):</span><br><span class="line">    stripped = <span class="built_in">line</span>.strip()</span><br><span class="line">    <span class="built_in">if</span> <span class="keyword">not</span> stripped:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">print</span> stripped</span><br><span class="line"><span class="built_in">else</span>:</span><br><span class="line">    raise RuntimeError(<span class="string">'Missing selection separator'</span>)</span><br></pre></td></tr></table></figure></p><p>　else 语句只在循环运行完成后才会执行。但是，如果先一步使用break语句中止了循环，else 子句将被跳过。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 里的循环与迭代函数（上）</title>
      <link href="/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2017-11-06/Python%20%E9%87%8C%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>简单的使用for和while语句实现循环</p><ul><li><font color="red">while循环</font></li></ul><p>while 语句反复执行循环体中的语句，直到相关表达式求值为假。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> expression:</span><br><span class="line">    <span class="built_in">statements</span></span><br></pre></td></tr></table></figure></p><ul><li><font color="red">for循环</font></li></ul><p>for 语句迭代 s 中的所有元素，直到再无可用元素。for 语句适用于可支持迭代的对象(包括内置的序列类型，如列表，元组和字符串)，也支持实现迭代器协议的对象。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> n:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果对象 s 能以下面代码演示的方式使用，那它就支持迭代的。这段代码模拟了for 循环的实现:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">list</span>=(<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>)</span><br><span class="line">it =<span class="keyword">list</span>.__iter__()     <span class="comment">#获取list的迭代器</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> it.next()     <span class="comment">#获得下一项（在Python 3中需使用__next__）</span></span><br><span class="line">    except StopIteration:   <span class="comment">#不再有可用项</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><ul><li><font color="red">迭代变量</font></li></ul><p>在<code>for i in s</code> 语句中，变量i称为迭代变量。在循环的每次迭代中，它都会从s接受一个新值。迭代变量的作用域并非for语句私有。如果前面已经定义了一个相同名称的变量，它的值将被改写。另外，循环结束后迭代变量依然保留最后一个值。</p><ul><li><font color="red">多值迭代</font></li></ul><p>如果迭代中使用的元素是元素大小完全一致的序列，可以使用下面这样的语句把它们的值解包到单独的迭代变量中:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tuple_list = [(), (), ()]</span><br><span class="line">tuple_list[<span class="number">0</span>] = (<span class="string">'title0'</span>, <span class="string">'auhtor0'</span>, <span class="string">'content0'</span>)</span><br><span class="line">tuple_list[<span class="number">1</span>] = (<span class="string">'title1'</span>, <span class="string">'auhtor1'</span>, <span class="string">'content1'</span>)</span><br><span class="line">tuple_list[<span class="number">2</span>] = (<span class="string">'title2'</span>, <span class="string">'auhtor2'</span>, <span class="string">'content2'</span>)</span><br><span class="line"></span><br><span class="line">for x, y, z in tuple_list:</span><br><span class="line">    print x, y, z</span><br></pre></td></tr></table></figure></p><p>在这个例子中， s必须包含或能产生一些序列，每个序列包含3个元素。每次迭代时，会把相应序列的各个元素赋值给变量x,y,和z。s可以为任意类型的序列，包括列表，生成器和字符串。</p><ul><li><font color="red">enumerate()</font></li></ul><p>循环时，除了数据值之外，有时还需要跟踪数字索引，例如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">list</span> = (<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> x in <span class="keyword">list</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'第%d个元素:%s'</span> % (i, x)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>Python提供了一个内置函数 enumerate()，可以简化上面代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">list</span> = (<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>)</span><br><span class="line"><span class="keyword">for</span> i,x in enumerate(<span class="keyword">list</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'第%d个元素:%s'</span> % (i, x)</span><br></pre></td></tr></table></figure><p><strong>enumerate(s)创建了一个迭代器，其返回值就是一个元组的序列(0,s[0])，(1,s[1])(2,s[2])，(3,s[3])等。</strong></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 遍历字典几种方法</title>
      <link href="/2017-11-06/Python%20%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2017-11-06/Python%20%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul><li><strong>用for语句可以遍历取出字典中的key值，通过key值得到相对应的内容值</strong></li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">dict=&#123;<span class="string">"a"</span>:<span class="string">"Alice"</span>,<span class="string">"b"</span>:<span class="string">"Bruce"</span>,<span class="string">"J"</span>:<span class="string">"Jack"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 实例一：</span></span><br><span class="line"><span class="keyword">for</span> i in dict:</span><br><span class="line">    print <span class="string">"dict[%s]="</span> % i,dict[i]</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"><span class="meta">#dict[a]= Alice</span></span><br><span class="line"><span class="meta"># dict[J]= Jack</span></span><br><span class="line"><span class="meta"># dict[b]= Bruce</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 实例二：</span></span><br><span class="line"><span class="keyword">for</span> i in  dict.items():</span><br><span class="line">    print i</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"><span class="meta"># ('a', 'Alice')</span></span><br><span class="line"><span class="meta"># ('J', 'Jack')</span></span><br><span class="line"><span class="meta"># ('b', 'Bruce')</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 实例三：</span></span><br><span class="line"><span class="keyword">for</span> (k,v) in  dict.items():</span><br><span class="line">    print <span class="string">"dict[%s]="</span> % k,v</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"><span class="meta"># dict[a]= Alice</span></span><br><span class="line"><span class="meta"># dict[J]= Jack</span></span><br><span class="line"><span class="meta"># dict[b]= Bruce</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 实例四：</span></span><br><span class="line"><span class="keyword">for</span> k,v in dict.iteritems():</span><br><span class="line">        print <span class="string">"dict[%s]="</span> % k,v</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"><span class="meta"># dict[a]= Alice</span></span><br><span class="line"><span class="meta"># dict[J]= Jack</span></span><br><span class="line"><span class="meta"># dict[b]= Bruce</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 实例五：</span></span><br><span class="line"><span class="keyword">for</span> (k,v) in zip(dict.iterkeys(),dict.itervalues()):</span><br><span class="line">        print <span class="string">"dict[%s]="</span> % k,v</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"><span class="meta"># dict[a]= Alice</span></span><br><span class="line"><span class="meta"># dict[J]= Jack</span></span><br><span class="line"><span class="meta"># dict[b]= Bruce</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意：遍历中字典的值可以保证，但是顺序是不定的。如果要求顺序，可以提出关键字排序。</strong></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 中 is 和 == 的区别</title>
      <link href="/2017-11-06/Python%20%E4%B8%AD%20is%20%E5%92%8C%20==%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017-11-06/Python%20%E4%B8%AD%20is%20%E5%92%8C%20==%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<ul><li>Python中的对象包含三要素：<strong>id、type、value。</strong></li></ul><p><strong>id</strong>：用来唯一标识一个对象</p><p><strong>type</strong>：标识对象的类型</p><p><strong>value</strong>：是对象的值</p><ul><li><p><strong>is</strong> 比较的是两者是否是同一个对象，比较的是 id（内存地址） 是否相同</p></li><li><p><strong>==</strong> 比较的是两个对象的值是否相等，比较的是 value是否相同</p></li></ul><a id="more"></a><p>示例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'a'</span><span class="symbol">:<span class="string">'aaaa'</span></span>,<span class="string">'b'</span><span class="symbol">:<span class="string">'bbbb'</span></span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dd = d.copy()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dd</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'aaaa'</span>, <span class="string">'b'</span>: <span class="string">'bbbb'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dd is d</span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dd == d</span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 基础总结（下）</title>
      <link href="/2017-11-06/Python%20%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2017-11-06/Python%20%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul><li><font color="red">String字符串</font> </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> 字符串前加 'r'，表示禁用转义字符串，使用原生字符串</span><br><span class="line"></span><br><span class="line"> 内置函数：</span><br><span class="line"></span><br><span class="line"> count(str,beg=0,<span class="keyword">end</span>=<span class="keyword">len</span>(<span class="keyword">string</span>))       返回<span class="keyword">str</span>在<span class="keyword">string</span>里面出现的次数，可以用开始索引（beg）和结束索引（<span class="keyword">end</span>）指定搜索范围</span><br><span class="line"></span><br><span class="line"> <span class="keyword">decode</span>(<span class="keyword">encoding</span>=<span class="string">'UTF-8'</span>,<span class="keyword">errors</span>=<span class="string">'strict'</span>)       以<span class="keyword">encoding</span>指定的编码格式解码<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">encode</span>(<span class="keyword">encoding</span>=<span class="string">'UTF-8'</span>,<span class="keyword">errors</span>=<span class="string">'strict'</span>)       以<span class="keyword">encoding</span>指定的编码格式编码<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"> find(<span class="keyword">str</span>,beg=<span class="number">0</span>,<span class="keyword">end</span>=<span class="keyword">len</span>(<span class="keyword">string</span>))        检测<span class="keyword">str</span>是否包含在<span class="keyword">string</span>中，找到则返回索引值，找不到则返回<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">index</span>(<span class="keyword">str</span>,beg=<span class="number">0</span>,<span class="keyword">end</span>=<span class="keyword">len</span>(<span class="keyword">string</span>))       与find()类似，但是<span class="keyword">str</span>不在<span class="keyword">string</span>中，则报一个异常</span><br><span class="line"></span><br><span class="line"> islower/isupper()         如果字符串中的字符都是小/大写，则返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">replace</span>(str1,str2,<span class="keyword">num</span>=<span class="keyword">count</span>(str1)):把<span class="keyword">string</span>中的str1替换成str2,<span class="keyword">num</span>指定替换的最大次数</span><br><span class="line"></span><br><span class="line"> <span class="keyword">split</span>(<span class="keyword">str</span>=<span class="string">''</span>,<span class="keyword">num</span>=<span class="keyword">count</span>(<span class="keyword">str</span>))       以<span class="keyword">str</span>为分隔符切片<span class="keyword">string</span>，如果<span class="keyword">num</span>有指定的值，则仅分隔<span class="keyword">num</span>个字符串</span><br><span class="line"></span><br><span class="line"> strip([obj])       在<span class="keyword">string</span>上执行lstrip()和rstrip(),截掉<span class="keyword">string</span>左/右边的空格</span><br><span class="line"></span><br><span class="line"> title()             将字符串标题化，即所有单词都以大写开始，其余字母均为小写</span><br><span class="line"></span><br><span class="line">zfill(width)       返回长度为width的字符串，原字符串<span class="keyword">string</span>右对齐，前面填充<span class="number">0</span>，可以用于自动给数字前面补<span class="number">0</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><font color="red">List类型</font> </li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">内置函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">append</span><span class="params">(obj)</span></span>         在列表尾部添加一个对象</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">(obj)</span></span>          计算对象在列表中出现的次数</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">extend</span><span class="params">(seq)</span></span>         把序列seq的内容添加列表</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">index</span><span class="params">(obj,i=<span class="number">0</span>,j=len(list)</span></span>)      计算对象obj在列表中的索引位置</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">insert</span><span class="params">(index,obj)</span></span>   把对象插入列表index的指定位置</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pop</span><span class="params">(index=-<span class="number">1</span>)</span></span>       读取并删除index位置的对象，默认为最后一个对象</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove</span><span class="params">(obj)</span></span>         从列表中删除对象obj</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">()</span></span>           获得反向列表</span><br><span class="line"></span><br><span class="line">list.sort(func=None,key=None,reverse=False)         以指定的的方式排序列表中的成员</span><br></pre></td></tr></table></figure><ul><li><font color="red"> Dictionary类型</font></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">内置函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">clear</span><span class="params">()</span></span>             清除字典中所有(键，值)对</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">()</span></span>              复制字典的一个副本</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fromkeys</span><span class="params">(seq,val=None)</span></span>      用seq中的元素作为键创建字典，所有键的值都设为val,val默认为None</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get</span><span class="params">(key,default=None)</span></span>       读取字典中的键key，返回该键的值；如果找不到该键则返回default所设的值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">has_key</span><span class="params">(key)</span></span>        判断键key在字典中是否存在，如果存在则返回True，否则返回False</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">items</span><span class="params">()</span></span>         返回一个包含字典中（键，值）对元组的列表</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">keys</span><span class="params">()</span></span>          返回一个字典中所有键的列表</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">iteritems</span><span class="params">()</span></span>     返回对字典中所有（键，值）对的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">iterkeys</span><span class="params">()</span></span>      返回对字典中所有键的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">itervalues</span><span class="params">()</span></span>    返回对字典中所有值的迭代器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pop</span><span class="params">(key[,default])</span></span>      读取某键的值，并且从字典中删除该键的值。如果键key不存在且没有设置default，则引发KeyError异常</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setdefault</span><span class="params">(key,default=None)</span></span>        设置字典中键key的值为的default</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">update</span><span class="params">(dict)</span></span>        合并字典</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">values</span><span class="params">()</span></span>            返回一个包含字典中所有值的列表</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础总结（上）</title>
      <link href="/2017-11-06/Python%20%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2017-11-06/Python%20%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul><li><font color="red">操作符</font><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A / <span class="keyword">B </span>              除号：<span class="keyword">B不为零，整数相除仍为整数</span></span><br><span class="line"><span class="keyword">A </span>//<span class="keyword">B </span>              取整除符：结果为A除以<span class="keyword">B后的结果的整数部分</span></span><br><span class="line"><span class="keyword">A </span>% <span class="keyword">B </span>              取余：结果为A除以<span class="keyword">B后取余</span></span><br><span class="line"><span class="keyword">A </span>**<span class="keyword">B </span>              幂操作符：结果为A的<span class="keyword">B次方</span></span><br><span class="line"><span class="keyword">not </span>A               取反操作：只用于<span class="keyword">Boolean类型</span></span><br><span class="line"><span class="keyword">x </span>, y = y , x       交换运算符，无需用到中间变量</span><br></pre></td></tr></table></figure></li></ul><p>示例:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 5 / 2       <span class="comment"># 2 </span></span><br><span class="line">b = 5.0 / 2     <span class="comment"># 2.5 </span></span><br><span class="line">c = 5.0 // 2    <span class="comment"># 2</span></span><br><span class="line">d = 2 ** 3      <span class="comment"># 8</span></span><br><span class="line">e = 10 % 3      <span class="comment"># 1</span></span><br><span class="line">f = not True    <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><ul><li><font color="red">内置常用通用函数</font></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">cmp</span><span class="params">(A,B)</span></span>            比较两者大小，如果前者小则返回-<span class="number">1</span>，前者大则返回<span class="number">1</span>，相等则返回<span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">str</span><span class="params">(A)</span></span>              将参数转换为可显示的字符串       </span><br><span class="line"><span class="function"><span class="title">type</span><span class="params">(A)</span></span>             返回参数的类型对象</span><br><span class="line"><span class="function"><span class="title">bool</span><span class="params">(A)</span></span>             将参数转换为布尔类型</span><br><span class="line"><span class="function"><span class="title">int</span><span class="params">(A)</span></span>              将参数转换为整数类型，以十进制表达</span><br></pre></td></tr></table></figure><p>示例:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = cmp(12.32,43)   <span class="comment"># -1</span></span><br><span class="line">b = cmp(0,-2)       <span class="comment"># 1</span></span><br><span class="line">c = cmp(0x12,18)    <span class="comment"># 0</span></span><br><span class="line">d = str(0x12)       <span class="comment"># "18"</span></span><br><span class="line">e = type(4L)        <span class="comment"># &lt;type 'long'&gt;</span></span><br><span class="line">f = bool(<span class="string">"True"</span>)    <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><hr><ul><li><font color="red">数据类型特定函数</font><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="keyword">A</span>)              取绝对值</span><br><span class="line">coerce(<span class="keyword">A</span>,B)         将<span class="keyword">A</span>和B转换成一个类型，并生成一个元组</span><br><span class="line">divmod(<span class="keyword">A</span>,B)         除模操作：生成一个元组，形式为(<span class="keyword">A</span>/B,<span class="keyword">A</span>%B)</span><br><span class="line">pow(<span class="keyword">A</span>,B)            幂操作符：结果为<span class="keyword">A</span>的B次方</span><br><span class="line">round(<span class="keyword">A</span>,B)          返回参数的四舍五入结果</span><br></pre></td></tr></table></figure></li></ul><p>示例:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = abs(<span class="number">-3</span>)         # <span class="number">3</span></span><br><span class="line">b = coerce(<span class="number">24</span>,<span class="number">-4.5</span>) # (<span class="number">24.0</span>,<span class="number">-4.5</span>)</span><br><span class="line">c = divmod(<span class="number">5</span>,<span class="number">2</span>)     # (<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">d = round(<span class="number">5.7</span>)      # <span class="number">6</span></span><br><span class="line">e = pow(<span class="number">2</span>,<span class="number">3</span>)        # <span class="number">8</span></span><br></pre></td></tr></table></figure><ul><li><font color="red">序列运算符</font></li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A[<span class="keyword">index</span>]            获取序列中的第<span class="keyword">index</span>个元素；<span class="keyword">index</span>的取值从<span class="number">0</span>开始</span><br><span class="line">A[index1:index2]    切片操作，获取序列中从第index1到（index2<span class="number">-1</span>）的序列</span><br><span class="line">A <span class="keyword">in</span> B              判断序列B中是否有A,如果有则返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line">A <span class="keyword">not</span> <span class="keyword">in</span> B          判断序列B中是否有A,如果没有则返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line">A + B               链接A和B,生成新的序列并返回</span><br><span class="line">A * <span class="keyword">number</span>          将A重复<span class="keyword">number</span>次，生成新的序列并返回</span><br></pre></td></tr></table></figure><ul><li><font color="red">序列内置函数</font></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">enumerate</span><span class="params">(A)</span></span>        对序列A生成一个可枚举对象，对象中的每一元素是一个二位元组，元组内容为(index,item),即(索引号，序列元素)</span><br><span class="line"><span class="function"><span class="title">len</span><span class="params">(A)</span></span>              返回序列A的长度</span><br><span class="line"><span class="function"><span class="title">list</span><span class="params">(A)</span></span>             转换为List类型</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(A)</span></span>              A是一个序列，返回A中的最大元素</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(a,b,.....)</span></span>      返回所有参数中最大的元素</span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(A)</span></span>              A是一个序列，返回A中的最小元素</span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(a,b,.....)</span></span>      返回所有参数中最小的元素</span><br><span class="line"><span class="function"><span class="title">reversed</span><span class="params">(A)</span></span>         生成A的反向序列</span><br><span class="line"><span class="function"><span class="title">sorted</span><span class="params">(A,func=None,key=None,reverse=False)</span></span>       </span><br><span class="line">                    对A排序，排序规则按照参数func,key,reverse指定的规则进行</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(A,init=<span class="number">0</span>)</span></span>       对A中的元素求和</span><br><span class="line"><span class="function"><span class="title">tuple</span><span class="params">(A)</span></span>            转换为Tuple类型</span><br></pre></td></tr></table></figure><ul><li><font color="red">格式化字符串</font> </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">格式化表达式语法：</span><br><span class="line">fromat_string % string_to_convert</span><br><span class="line">fromat_string % (string_to_convert1 , string_to_convert2)</span><br><span class="line"></span><br><span class="line">fromat_string: 格式标记字符串（固定的内容和待替换的内容[格式化符号标明]）</span><br><span class="line">string_to_convert: 格式化的字符串</span><br><span class="line"></span><br><span class="line">常用格式化符号表：</span><br><span class="line"><span class="meta">%</span><span class="bash">s                  转为用str()函数表达的字符串</span></span><br><span class="line"><span class="meta">%</span><span class="bash">d or %i            转为有符号的十进制整数</span></span><br><span class="line"><span class="meta">%</span><span class="bash">%                  输出<span class="string">"%"</span></span></span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;<span class="built_in">print</span> <span class="string">'MM/DD/YY'</span> = %02d/%02d/%d %(2,1,95)    <span class="comment">#数字前补0</span></span></span><br><span class="line">MM/DD/YY = 02/01/95</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dir &amp;&amp; help &amp;&amp; __doc__ 查看 Python 帮助文档</title>
      <link href="/2017-11-06/dir%20&amp;&amp;%20help%20&amp;&amp;%20__doc__%20%E6%9F%A5%E7%9C%8B%20Python%20%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
      <url>/2017-11-06/dir%20&amp;&amp;%20help%20&amp;&amp;%20__doc__%20%E6%9F%A5%E7%9C%8B%20Python%20%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<ul><li><h6 id="dir-函数查看-对象的属性"><a href="#dir-函数查看-对象的属性" class="headerlink" title="dir 函数查看 对象的属性"></a>dir 函数查看 <code>对象的属性</code></h6></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以 list 类型为例</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; dir(list)</span><br><span class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>,</span><br><span class="line"><span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__iadd__'</span>, <span class="string">'__imul__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__iter__'</span>,</span><br><span class="line"> <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__rmul__'</span>, </span><br><span class="line"><span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'append'</span>, <span class="string">'clear'</span>, <span class="string">'copy'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, </span><br><span class="line"><span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><h6 id="doc-查看-对象的某个属性的帮助文档"><a href="#doc-查看-对象的某个属性的帮助文档" class="headerlink" title="__doc__ 查看 对象的某个属性的帮助文档"></a>__doc__ 查看 <code>对象的某个属性的帮助文档</code></h6></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看 <span class="keyword">list</span> 的 <span class="keyword">insert</span> 属性</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">print</span>(<span class="keyword">list</span>.<span class="keyword">insert</span>.__doc__)</span><br><span class="line">L.<span class="keyword">insert</span>(<span class="built_in">index</span>, object) -- <span class="keyword">insert</span> object before <span class="built_in">index</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li><h6 id="help-函数查看-对象的某个属性的帮助文档"><a href="#help-函数查看-对象的某个属性的帮助文档" class="headerlink" title="help 函数查看 对象的某个属性的帮助文档"></a>help 函数查看 <code>对象的某个属性的帮助文档</code></h6></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">help</span>(<span class="keyword">list</span>.<span class="keyword">insert</span>)</span><br><span class="line">Help <span class="keyword">on</span> method_descriptor:</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>(...)</span><br><span class="line">    L.<span class="keyword">insert</span>(<span class="built_in">index</span>, object) -- <span class="keyword">insert</span> object before <span class="built_in">index</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim 与外部进行粘贴和复制</title>
      <link href="/2017-11-05/Vim%20%E4%B8%8E%E5%A4%96%E9%83%A8%E8%BF%9B%E8%A1%8C%E7%B2%98%E8%B4%B4%E5%92%8C%E5%A4%8D%E5%88%B6/"/>
      <url>/2017-11-05/Vim%20%E4%B8%8E%E5%A4%96%E9%83%A8%E8%BF%9B%E8%A1%8C%E7%B2%98%E8%B4%B4%E5%92%8C%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>Vim 中的复制、删除的内容都会被存放到默认（未命名）寄存器中，之后可以通过粘贴操作读取默认寄存器中的内容。寄存器是完成这一过程的中转站，Vim 支持的寄存器非常多，其中常用的有 <code>a-zA-Z0-9+</code>。</p><p>其中：</p><ul><li><p><strong>0-9</strong>：表示数字寄存器，是 Vim 用来保存最近复制、删除等操作的内容，其中 0 号寄存器保存的是最近一次的操作内容。</p></li><li><p><strong>a-zA-Z</strong>：表示用户寄存器，Vim 不会读写这部分寄存器 </p></li><li><p><strong>“</strong>（单个双引号）：未命名的寄存器，是 Vim 的默认寄存器，例如删除、复制等操作的内容都会被保存到这里。</p></li><li><p><strong>+</strong>：剪切板寄存器，关联系统剪切板，保存在这个寄存器中的内容可以被系统其他程序访问，也可以通过这个寄存器访问其他程序保存到剪切板中的内容。</p><a id="more"></a></li></ul><p>如果想了解更多寄存器内容，可参见：<a href="http://vimdoc.sourceforge.net/htmldoc/change.html" target="_blank" rel="noopener">http://vimdoc.sourceforge.net/htmldoc/change.html</a></p><p><code>registers</code> 通过下面命令可以查看所有寄存器中的内容，也可以只查看指定寄存器的内容（将寄存器名称作为参数）</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:reg</span> [register_name]</span><br></pre></td></tr></table></figure><p>有了上面的基础知识后，要实现 <strong>将 Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？</strong>，只需要将内容复制到剪切板寄存器(+)中即可，其他程序便可以访问到了。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"+yy  <span class="comment">// 复制当前行到剪切板</span></span><br><span class="line">"+p   <span class="comment">// 将剪切板内容粘贴到光标后面</span></span><br><span class="line">"ayy  <span class="comment">// 复制当前行到寄存器 a</span></span><br><span class="line">"<span class="keyword">ap</span>   <span class="comment">// 将寄存器 a 中的内容粘贴到光标后面</span></span><br></pre></td></tr></table></figure><p>有12个粘贴板依次编号为：<strong>0、1、2、…、9、a、”、+</strong> </p><p>其中  <strong>+</strong> 号为系统粘贴板，<strong>“</strong> 为临时粘贴板。系统剪切板中的内容可在其他程序中使用。<strong>注意：</strong>复制 Vim 中的内容后，不要退出 、在外部程序中<code>Ctrl+v</code>，即可粘贴。上面的复制指令都可以配合剪切板进行操作。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"nyw 复制当前单词到 n 号剪切板（双引号开始） </span></span><br><span class="line"><span class="string">"np 粘贴 n 号剪切板内容到当前位置后 </span></span><br><span class="line"><span class="string">"+Y 复制当前行到系统剪切板</span></span><br><span class="line"><span class="string">"+ny 复制当前行加下面 n 行到系统剪切板</span></span><br><span class="line"><span class="string">"+p 粘贴系统剪切板内容到当前位置后</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>要实现外部文件与 vim 之间的粘帖和复制，ubuntu 需要安装 vim-gnome<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install vim-gnome</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Navicat 远程连接 Mysql</title>
      <link href="/2017-11-05/Navicat%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20mysql/"/>
      <url>/2017-11-05/Navicat%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20mysql/</url>
      <content type="html"><![CDATA[<p>先进入服务器的 mysql 修改权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'root'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure><p>这里设置的登录登录用户为 root，密码为：root 在执行下面的语句刷新权限：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><p>Mysql 命令行登录<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mysql</span> <span class="selector-tag">-h127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">-P3308</span> <span class="selector-tag">-uroot</span> <span class="selector-tag">-proot</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 函数式编程</title>
      <link href="/2017-11-04/Python%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2017-11-04/Python%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<font color="red">Python函数式编程之语法篇</font><p>（1）列表解析，将range(5)的每个元素进行平方：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_list = [item**<span class="number">2</span> for item in range(<span class="number">5</span>)]</span><br><span class="line">print(a_list)     # [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><p>（2）字典解析，将range(5)的每个元素进行平方并作为value，key为一个指示：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_dict = &#123;<span class="string">"%d^2"</span> % item: item**<span class="number">2</span> <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">5</span>)&#125;</span><br><span class="line">print(a_dict)    <span class="meta"># &#123;<span class="string">'3^2'</span>: 9, <span class="string">'2^2'</span>: 4, <span class="string">'1^2'</span>: 1, <span class="string">'0^2'</span>: 0, <span class="string">'4^2'</span>: 16&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>（3）生成器，和列表解析比较类似，区别在于它的结果是 <code>generator object</code>，不能直接打印，但可以进行迭代（使用 next 函数、放入 for 循环等）。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_generator = (<span class="name">item**2</span> for item in range(<span class="number">5</span>))</span><br><span class="line">print(<span class="name">a_generator</span>)    # &lt;generator object &lt;genexpr&gt; at <span class="number">0</span>x10e366570&gt;</span><br><span class="line">print(<span class="name">next</span>(<span class="name">a_generator</span>))    # <span class="number">0</span></span><br><span class="line">print(<span class="name">next</span>(<span class="name">a_generator</span>))    # <span class="number">1</span></span><br></pre></td></tr></table></figure><p>（4）<code>iter</code> 函数和 <code>next</code>函数：一个 list 类型不能使用 next 函数，需将其转化为 iterator 类型。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_list_generator = iter(<span class="name">a_list</span>)</span><br><span class="line">print(<span class="name">next</span>(<span class="name">a_list_generator</span>))    # <span class="number">0</span></span><br><span class="line">print(<span class="name">type</span>(<span class="name">a_list</span>), type(<span class="name">a_list_generator</span>))   </span><br><span class="line"># &lt;class 'list'&gt; &lt;class 'list_iterator'&gt;</span><br></pre></td></tr></table></figure><p>（5）<code>lambda</code>表达式，即定义一些比较简单的匿名函数，lambda表达式和 map、reduce、filter 等函数混合使用威力巨大。例如求x的y次方：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_func = lambda x, y: x**y  </span><br><span class="line">print(a_func(2, 3))    <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><font color="red">Python函数式编程之内置函数篇</font><p>（1）map 函数： Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">    <span class="built_in">return</span> x*x</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">输出结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>(<span class="built_in">abs</span>, <span class="built_in">range</span>(-<span class="number">4</span>, <span class="number">5</span>)))    # [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>(<span class="built_in">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">range</span>(<span class="number">5</span>)))    # [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>(<span class="built_in">lambda</span> x, y: x**y, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>), <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)))   # [<span class="number">1</span>, <span class="number">4</span>, <span class="number">27</span>, <span class="number">256</span>]</span><br></pre></td></tr></table></figure><p>（2）reduce 函数：接收的参数和 map()类似，一个函数 f，一个 list ，最后一个参数可选，为初始值。但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对 list 的每个元素反复调用函数f，并返回最终结果值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">reduce(f, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">结果为：<span class="number">101</span>   </span><br><span class="line">reduce(f, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], <span class="number">100</span>)</span><br><span class="line">结果为<span class="number">125</span>，因为第一轮计算是：计算初始值和第一个元素：f(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x+y, range(<span class="number">10</span>)))    <span class="comment"># 45</span></span><br><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x+y, range(<span class="number">10</span>), <span class="number">100</span>))    <span class="comment"># 145</span></span><br><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x+y, [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [<span class="number">0</span>]))    <span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><p>（3）filter 函数：接收一个函数 f 和一个 list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">然后，利用filter()过滤掉偶数：</span><br><span class="line"></span><br><span class="line">filter(is_odd, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">17</span>])</span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">17</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></span><br><span class="line">filter(is_not_empty, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br><span class="line">结果：[<span class="string">'test'</span>, <span class="string">'str'</span>, <span class="string">'END'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> math.sqrt(x) <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line"><span class="keyword">print</span> filter(is_sqr, range(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">print(filter(<span class="keyword">None</span>, range(<span class="number">-4</span>, <span class="number">5</span>)))    <span class="comment"># &lt;filter object at 0x10c096710&gt;</span></span><br><span class="line">print(filter(<span class="keyword">None</span>, range(<span class="number">-4</span>, <span class="number">5</span>)))    <span class="comment"># [-4, -3, -2, -1, 1, 2, 3, 4]</span></span><br><span class="line">print(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">0</span>, range(<span class="number">-4</span>, <span class="number">5</span>)))   <span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><p>（4）all、any 函数：比较简单，还是可以按照字面意思理解，即判定一个可迭代对象是否全为True或者有为True的。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">all</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]))    # False</span><br><span class="line">print(<span class="name">any</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]))    # True</span><br></pre></td></tr></table></figure><p>（5）enumerate 函数，如果你想迭代一个列表或者元组，又想知道当前迭代元素的index值，那么enumerate就能满足你的需求：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">index</span>, item in enumerate(range(<span class="number">5</span>)):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"%d: %d"</span> % (<span class="keyword">index</span>, item))    <span class="comment"># 0: 0 \n 1: 1 \n 2: 2 ......</span></span><br></pre></td></tr></table></figure></p><p>（6）zip函数，映射两个或多个可迭代对象，组成新的可迭代对象，直接看实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> zip([1, 2, 3], [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]):</span><br><span class="line">    <span class="built_in">print</span>(a, b)    <span class="comment"># 1 a \n 2 b \n 3 c</span></span><br><span class="line"></span><br><span class="line">a_dict = dict(zip([1, 2, 3], [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]))</span><br><span class="line"><span class="built_in">print</span>(a_dict)    <span class="comment"># &#123;1: 'a', 2: 'b', 3: 'c'&#125;</span></span><br></pre></td></tr></table></figure><p>（7）sorted 函数，可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实现倒序排序，只需要编写一个reversed_cmp函数：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="symbol">y:</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="symbol">y:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp)</span><br><span class="line">结果为：[<span class="number">36</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>随笔：</p><ul><li>dict.items()</li><li>issubclass()</li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 中的类的多态</title>
      <link href="/2017-11-04/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E5%A4%9A%E6%80%81/"/>
      <url>/2017-11-04/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E5%A4%9A%E6%80%81/</url>
      <content type="html"><![CDATA[<font color="red">多态</font><p>1、引用多态</p><ul><li>父类的引用可以指向本类的对象</li><li>父类的引用可以指向子类的对象</li></ul><p><strong>注意事项：</strong>子类的引用不可指向父类对象</p><p>例如：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类:<span class="type">Animal </span></span><br><span class="line"><span class="type"></span>子类:<span class="type">Dog</span></span><br><span class="line"><span class="type">Animal obj1</span>=<span class="keyword">new</span> <span class="type">Animal</span>();</span><br><span class="line">Animal obj1=<span class="keyword">new</span> <span class="type">Dog</span>();    这行就代表多态</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2、方法多态</p><ul><li>创建本类对象时，调用本类的方法</li><li>创建子类对象时，调用的方法为子类的重写方法或者继承的方法</li></ul><p>父类对象指向子类时：调用的方法为父类的方法，如果子类重写了父类的方法则调用的是子类重写的方法。<br>如果子类有自己独有的方法，此时父类指向子类的对象不能调用独有的方法。只有子类指向子类的对象才能调用此方法。法或者继承的方法</p><font color="red">引用类型的转换</font><ul><li>向上类型转换：也称自动类型转换，子类转换为父类。</li><li>向下类型转换：也称强制类型转换，父类转换为子类。</li></ul><p>强制类型转换时需注意父类类型的对象指向的是不是父类本身或者和自己指向的是同一类型，假如父类指向的是和自己不同类型的子类，此时将父类强制抓换为自己的类型则会报错。</p><p>用<code>insanceof</code>关键字可以判断父类是否和自己的类型相同。</p><font color="red">抽象类</font><p>1、语法定义：抽象类前使用<code>abstract</code>关键字修饰。<br>比如：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span> &#123; </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">grow</span>(<span class="params"></span>)</span>; <span class="comment">//注意抽象方法没有方法体以分号结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、应用：</p><ul><li>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。（只是约束子类必须有哪些方法，而并不关注子类如何去实现它）</li><li>从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。</li></ul><p>3、作用：限制规定子类必须实现某些方法，但不关注实现细节。</p><p>4、使用规则：</p><ul><li><code>abstract</code>定义抽象类</li><li><code>abstract</code>定义抽象方法，只有声明，不需要实现</li><li>包含抽象方法的类是抽象类</li><li>抽象类中可以包含普通的方法，也可以没有抽象方法</li><li>抽象类不能直接创建，可以定义引用变量</li></ul><font color="red">接口</font><p>1、接口的概念：接口可以理解为一种特殊的类，由全局常量和公共的抽象方法组成。类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。</p><p>2、接口的定义：使用<code>interface</code>关键字</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] abstract<span class="built_in"> interface </span>接口名 [extends 父接口1，父接口2<span class="built_in">..</span>.]</span><br><span class="line">&#123;</span><br><span class="line">    零个到多个常量定义<span class="built_in">..</span>.</span><br><span class="line">    零个到多个抽象方法的定义<span class="built_in">..</span>.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口就是用来被继承、被实现的，修饰符建议用 <code>public</code>。<br><strong>注意：</strong> </p><ul><li>接口中方法不能有方法体</li><li>不能用<code>private</code>和<code>protected</code>修饰接口。</li></ul><p>3、接口的属性是常量，即使定义时不添加 <code>public static final</code>修饰符，系统也会自动加上。接口中的方法只能是抽象方法，总是使用，即使定义时不添加<code>public abstract</code>修饰符，系统也会自动加上。</p><p>4、使用接口：<br>一个类可以实现一个或多个接口，实现接口使用<code>implements</code>关键字。java 中一个类只能继承一个父类，是不够灵活的，通过实现多个接口可以进行补充。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> <span class="title">类名</span> <span class="keyword">extends</span> <span class="title">父类</span> <span class="title">implements</span> <span class="title">接口1，接口2</span>...</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    类体部分<span class="comment">//如果继承了抽象类，需要实现继承的抽象方法；要实现接口中的抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要继承父类，继承父类必须在实现接口之前。</p><p>5、接口在使用过程中，还经常与匿名内部类配合使用。</p><p>匿名内部类就是没有名字的内部类，多用于关注实现而不关注实现类的名称。</p><p>语法格式：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Interface</span> i=<span class="keyword">new</span> <span class="keyword">Interface</span>()&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> method()&#123;</span><br><span class="line">      System.out.<span class="keyword">println</span>(<span class="string">"匿名内部类实现接口的方式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows 查看任务和进程</title>
      <link href="/2017-11-03/Windows%20%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2017-11-03/Windows%20%E6%9F%A5%E7%9C%8B%E4%BB%BB%E5%8A%A1%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<font color="red">tasklist</font><p>查看正在进行的任务列表<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">常用的命令：</span><br><span class="line">tasklist|findstr <span class="string">"chrome"</span></span><br><span class="line">tasklist.exe /FI <span class="string">"IMAGENAME eq chrome.exe"</span></span><br><span class="line">tasklist|findstr <span class="string">"&lt;PID号&gt;"</span></span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">/FI   <span class="built_in"> filter </span>          显示一系列符合筛选器</span><br><span class="line">                        指定条件的任务。</span><br><span class="line"></span><br><span class="line">筛选器名称      有效运算符           有效值</span><br><span class="line">-----------     ---------------           --------------------------</span><br><span class="line">STATUS          eq, ne                    RUNNING | SUSPENDED</span><br><span class="line">                                          <span class="keyword">NOT</span> RESPONDING | UNKNOWN</span><br><span class="line">IMAGENAME       eq, ne                    映像名称</span><br><span class="line">USERNAME        eq, ne                    用户名，格式为[域\]用户</span><br><span class="line">SERVICES        eq, ne                    服务名称</span><br></pre></td></tr></table></figure></p><a id="more"></a><font color="red">taskkill</font><p>终止指定的任务<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">常用的命令：</span><br><span class="line">taskkill /PID <span class="number">1132</span></span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">/FI   filter           应用筛选器以选择一组任务。</span><br><span class="line">                       允许使用 <span class="string">"*"</span>。例如，映像名称 <span class="keyword">eq</span> acme*</span><br><span class="line"></span><br><span class="line">/PID  processid        指定要终止的进程的 PID。</span><br><span class="line">                       使用 TaskList 取得 PID。</span><br><span class="line"></span><br><span class="line">/IM   imagename        指定要终止的进程的映像名称。通配符 <span class="string">'*'</span>可用来</span><br><span class="line">                       指定所有任务或映像名称。</span><br><span class="line"></span><br><span class="line">/T                     终止指定的进程和由它启用的子进程。</span><br><span class="line"></span><br><span class="line">筛选器:</span><br><span class="line">筛选器名      有效运算符                有效值</span><br><span class="line">STATUS        <span class="keyword">eq</span>, <span class="keyword">ne</span>                    RUNNING |                 </span><br><span class="line">                                        <span class="keyword">NOT</span> RESPONDING | UNKNOWN </span><br><span class="line"></span><br><span class="line">IMAGENAME     <span class="keyword">eq</span>, <span class="keyword">ne</span>                    映像名称    </span><br><span class="line"></span><br><span class="line">SERVICES      <span class="keyword">eq</span>, <span class="keyword">ne</span>                    服务名称   </span><br><span class="line"></span><br><span class="line">PID           <span class="keyword">eq</span>, <span class="keyword">ne</span>, <span class="keyword">gt</span>, <span class="keyword">lt</span>, <span class="keyword">ge</span>, <span class="keyword">le</span>    PID 值</span><br></pre></td></tr></table></figure></p><font color="red">netstat</font><p>查看网络端口</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常用的命令：</span><br><span class="line">netstat -ano</span><br><span class="line">netstat -p tcp</span><br><span class="line">netstat –ano|findstr "&lt;端口号&gt;"</span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">-<span class="ruby">a            显示所有连接和侦听端口。</span></span><br><span class="line"><span class="ruby">-n            以数字形式显示地址和端口号。</span></span><br><span class="line"><span class="ruby">-o            显示拥有的与每个连接关联的进程 ID。</span></span><br></pre></td></tr></table></figure><p>举例：查看455端口的使用进程ID节进程名称</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、netstat -ano</span><br><span class="line"><span class="number">2</span>、netstat -aon|findstr <span class="string">"445"</span></span><br><span class="line"><span class="number">3</span>、tasklist|findstr <span class="string">"445"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 中的类的继承</title>
      <link href="/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<font color="red">继承</font><p>1、继承的概念：继承是类和类的一种关系，是一种<code>is a</code>的关系。<br>   Java中的继承是单继承。<br>2、继承的好处：子类直接拥有父类所有的属性和方法（<code>private</code>修饰符无效）。<br>   实现代码复用。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">继承语法</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">子类名</span> <span class="keyword">extends</span> <span class="title">父类名</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><font color="red">方法的重写</font><p>1、方法的重写：如果子类对继承父类的方法不满意，可以重写父类继承的方法，当调用方法时会优先调用子类的方法。</p><p>2、语法规则：</p><ul><li>返回值类型 </li><li>方法名 </li><li>参数类型及个数、都要与父类继承的方法相同。</li></ul><font color="red">继承的初始化顺序</font><p>1、初始化父类再初始化子类</p><p>2、先执行初始化对象中属性，再执行构造方法中的初始化</p><p>当我们创建一个子类对象时，应先是创建父类的属性进行初始化，再执行父类的构造方法，然后再进行子类的属性初始化，最后再执行子类的构造方法。<br><img src="http://oy89aex8x.bkt.clouddn.com/extends.jpg" alt=""></p><font color="red">final 关键字</font><ul><li>修饰类，该类不允许被继承。</li><li>修饰方法，该方法不允许被覆盖（重写）。</li><li>修饰属性，该类的属性不会进行隐式的初始化，声明的时候就要赋值。或声明时不赋值，在构造方法中也可以赋值。这个被修饰的属性也是只能赋一次值，其他地方不能再修改。</li><li>修饰变量，该变量的值只能赋一次值，声明变量的时候就要赋值，即变为常量。</li></ul><font color="red">super 关键字</font><p>在对象内部使用，可以代表父类对象。</p><ul><li>访问父类属性：super.age</li><li>访问父类的方法：super.eat()</li></ul><p>super的应用：</p><ul><li>子类的构造过程中必须调用其父类的构造方法。<br>当创建子类对象时，其实它会自动地执行父类的构造方法并且创建父类对象，此时其实就隐式地使用了super关键字。</li><li>如果子类的构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法。</li><li>如果显式的调用构造方法，必须在子类的构造方法的第一行。super();</li><li>如果子类构造方法中既没有显式调用父类的构造方法，而父类又没有无参的构造方法，则编译出错。</li></ul><font color="red">Object类 </font><p>Object 类是所有类的父类，如果一个类没有使用<code>extends</code>关键字明确标识继承另外一个类，那么这个类默认继承Object类。</p><p>Object类中的方法，适合所有子类。</p><p>toString()方法</p><ul><li>在Object类里面定义toString()方法的是返回的对象的哈希code码（对象地址字符串） </li><li>如果直接输出对象名，就会执行toString()方法。例如：System.out.println(实例化对象名);</li><li>可以通过重写toString()方法输出对象的属性。</li></ul><p>equals() 方法</p><ul><li>比较的是对象的引用是否指向同一块内存地址。但一般情况下，是比较两个对象时比较他的值是否一致，所以要进行重写。</li><li>== ：比较对象时（也就是引用）也是比较是否指向同一块内存地址</li><li>getClass()得到一个 <strong>类对象</strong>，描述的代码信息。obj 指的是 <strong>类的对象</strong>、是类的数据信息，属性值。</li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 中的类的封装</title>
      <link href="/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<font color="red">封装</font><p>含义：将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。<br>好处：</p><ul><li>只能通过规定的方法访问数据；</li><li>隐藏类的实例细节，方便修改和实现。</li></ul><a id="more"></a><p>实现步骤：</p><ul><li>修改属性的可见性，设为<code>private</code>；</li><li>创建<code>getter/setter</code>方法，用于属性的读写；</li><li>在<code>getter/setter</code>方法中加入属性的控制语句，对属性的合法性进行判断。</li></ul><font color="red">包</font><p>包的作用：管理Java文件，解决同名文件冲突</p><p>定义包：package 包名 【必须放在Java源程序的第一行】</p><p>包名间可以使用 “.” 隔开</p><p>系统中的包：</p><ul><li><p>java.(功能).(类)</p></li><li><p>java.lang.(类) 包含Java语言基础的类</p></li><li><p>java.util.(类) 包含Java语言中各种工具类</p></li><li><p>java.io.(类)  包含输入，输出相关功能的类</p></li></ul><p>包的使用：</p><ul><li><p>可以通过使用import关键字，在某个文件使用其他文件中的类。</p></li><li><p>Java中，包的命名规范是全小写字母拼写</p></li><li><p>使用的时候不但可以加载某个包下的所有文件 eg：com.imooc.<em><br>也可以加载某个具体子包下的所有文件 eg:com.imooc.music.</em></p></li></ul><font color="red">访问修饰符</font><p>修饰属性和方法的访问范围<br><img src="http://oy89aex8x.bkt.clouddn.com/java.class.xiushi.png" alt=""></p><font color="red">this关键字</font><p>1、this关键字代表当前对象</p><ul><li>this.属性 操作当前对象的属性</li><li>this.方法 调用当前对象的方法</li></ul><p>2、封装对象的属性的时候，经常会使用this关键字。</p><p>（Eclipse 可通过菜单栏的（源），自动生成<code>getter、setter</code>方法。属性名经常会与参数名相同，为了区分属性和参数的概念，在属性前加this关键字，此时代表将一个参数的值赋给了当前对象的属性）</p><font color="red">内部类</font><p>内部类（ Inner Class ）就是定义在另外一个类里面的类。与之对应，包含内部类的类被称为外部类</p><p>内部类的主要作用如下：</p><ul><li><p>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</p></li><li><p>内部类的方法可以直接访问外部类的所有数据，包括私有的数据</p></li><li><p>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便</p></li></ul><p>内部类的种类：</p><ul><li>成员内部类</li><li>静态内部类</li><li>方法内部类</li><li>匿名内部类</li></ul><font color="red">成员内部类</font><p>内部类中最常见的就是成员内部类，也称为普通内部类。比如：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class01.jpg" alt=""><br>运行结果为：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class02.jpg" alt=""><br>从上面的代码中我们可以看到，成员内部类的使用方法：</p><p>1、 Inner 类定义在 Outer 类的内部，相当于 Outer 类的一个成员变量的位置，Inner 类可以使用任意访问控制符，如 public 、 protected 、 private 等</p><p>2、 Inner 类中定义的 test() 方法可以直接访问 Outer 类中的数据，而不受访问控制符的影响，如直接访问 Outer 类中的私有属性a</p><p>3、 定义了成员内部类后，必须使用外部类对象来创建内部类对象，而不能直接去 new 一个内部类对象，即：<strong>内部类 对象名 = 外部类对象.new 内部类()</strong>;</p><p>4、 编译上面的程序后，会发现产生了两个 .class 文件</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class03.jpg" alt=""></p><p>其中，第二个是外部类的 .class 文件，第一个是内部类的 .class 文件，即成员内部类的 .class 文件总是这样：外部类名$内部类名.class</p><p><strong>注意事项：</strong></p><p>1、 外部类是不能直接使用内部类的成员和方法滴</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class04.jpg" alt=""></p><p>可先创建内部类的对象，然后通过内部类的对象来访问其成员变量和方法。</p><p>2、 如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用 this 关键字。比如：<br><img src="http://oy89aex8x.bkt.clouddn.com/inner.class05.jpg" alt=""></p><p>运行结果：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class06.jpg" alt=""></p><font color="red">静态内部类 </font><p>静态内部类是 <code>static</code> 修饰的内部类，这种内部类的特点是：</p><p>1、 静态内部类不能直接访问外部类的非静态成员，但可以通过 <strong>new 外部类().成员</strong> 的方式访问 </p><p>2、 如果外部类的静态成员与内部类的成员名称相同，可通过 <strong>类名.静态成</strong> 访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过 <strong>成员名</strong> 直接调用外部类的静态成员</p><p>3、 创建静态内部类的对象时，不需要外部类的对象，可以直接创建 <strong>内部类 对象名= new 内部类();</strong>。比如：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class07.jpg" alt=""></p><p>运行结果 ：<br><img src="http://oy89aex8x.bkt.clouddn.com/inner.class08.jpg" alt=""></p><font color="red">方法内部类 </font><p>方法内部类就是内部类定义在外部类的方法中，方法内部类只在该方法的内部可见，即只在该方法内可以使用。比如：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/inner.class09.jpg" alt=""></p><p>注意事项：由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用访问控制符和 <code>static</code> 修饰符。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 中的类的变量与构造方法</title>
      <link href="/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8E%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%E7%B1%BB%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8E%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<font color="red"> 成员变量和局部变量</font><p>1、成员变量：在类中定义，用来描述对象将要有什么。<br>2、局部变量：在类的方法中定义，在方法中临时保存数据。</p><p>区别：<br>1、作用域不同。局部变量的作用域仅限于定义它的方法；成员变量的作用域在整个类内部都是可见的。<br>2、初始值不同：java 会给成员变量一个初始值；不会给局部变量初始值。<br>3、在同一个方法中，不允许有同名局部变量；在不同的方法中，可以有同名局部变量。<br>4、两类变量同名时，局部变量具有更高的优先级。</p><a id="more"></a><font color="red"> 构造方法</font><p>1、构造方法名必须和类名相同</p><p>2、构造方法不能有任何返回值（ void 也不行）</p><p>3、可以重载多个构造方法，但是参数必须不同，没有参数的构造方法是默认构造方法</p><p>4、构造方法属于系统调用（一般在 new 时调用），一般不允许程序员显示调用。</p><p>5、普通方法名一般不要和构造函数名一样，但是也可以写和构造函数名一样的普通方法，但是需要有返回值（和构造函数进行区分）</p><p>6、当没有指定构造方法时，系统会自动添加无参的构造方法。</p><p>7、当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法。</p><p>8、构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法。</p><p>9、构造方法不但可以给对象的属性赋值，还可以保证给对象的属性赋一个合理的值。<br><img src="http://oy89aex8x.bkt.clouddn.com/construction.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 中的 Static 使用</title>
      <link href="/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%20Static%20%E4%BD%BF%E7%94%A8/"/>
      <url>/2017-11-03/Java%20%E4%B8%AD%E7%9A%84%20Static%20%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<font color="red">静态变量</font><p>基于一个类创建多个该类的对象，每个对象都拥有自己的成员，互相独立。然而在某些时候，我们更希望该类所有的对象共享同一个成员。此时就是 static 大显身手的时候了！！</p><p>Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问、更推荐用类名访问。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static0.jpg" alt=""></p><a id="more"></a><font color="red">静态方法</font><p>使用 static 修饰方法，称为静态方法或类方法、比如：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static1.jpg" alt=""></p><p>1、 静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static2.jpg" alt=""></p><p>如果希望在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static3.jpg" alt=""></p><p>2、 在普通成员方法中，则可以直接访问同类的非静态变量和静态变量</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static4.jpg" alt=""></p><p>3、 静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static5.jpg" alt=""></p><font color="red">静态初始化块</font><p>通过初始化块进行数据赋值、比如：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static6.jpg" alt=""></p><p>在类的声明中，可以包含多个初始化块，当创建类的实例时，就会依次执行这些代码块。如果使用 static 修饰初始化块，就称为静态初始化块。</p><p><strong>需要特别注意：</strong>静态初始化块只在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。</p><p>比如：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static7.jpg" alt=""></p><p>运行结果：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/static8.jpg" alt=""></p><p>通过输出结果，我们可以看到，程序运行时静态初始化块最先被执行，然后执行普通初始化块，最后才执行构造方法。由于静态初始化块只在类加载时执行一次，所以当再次创建对象 hello2 时并未执行静态初始化块。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>超有趣的 Linux 命令</title>
      <link href="/2017-11-02/%E8%B6%85%E6%9C%89%E8%B6%A3%E7%9A%84Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2017-11-02/%E8%B6%85%E6%9C%89%E8%B6%A3%E7%9A%84Linux%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<font color="red">cmatrix</font><p>《黑客帝国》那种矩阵风格的动画效果<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment"># sudo apt-get install cmatrix </span></span><br><span class="line">~<span class="comment"># cmatrix</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/cmatrix.gif" alt=""><br><a id="more"></a></p><font color="red">oneko</font><p>桌面上出现一直喵星人，跟着你的鼠标跑，你不动了它就睡觉。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment"># sudo apt-get install oneko </span></span><br><span class="line">~<span class="comment"># oneko</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/oneko.gif" alt=""></p><font color="red">aafire</font><p>终端燃起一团火<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment">#sudo apt-get install libaa-bin </span></span><br><span class="line">~<span class="comment"># aafire</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/aafire.gif" alt=""></p><font color="red">toilet(厕所)</font><p>艺术字生成器、类似的命令还有：figlet 、banner<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment"># sudo apt-get install toilet </span></span><br><span class="line">~<span class="comment"># sudo apt-get install figlet</span></span><br><span class="line">~<span class="comment"># sudo apt-get install sysvbanner</span></span><br><span class="line">~<span class="comment"># toilet www.aqee.net </span></span><br><span class="line">~<span class="comment"># toilet -f mono12 -F metal www.aqee.net </span></span><br><span class="line">~<span class="comment"># toilet -f mono12 -F gay a girl</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/toilet.gif" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/figlet.png" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/toilet.png" alt=""></p><font color="red">sl (Steam Locomotive)蒸汽机</font><p>屏幕上隆隆的驶过一辆蒸汽 机火车<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~# sudo apt-get install sl </span><br><span class="line">~# sl</span><br><span class="line"></span><br><span class="line">命令有 -alFe几个选项，</span><br><span class="line">-<span class="ruby">a An accident seems to happen. You<span class="string">'ll feel pity for people who cry for help.</span></span></span><br><span class="line"><span class="ruby">-l shows little one.</span></span><br><span class="line"><span class="ruby">-F It flies.</span></span><br><span class="line"><span class="ruby">-e Allow interrupt by Ctrl+C.</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">恶作剧：</span></span><br><span class="line"><span class="ruby">~$alias ls = sl</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/sl.gif" alt=""></p><font color="red">6. fortune</font><p>输出一句话，有笑话，名言什么的 (还有唐诗宋词)<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~# sudo apt-<span class="builtin-name">get</span> install fortune</span><br><span class="line">~# sudo apt-<span class="builtin-name">get</span> install fortune-zh</span><br><span class="line">~# fortune</span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/fortune.png" alt=""></p><font color="red">7. Cowsay  </font>  <p>奶牛有话要说<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~<span class="meta"># sudo apt-get install cowsay </span></span><br><span class="line">~<span class="meta"># sudo apt-get install xcowsay </span></span><br><span class="line">~<span class="meta"># cowsay 你好，外刊IT评论网 </span></span><br><span class="line">~<span class="meta"># xcowsay 你好，外刊IT评论网 </span></span><br><span class="line"></span><br><span class="line">~<span class="meta"># cowsay -l  查看其它动物的名字，然后-f跟上动物名</span></span><br><span class="line">~<span class="meta"># cowsay -f tux <span class="meta-string">"坑爹啊"</span></span></span><br><span class="line">可以让cowsay说出fortune的内容，就像这样：</span><br><span class="line">~<span class="meta"># fortune | cowsay</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/Cowsay.gif" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/Cowsay2.png" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/Cowsay3.png" alt=""></p><font color="red">8. xeyes </font>  <p>在屏幕上出现一双眼睛，盯着你的鼠标指针<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment"># sudo apt-get install xeyes </span></span><br><span class="line">~<span class="comment"># xeyes</span></span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/xeyes.gif" alt=""></p><font color="red">9. moo</font><p>咩咩<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~# apt-<span class="builtin-name">get</span> moo</span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/moo.gif" alt=""></p><font color="red">10. cal</font>  <p>打印日历，不过这个是很奇葩的一个月</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~# cal <span class="number">9</span> <span class="number">1752</span></span><br></pre></td></tr></table></figure><p><img src="http://oy89aex8x.bkt.clouddn.com/cal.png" alt=""></p><font color="red">11. yes  </font><p>输出无穷无尽的字符、按<code>ctrl+c</code>结束，如</p><pre><code>~# yes 我很NB</code></pre>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> 奇淫技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim 常用命令</title>
      <link href="/2017-11-01/Vim%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2017-11-01/Vim%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><img src="http://oy89aex8x.bkt.clouddn.com/vim2.jpg" alt=""></p><a id="more"></a><h6 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a href="#0">目录</a></h6><ul><li><h6 id="游标移动"><a href="#游标移动" class="headerlink" title="游标移动"></a><a href="#1">游标移动</a></h6></li><li><h6 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a><a href="#2">插入模式</a></h6></li><li><h6 id="命令行模式下保存文档-amp-amp-退出vim"><a href="#命令行模式下保存文档-amp-amp-退出vim" class="headerlink" title="命令行模式下保存文档&amp;&amp;退出vim"></a><a href="#3">命令行模式下保存文档&amp;&amp;退出vim</a></h6></li><li><h6 id="普通模式下退出-vim-amp-amp-删除"><a href="#普通模式下退出-vim-amp-amp-删除" class="headerlink" title="普通模式下退出 vim &amp;&amp; 删除"></a><a href="#4">普通模式下退出 vim &amp;&amp; 删除</a></h6></li><li><h6 id="重复执行上次命令"><a href="#重复执行上次命令" class="headerlink" title="重复执行上次命令"></a><a href="#5">重复执行上次命令</a></h6></li><li><h6 id="复制、剪切及粘贴文本"><a href="#复制、剪切及粘贴文本" class="headerlink" title="复制、剪切及粘贴文本"></a><a href="#6">复制、剪切及粘贴文本</a></h6></li><li><h6 id="字符的替换及撤销-Undo操作"><a href="#字符的替换及撤销-Undo操作" class="headerlink" title="字符的替换及撤销(Undo操作)"></a><a href="#7">字符的替换及撤销(Undo操作)</a></h6></li><li><h6 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a><a href="#8">快速查找</a></h6></li><li><h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a href="#9">其他</a></h6></li></ul><font id="1" color="red">游标移动</font><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ESc     普通模式</span><br><span class="line"></span><br><span class="line">h       左</span><br><span class="line">l       右</span><br><span class="line">j       下</span><br><span class="line">k       上</span><br><span class="line">方向键  移动游标</span><br><span class="line"></span><br><span class="line">行间跳转:</span><br><span class="line">nG(n Shift+g)    游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:<span class="built_in">set</span> nu以显示行号)</span><br><span class="line">gg    游标移动到到第一行</span><br><span class="line">G(Shift+g)    到最后一行</span><br><span class="line">Ctrl+o     快速回到上一次(跳转前)光标所在位置</span><br><span class="line"></span><br><span class="line">行内跳转:</span><br><span class="line">普通模式下使用下列命令在行内按照单词为单位进行跳转</span><br><span class="line">w       到下一个单词的开头</span><br><span class="line">b       到前一个单词的开头</span><br><span class="line">ge      到前一个单词的结尾</span><br><span class="line">e       到当前单词的结尾</span><br><span class="line"><span class="number">0</span>或^    到行头</span><br><span class="line">$    到行尾</span><br><span class="line">f<span class="variable">&lt;字母&gt;</span>    向后搜索<span class="variable">&lt;字母&gt;</span>并跳转到第一个匹配的位置(非常实用)</span><br><span class="line">F<span class="variable">&lt;字母&gt;</span>    向前搜索<span class="variable">&lt;字母&gt;</span>并跳转到第一个匹配的位置</span><br><span class="line">t<span class="variable">&lt;字母&gt;</span>    向后搜索<span class="variable">&lt;字母&gt;</span>并跳转到第一个匹配位置之前的一个字母(不常用)</span><br><span class="line">T<span class="variable">&lt;字母&gt;</span>    向前搜索<span class="variable">&lt;字母&gt;</span>并跳转到第一个匹配位置之后的一个字母(不常用)</span><br></pre></td></tr></table></figure><font id="2" color="red">插入模式</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span>    在当前光标处进行编辑</span><br><span class="line">I    在行首插入</span><br><span class="line">A    在行末插入</span><br><span class="line"><span class="selector-tag">a</span>    在光标后插入编辑</span><br><span class="line">o    在当前行后插入一个新行</span><br><span class="line">O    在当前行前插入一个新行</span><br><span class="line">cc   替换从光标所在位置后到一个单词结尾的字符</span><br></pre></td></tr></table></figure><font id="3" color="red">命令行模式下保存文档 &amp;&amp; 退出 vim</font><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">从普通模式输入  :  进入命令行模式</span><br><span class="line"><span class="selector-pseudo">:q</span>                  退出</span><br><span class="line"><span class="selector-pseudo">:q</span>!                 强制退出，不保存</span><br><span class="line"><span class="selector-pseudo">:w</span> &lt;文件路径&gt;       另存为</span><br><span class="line"><span class="selector-pseudo">:wq</span>                 保存并退出</span><br><span class="line"><span class="selector-pseudo">:wq</span>!                强制保存并退出</span><br><span class="line"><span class="selector-pseudo">:saveas</span> &lt;文件路径&gt;  另存为</span><br><span class="line"><span class="selector-pseudo">:x</span>                  保存并退出</span><br></pre></td></tr></table></figure><font id="4" color="red">普通模式下退出 vim &amp;&amp; 删除</font><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">普通模式下输入Shift+zz即可保存退出vim</span><br><span class="line"></span><br><span class="line">x           删除游标所在的字符</span><br><span class="line">X           删除游标所在前一个字符</span><br><span class="line">Delete      同x</span><br><span class="line"><span class="built_in">dd</span>          删除整行</span><br><span class="line"><span class="built_in">dw</span>          删除一个字符（不适用中文）</span><br><span class="line">daw         删除一个单词</span><br><span class="line">D或d$       删除至行尾</span><br><span class="line">d^          删除至行首</span><br><span class="line"></span><br><span class="line">dG          删除到文档结尾处</span><br><span class="line">d1G         删至文档首部</span><br><span class="line"></span><br><span class="line">除此之外，可以在命令之前加上数字，表示一次删除多行，如：</span><br><span class="line">2<span class="built_in">dd</span>表示一次删除<span class="number">2</span>行</span><br></pre></td></tr></table></figure><font id="5" color="red">重复执行上次命令</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在普通模式下  .(小数点)   表示重复上一次的命令操作</span><br><span class="line">例如：</span><br><span class="line">普通模式下输入 x，删除第一个字符，输入 .(小数点) 会再次删除一个字符，除此之外也可以重复 <span class="selector-tag">dd</span> 的删除操作</span><br><span class="line"></span><br><span class="line">执行指定次数相同的命令</span><br><span class="line">进入普通模式输入N&lt;command&gt;，N表示重复后面的次数，</span><br><span class="line"><span class="number">10</span>x     删除<span class="number">10</span>个连续字符</span><br><span class="line"><span class="number">3</span>dd     删除<span class="number">3</span>行文本</span><br><span class="line"></span><br><span class="line">在普通模式下</span><br><span class="line">dw或者daw(delete <span class="selector-tag">a</span> word)   删除一个单词</span><br><span class="line"><span class="function"><span class="title">dnw</span><span class="params">(n替换为相应数字)</span></span>       删除n个单词</span><br></pre></td></tr></table></figure><font id="6" color="red">复制、剪切及粘贴文本</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">普通模式中使用y复制</span><br><span class="line">yy      复制游标所在的整行（<span class="number">3</span>yy表示复制<span class="number">3</span>行）</span><br><span class="line">y^      复制至行首，或y0。不含光标所在处字符。</span><br><span class="line">y$      复制至行尾。含光标所在处字符。</span><br><span class="line">yw      复制一个单词。</span><br><span class="line">y2w     复制两个单词。</span><br><span class="line">yG      复制至文本末。</span><br><span class="line">y1G     复制至文本开头。</span><br><span class="line"></span><br><span class="line">普通模式中使用p粘贴</span><br><span class="line"><span class="function"><span class="title">p</span><span class="params">(小写)</span></span>       代表粘贴至光标后（下）</span><br><span class="line"><span class="function"><span class="title">P</span><span class="params">(大写)</span></span>       代表粘贴至光标前（上）</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">每次dd删除文档内容后，便可以使用p来粘贴，也这一点可以让实现一个很爽快的功能——交换上下行：</span><br><span class="line">ddp      实现了快速交换光标所在行与它下面的行</span><br></pre></td></tr></table></figure><font id="7" color="red">字符的替换及撤销(Undo操作)</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">替换和Undo命令都是针对普通模式下的操作</span><br><span class="line"></span><br><span class="line">r+&lt;待替换字母&gt;        将游标所在字母替换为指定字母</span><br><span class="line">R                     连续替换，直到按下Esc</span><br><span class="line">cc                    替换整行，即删除游标所在行，并进入插入模式</span><br><span class="line">cw                    替换一个单词，即删除一个单词，并进入插入模式</span><br><span class="line"><span class="function"><span class="title">C</span><span class="params">(大写)</span></span>               替换游标以后至行末</span><br><span class="line">~                     反转游标所在字母大小写</span><br><span class="line">u&#123;n&#125;                  撤销一次或n次操作</span><br><span class="line"><span class="function"><span class="title">U</span><span class="params">(大写)</span></span>               撤销当前行的所有修改</span><br><span class="line">Ctrl+r                redo，即撤销undo的操作</span><br></pre></td></tr></table></figure><font id="8" color="red">快速查找</font><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">普通模式下输入  /  然后键入需要查找的字符串 </span><br><span class="line">按回车后就会进行查找。</span><br><span class="line"></span><br><span class="line">？与/功能相同，只不过？是向上而/是向下查找。</span><br><span class="line"><span class="built_in">n</span>表示继续查找</span><br><span class="line"><span class="built_in">N</span>反向查找</span><br></pre></td></tr></table></figure><font id="9" color="red">其他</font><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">创建加密文档</span><br><span class="line">$ vim -x file1</span><br><span class="line">输入您的密码、确认密码</span><br><span class="line">下一次打开时，vim就会要求你输入密码</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> nu（显示行数），</span><br><span class="line">设定值退出vim后不会保存。要永久保存配置需要修改vim配置文件/etc/vim/vimrc</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> autoindent(ai)              设置自动缩进</span><br><span class="line"><span class="builtin-name">set</span> autowrite(aw)               设置自动存档，默认未打开</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">background</span>=dark[light]，    设置背景风格</span><br><span class="line"><span class="builtin-name">set</span> backup(bk)                  设置自动备份，默认未打开</span><br><span class="line"><span class="builtin-name">set</span> cindent(cin)                设置C语言风格缩进</span><br><span class="line"></span><br><span class="line">复制多行：</span><br><span class="line">将光标移动到要复制的文本开始的地方，按v进入可视模式。</span><br><span class="line">将光标移动到要复制的文本的结束的地方，按y复制。此时vim会自动将光标定位到选中文本的开始的地方，并退出可视模式。按p粘贴。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim 打开文件显示行号</title>
      <link href="/2017-11-01/Vim%20%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E8%A1%8C%E5%8F%B7/"/>
      <url>/2017-11-01/Vim%20%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E8%A1%8C%E5%8F%B7/</url>
      <content type="html"><![CDATA[<p>在 vim 里执行(在普通模式下直接按冒号，并输入下面的命令)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>回车后就可以显示行号了，但重启 vim 后又会恢复默认的设置。</p><p>要想每次进入 vim 都显示行号就需要配置 vimrc 文件。按如下方法进行：</p><p>先切换到超级管理员</p><p>跳转到vim文件中<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/vim/</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>然后</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vi vimrc</span></span><br></pre></td></tr></table></figure><p>最后一行添加</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>退出插入模式并存盘退出。</p><p>以后再打开 vim 就会每次显示行号了。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis 的数据结构操作</title>
      <link href="/2017-10-31/Redis%20%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2017-10-31/Redis%20%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<font color="red">Redis 的数据结构之字符串</font><ul><li>get [key] 获取</li><li>set [key] [value] 设置</li><li>getset [key] [value] 先获取后设置</li><li>del [key] 删除</li><li>incr <a href="int">key</a> 值加一；若无key、创建并设置初值为0、再加一</li><li>decr <a href="int">key</a> 值减一；若无key、创建并设置初值为0、再减一</li><li>incrby <a href="int">key</a> [value]  值加value；若无key、创建并设置初值为0、再加value</li><li>decrby <a href="int">key</a> [value]  值减value；若无key、创建并设置初值为0、再减value</li><li>append [key] [value]     key[value]后追加字符串，若无key、创建并设置初值value<a id="more"></a></li></ul><font color="red">Redis 的数据结构之哈希</font><ul><li>hset  [hashname] [key] [value] 设置单值</li><li>hmset [hashname] [key1] [value1] [key1] [value1]….. 设置多值</li><li>hget  [hashname] [key] 获取单值</li><li>hmget  [hashname] [key1] [key2] 获取多值</li><li>hgetall [hashname] 获取所有值</li><li>hdel    [hashname] [key1] [key2]…. 删除多值</li><li>del     [hashname]  删除所有值 </li><li>hincrby   [hashname] [key] [value]  值增加</li><li>hexists   [hashname]  [key]  判断字段是否存在  1，存在  0，不存在</li><li>hlen   [hashname]  获取有几个字段</li><li>hkeys   [hashname]  获取所有字段</li><li>hvals    [hashname]  获取所有字段的值</li></ul><font color="red">Redis 的数据结构之list</font><ul><li>lpush   [listname] [value1] [value2]….列表左端加入值</li><li>lpushx   [listname] [value1] [value2]….列表[listname]存在、则在左端加入值</li><li>rpush   [listname] [value1] [value2]….列表右端加入值</li><li>rpushx   [listname] [value1] [value2]….列表[listname]存在、则在右端加入值</li><li>lrange  [listname] [start]  [stop]  获取区间内的值</li><li>lpop  [listname] 弹出最左端值</li><li>rpop  [listname] 弹出最右端值</li><li>llen [listname] 获取列表长度</li><li>lrem [listname] [count] [value] 删除count个指定值、count=0删除所有，count&gt;0从左至右删除count个值，count&lt;0从右至左删除count个值</li><li>lset [listname] [index] [value] 设置相应index的值 0：第一个，-1：最后一个</li><li>linsert [listname] [before/after] [keyvalue] [value] 在第一个[keyvalue]的[之前/之后]插入[value]</li><li>rpoplpush [listname1] [listname2] 将[listname1]最右端的值弹出压入[listname2]最左端 </li></ul><font color="red">Redis 的数据结构之set</font><ul><li>sadd [setname] [value1][value2].. 添加值、从左端添加</li><li>srem [setname] [value1][value2].. 删除值</li><li>smember  [setname] 查看set集合</li><li>sismember [setname] [value] 判断值是否存在 返回1存在；0不存在</li><li>sdiff [setname1] [setname2] 差集运算，[setname1]多余的、注意顺序</li><li>sinter [setname1] [setname2] 交集运算</li><li>sunion [setname1]  [setname2] 合集运算</li><li>scard [setname]集合长度</li><li>srandmember  [setname] [count]随机生成集合中的count个值,默认1个</li><li>sdiffstore [setname] [setname1] [setname2]  差集存入[setanme]</li><li>sinterstore [setname][setname1] [setname2]  交集存入[setanme]  </li><li>sinterstore [setname]  [setname1] [setname2]  并集存入[setanme] </li></ul><font color="red">Redis 的数据结构之sorted-set</font><ul><li>zadd [sortname] [score1][value1][score2][value2] 添加元素</li><li>zrem [sortname] [value] 删除</li><li>zscore [sortname]  [value] 显示value的分数</li><li>zcard [sortname] 查询长度</li><li>zrange [sorename] [start] [stop] [witchscores] 查询区间内的值、是否返回分数 从小到大</li><li>zrange [sorename] [start] [stop] [witchscores] 查询区间内的值、是否返回分数 从大到小</li><li>zrangebyscore [sorename] [scorestart] [scorestop] [witchscores] limit [start][count]查询分数区间内的值、是否返回分数 、从大到小、从[start]返回[count]个值</li><li>zremrangebyrank  [sortname]  [start] [stop] 按照排名删除</li><li>zremrangebyscore [sortname]  [Scorestart] [Scorestop] 按照分数排名删除</li><li>zincrby [sortname] [score] [keyvalue] 将相应的分数加[score]</li><li>zcount [sortname] [score1] [score2] 分数区间内计数</li></ul>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 安装 Redis</title>
      <link href="/2017-10-31/Linux%20%E5%AE%89%E8%A3%85%20redis/"/>
      <url>/2017-10-31/Linux%20%E5%AE%89%E8%A3%85%20redis/</url>
      <content type="html"><![CDATA[<p><font color="red">安装准备：</font><br>（1）VMware Workation虚拟机<br>（2）Linux（CentOS）系统<br>（3）Xshell<br><a id="more"></a></p><p><font color="red">安装过程：</font></p><ul><li><p>安装编译器：<code>yum install gcc-c++</code></p></li><li><p>下载 <code>Redis</code> 源码并上传到服务器 <a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p></li><li><p>解压 <code>Redis</code> 压缩包：<code>tar -zxvf *redis*</code></p></li><li><p>进入 <code>Redis</code> 目录进行编译：<code>make</code></p></li><li><p>安装 <code>Redis</code>：<code>make PREFIX=/user/local/redis install</code></p></li><li><p>将 <code>redis.conf</code>拷贝到 <code>Redis</code>安装目录：<code>cp redis.conf /user/local/redis</code></p></li><li><p>进入安装目录，更改<code>redis.conf</code>文件：<code>vim redis.conf</code>–&gt; <code>daemonize no</code> 改为 <code>yes</code></p></li><li><p>启动 <code>redis</code>后端模式：<code>./bin/redis-server ./redis.conf</code></p></li></ul><hr><ol><li><p>使用 <code>FileZilla</code>工具进行文件上传</p></li><li><p>使用 <code>ps -ef  | grep -i redis</code>查看服务是否启动</p></li><li><p>使用 <code>./bin/redis-cli shutdown</code> 或者 <code>kill -9 PID</code>停止服务 </p></li><li><p>Java 使用 <code>jedis</code>链接远程 远程 <code>redis</code>需要在 <code>redis.conf</code>添加 bind <code>167.88.179.35</code>（本机IP）</p></li></ol>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQLmap 注入文档</title>
      <link href="/2017-10-31/SQLmap%20%E6%B3%A8%E5%85%A5%E6%96%87%E6%A1%A3/"/>
      <url>/2017-10-31/SQLmap%20%E6%B3%A8%E5%85%A5%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<font color="red">Options（选项）</font>：<br><br>- -h, -–help 显示此帮助消息并退出<br>- -hh     显示更多帮助信息并退出<br>- –version 显示程序的版本号并退出<br>- -v VERBOSE 详细级别：0-6（默认为1）<br><br><a id="more"></a><br><font color="red">Target（目标）：以下至少需要设置其中一个选项，设置目标URL。</font><ul><li>-d DIRECT 直接连接到数据库。</li><li>-u URL, –url=URL 目标URL。</li><li>-l LIST 从Burp或WebScarab代理的日志中解析目标。</li><li>-r REQUESTFILE 从一个文件中载入HTTP请求。</li><li>-g GOOGLEDORK 处理Google dork的结果作为目标URL。</li><li>-c CONFIGFILE 从INI配置文件中加载选项。</li></ul><font color="red">Request（请求）：这些选项可以用来指定如何连接到目标URL。</font><ul><li>-–data=DATA 通过POST发送的数据字符串</li><li>-–cookie=COOKIE HTTP Cookie头</li><li>-–cookie-urlencode URL 编码生成的cookie注入</li><li>–-drop-set-cookie 忽略响应的Set – Cookie头信息</li><li>–-user-agent=AGENT 指定 HTTP User – Agent头</li><li>-–random-agent 使用随机选定的HTTP User – Agent头</li><li>-–referer=REFERER 指定 HTTP Referer头</li><li>-–headers=HEADERS 换行分开，加入其他的HTTP头</li><li>-–auth-type=ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)</li><li>-–auth-cred=ACRED HTTP身份验证凭据（用户名:密码）</li><li>-–auth-cert=ACERT HTTP认证证书（key_file，cert_file）</li><li>-–proxy=PROXY 使用HTTP代理连接到目标URL</li><li>-–proxy-cred=PCRED HTTP代理身份验证凭据（用户名：密码）</li><li>-–ignore-proxy 忽略系统默认的HTTP代理</li><li>-–delay=DELAY 在每个HTTP请求之间的延迟时间，单位为秒</li><li>-–timeout=TIMEOUT 等待连接超时的时间（默认为30秒）</li><li>-–retries=RETRIES 连接超时后重新连接的时间（默认3）</li><li>-–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式</li><li>-–safe-url=SAFURL 在测试过程中经常访问的url地址</li><li>-–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的URL</li></ul><font color="red">Optimization（优化）：这些选项可用于优化SqlMap的性能。</font><ul><li>-o 开启所有优化开关</li><li>–predict-output 预测常见的查询输出</li><li>–keep-alive 使用持久的HTTP（S）连接</li><li>–null-connection 从没有实际的HTTP响应体中检索页面长度</li><li>–threads=THREADS 最大的HTTP（S）请求并发量（默认为1）</li></ul><font color="red">Injection（注入）：这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</font><ul><li>–p TESTPARAMETER 可测试的参数（S）</li><li>–dbms=DBMS 强制后端的DBMS为此值</li><li>–os=OS 强制后端的DBMS操作系统为这个值</li><li>–prefix=PREFIX 注入payload字符串前缀</li><li>–suffix=SUFFIX 注入payload字符串后缀</li><li>–tamper=TAMPER 使用给定的脚本（S）篡改注入数据</li></ul><font color="red">Detection（检测）：这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</font><ul><li>–level=LEVEL 执行测试的等级（1-5，默认为1）</li><li>–risk=RISK 执行测试的风险（0-3，默认为1）</li><li>–string=STRING 查询时有效时在页面匹配字符串</li><li>–regexp=REGEXP 查询时有效时在页面匹配正则表达式</li><li>–text-only 仅基于在文本内容比较网页</li></ul><font color="red">Techniques（技巧）：这些选项可用于调整具体的SQL注入测试。</font><ul><li>–technique=TECH SQL注入技术测试（默认BEUST）</li><li>–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）</li><li>–union-cols=UCOLS 定列范围用于测试UNION查询注入</li><li>–union-char=UCHAR 用于暴力猜解列数的字符</li></ul><font color="red">Fingerprint（指纹）：</font><ul><li>-f, –fingerprint 执行检查广泛的DBMS版本指纹</li></ul><font color="red">Enumeration（枚举）：这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。</font><ul><li>–b, –banner 检索数据库管理系统的标识</li><li>–current-user 检索数据库管理系统当前用户</li><li>–current-db 检索数据库管理系统当前数据库</li><li>–is-dba 检测DBMS当前用户是否DBA</li><li>–users 枚举数据库管理系统用户</li><li>–passwords 枚举数据库管理系统用户密码哈希</li><li>–privileges 枚举数据库管理系统用户的权限</li><li>-–roles 枚举数据库管理系统用户的角色</li><li>-–dbs 枚举数据库管理系统中的数据库名称</li><li>-–tables 枚举的数据库中的表名称</li><li>-–columns 枚举DBMS数据库表列</li><li>-–dump 转储数据库中的表数据</li><li>-–dump-all 转储所有的数据库表中的数据</li><li>-–search 搜索列（S），表（S）和/或数据库名称（S）</li><li>-D DB 指定进行枚举的数据库名</li><li>-T TBL 要指定操作的数据库表名称</li><li>-C COL 要进行枚举的数据库列</li><li>-U USER 用来进行枚举的数据库用户</li><li>–exclude-sysdbs 枚举表时排除系统数据库</li><li>–start=LIMITSTART 第一个查询输出进入检索</li><li>–stop=LIMITSTOP 最后查询的输出进入检索</li><li>–first=FIRSTCHAR 第一个查询输出字的字符检索</li><li>–last=LASTCHAR 最后查询的输出字字符检索</li><li>–sql-query=QUERY 要执行的SQL语句</li><li>–sql-shell 提示交互式SQL的shell</li></ul><font color="red">Brute force（蛮力）：这些选项可以被用来运行蛮力检查。</font><ul><li>–common-tables 检查存在共同表</li><li>–common-columns 检查存在共同列</li></ul><font color="red">User-defined function injection（用户自定义函数注入）：这些选项可以用来创建用户自定义函数。</font><ul><li>–udf-inject 注入用户自定义函数</li><li>–shared-lib=SHLIB 共享库的本地路径</li></ul><font color="red">File system access（访问文件系统）：这些选项可以被用来访问后端数据库管理系统的底层文件系统。</font><ul><li>–file-read=RFILE 从后端的数据库管理系统文件系统读取文件</li><li>–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件</li><li>–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径</li></ul><font color="red">Operating system access（操作系统访问）：这些选项可以用于访问后端数据库管理系统的底层操作系统。</font><ul><li>–os-cmd=OSCMD 执行操作系统命令</li><li>–os-shell 交互式的操作系统的shell</li><li>–os-pwn 获取一个OOB shell，meterpreter或VNC</li><li>–os-smbrelay 一键获取一个OOB shell，meterpreter或VNC</li><li>–os-bof 存储过程缓冲区溢出利用</li><li>–priv-esc 数据库进程用户权限提升</li><li>–msf-path=MSFPATH Metasploit Framework本地的安装路径</li><li>–tmp-path=TMPPATH 远程临时文件目录的绝对路径</li></ul><font color="red">Windows注册表访问：这些选项可以被用来访问后端数据库管理系统Windows注册表。</font><ul><li>–reg-read 读一个Windows注册表项值</li><li>–reg-add 写一个Windows注册表项值数据</li><li>–reg-del 删除Windows注册表键值</li><li>–reg-key=REGKEY Windows注册表键</li><li>–reg-value=REGVAL Windows注册表项值</li><li>–reg-data=REGDATA Windows注册表键值数据</li><li>–reg-type=REGTYPE Windows注册表项值类型</li></ul><font color="red">General（一般）：这些选项可以用来设置一些一般的工作参数。</font><ul><li>–t TRAFFICFILE 记录所有HTTP流量到一个文本文件中</li><li>–s SESSIONFILE 保存和恢复检索会话文件的所有数据</li><li>–flush-session 刷新当前目标的会话文件</li><li>–fresh-queries 忽略在会话文件中存储的查询结果</li><li>–eta 显示每个输出的预计到达时间</li><li>–update 更新SqlMap</li><li>–save file保存选项到INI配置文件</li><li>–batch 从不询问用户输入，使用所有默认配置。</li></ul><font color="red">Miscellaneous（杂项）：</font><ul><li>–beep 发现SQL注入时提醒</li><li>–check-payload IDS对注入payloads的检测测试</li><li>–cleanup SqlMap具体的UDF和表清理DBMS</li><li>–forms 对目标URL的解析和测试形式</li><li>–gpage=GOOGLEPAGE 从指定的页码使用谷歌dork结果</li><li>–page-rank Google dork结果显示网页排名（PR）</li><li>–parse-errors 从响应页面解析数据库管理系统的错误消息</li><li>–replicate 复制转储的数据到一个sqlite3数据库</li><li>–tor 使用默认的Tor（Vidalia/ Privoxy/ Polipo）代理地址</li><li>–wizard 给初级用户的简单向导界面</li></ul><p><font color="red">好用的注入关键词</font><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -g <span class="string">"inurl:\"</span>.php?id=<span class="number">1</span>\<span class="string">""</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">--batch 自动选yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--smart 启发式快速判断</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQLmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLmap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQLmap 安装 &amp;&amp; 测试环境的搭建</title>
      <link href="/2017-10-31/SQLmap%20%E5%AE%89%E8%A3%85%20&amp;&amp;%20%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2017-10-31/SQLmap%20%E5%AE%89%E8%A3%85%20&amp;&amp;%20%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<font color="red">SQLmap 适用范围：</font><ul><li>用于自动化的SQL注入攻击</li><li>支持MySQL，Oracle，MS-SQL，PostgreSQL与Access等数据库</li></ul><font color="red">安装 SQLmap</font><p>SQLmap是基于Python2.7编写、使用SQLmap前需要安装Python2.7并配置Python环境变量</p><font color="red">下载SQLmap源码</font><p>进入SQLmap官网下载源码：<a href="http://sqlmap.org/" target="_blank" rel="noopener">http://sqlmap.org/</a><br><img src="http://oy89aex8x.bkt.clouddn.com/01SQLmap.png" alt=""><br><a id="more"></a></p><font color="red">解压缩后添加SQLmap的环境变量</font><p><img src="http://oy89aex8x.bkt.clouddn.com/02SQLmap.png" alt=""></p><p>在终端输入命令<code>sqlmap.py</code>或者<code>python sqlmap.py</code>、出现下图，则安装成功<br><img src="http://oy89aex8x.bkt.clouddn.com/03SQLmap.png" alt=""></p><font color="red">测试环境的搭建</font><font color="red">安装运行环境 WampServe </font><p>进入官网下载相应的版本：<a href="http://www.wampserver.com/en/download-wampserver-64bits/" target="_blank" rel="noopener">http://www.wampserver.com/en/download-wampserver-64bits/</a></p><font color="red">准备测试源码 DAWA</font><p>进入官网 <a href="http://dvwa.co.uk/" target="_blank" rel="noopener">http://dvwa.co.uk/</a>、点击右上角<code>GitHub</code>进行下载<br><img src="http://oy89aex8x.bkt.clouddn.com/04SQLmap.png" alt=""></p><font color="red">修改 httpd-vhosts.conf 文件</font><p>解压后复制该文件夹路径，启动WampServer、在<code>Appach</code> 中打开<code>httpd-vhosts.conf</code><br><img src="http://oy89aex8x.bkt.clouddn.com/05SQLmap.png" alt=""></p><p>在其添加如下代码：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span> </span><br><span class="line">  <span class="attribute"><span class="nomarkup">ServerName</span></span> dvwa.localhost</span><br><span class="line">  <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"F:/Sqlmap/dvwa"</span></span><br><span class="line">  <span class="section">&lt;Directory "F:/Sqlmap/dvwa"&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">    <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">    <span class="attribute">Require</span> local</span><br><span class="line">  <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>ServerName</code>：域名字段、<code>DocumentRoot</code>：网站目录，更改为相应的路径</p><font color="red">修改 hosts 文件</font><p>进入文件路径<code>C:\Windows\System32\drivers\etc\hosts</code> 添加域名<br><img src="http://oy89aex8x.bkt.clouddn.com/06SQLmap.png" alt=""></p><p>在终端测试、是否 ping通该域名<br><img src="http://oy89aex8x.bkt.clouddn.com/07SQLmap.png" alt=""></p><font color="red">web 界面安装</font><font color="red">修改配置文件</font><p>在解压的DVWA目录下<code>config</code>-&gt;<code>config.inc.php.dist</code>、复制该文件并将文件名改为<code>config.inc.php</code>、可以自定义修改其内容<br><img src="http://oy89aex8x.bkt.clouddn.com/08SQLmap.png" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/09SQLmap.png" alt=""></p><font color="red">配置数据库</font><p>浏览器进入<code>http://dvwa.localhost</code>后<code>Setup DVWA</code>可以看见相应的配置信息<br><img src="http://oy89aex8x.bkt.clouddn.com/10SQLmap.png" alt=""></p><p>然后 <code>Create / Reset DATABASE</code>、创建数据库<br><img src="http://oy89aex8x.bkt.clouddn.com/11SQLmap.png" alt=""></p><p>进入登录界面、使用默认用户<code>admin</code>和 密码 <code>password</code>。<br><img src="http://oy89aex8x.bkt.clouddn.com/12SQLmap.png" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/13SQLmap.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQLmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLmap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclipse 常用快捷键</title>
      <link href="/2017-10-30/Eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017-10-30/Eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<font color="red">代码跳转与查看快捷键：</font><ul><li>Ctrl+Q：回到最后一次编辑（修改）的地方。多次跳转后，使用这个可以立即回到上次修改代码的地方。</li><li>Ctrl+Shift+上/下箭头：切换到上/下一个类成员名称的开头。</li><li>Ctrl+L ：按下该快捷键，在弹出的Go to Line对话框中输入行号，可以快速跳转到该行。</li><li>Ctrl+K：选中的一串字符，快速定位到下一个与当前选中字符相同的地方。</li><li>Ctrl+Shift+K：选中的一串字符，快速定位到上一个与当前选中字符相同的地方。</li><li>Ctrl+/(小键盘)：折叠/展开当前类中的所有代码。</li></ul><font color="red">代码编辑快捷键：</font><ul><li>Ctrl+=：放大编辑器字体。</li><li>Ctrl+-：缩小编辑器字体。</li><li>Ctrl+/：对一行（或选中的多行）进行单行注释或取消单行注释。</li><li>Ctrl+Alt+上/下箭头：从高亮显示的部分（当前行或选中的多行）的上/下方一行开始，复制出高亮显示部分。</li><li>Ctrl+D：删除当前行。</li><li>Ctrl+Delete/Backspace：删除下一个/上一个单词。</li><li>Ctrl+Shift+Delete：删除到行末。</li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VMWare下的 CentOS 远程登录</title>
      <link href="/2017-10-30/VMWare%E4%B8%8B%E7%9A%84%20CentOS%20%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2017-10-30/VMWare%E4%B8%8B%E7%9A%84%20CentOS%20%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<font color="red">总体配置思想</font><ul><li>首先对VMWare配置网络连接方式，采用桥接模式。配置完成后需要在VMWare下的CentOS虚拟机进网络配置，并指定与宿主机同一个网段内的固定IP。配置成功后，再在Xshell下进行ssh登录配置。</li></ul><font color="red">桥接模式</font><p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。桥接模式如下图所示：<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell1.png" alt="桥接模式"></p><a id="more"></a><font color="red">配置环境</font><p>VMWare Workstation 12 + CentOS-6.9-i386 + Xshell 5</p><font color="red">配置步骤</font><p><font color="red">（一）、</font>在VMWare主菜单 <strong>WorkStation</strong> -&gt; <strong>虚拟机</strong>-&gt; <strong>设置</strong>，将网络连接方式设置为桥接模式，并在 <strong>复制物理网络连接状态</strong>前打钩。这里是指将创建一个虚拟的网卡，而该虚拟网卡所有的状态均是从实际的物理网卡中复制过来的。<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell2.png" alt=""></p><p><font color="red">（二）、</font>在VMWare主菜单 <strong>WorkStation</strong>-&gt;<strong>编辑</strong>-&gt;<strong>虚拟网络编辑器</strong>,选择 <strong>VMnet0</strong>,将其桥接到 <strong>Realtek PCIe GBE Family Controller</strong>。这里 <strong>Realtek PCIe GBE Family Controller</strong>是真实的网卡，而VMnet0是虚拟交换机。<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell3.png" alt=""></p><p><font color="red">（三）、</font>在VMWare下安装完CentOS 6.5后，输入如下语句，修改<code>ifcfg-eth0</code>文件，进行相关的网络配置： </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-eth0</span><br></pre></td></tr></table></figure><p><font color="red">（四）、</font>打开<code>ifcfg-eth0</code>文件，设置如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DEVICE</span>=eth0 //虚拟网卡名 </span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">yes</span> //指明在系统启动时激活网卡 </span><br><span class="line"><span class="attr">BOOTPROTO</span>=static //这里dhcp一定要改为static/none，否则配置不会生效 </span><br><span class="line"><span class="attr">DNS1</span>=<span class="number">114.114</span>.<span class="number">115.115</span> //你的主用DNS地址，这里也可以是<span class="number">114.114</span>.<span class="number">114.114</span> </span><br><span class="line"><span class="attr">DNS2</span>=xxx.xxx.xxx.xxx //你的备用DNS地址 </span><br><span class="line"><span class="attr">IPADDR</span>=你的虚拟机IP地址（注意：这里的虚拟IP地址必须是与你的真实IP地址在同一网段内） </span><br><span class="line"><span class="attr">NETMASK</span>=<span class="number">255.255</span>.<span class="number">255.0</span> </span><br><span class="line"><span class="attr">GATEWAY</span>=你的网关IP（与你的真实网关地址一致）</span><br></pre></td></tr></table></figure></p><p><img src="http://oy89aex8x.bkt.clouddn.com/xshell4.png" alt=""></p><p>对照下图：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/xshell5.png" alt=""></p><p><font color="red">（五）、</font>完成以上配置后，退出并保存。并输入如下语句 <code>service network restart</code>，重新启动网络配置。<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell6.png" alt=""></p><p><font color="red">（六）、</font>输入<code>ifconfig</code>，如配置成功，会出现刚才配置的IP等信息，如下图所示。<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell7.png" alt=""></p><p><font color="red">（七）、</font>输入<code>ping www.baidu.com</code>及ping + 你的主机IP，如果能ping通，说明你的虚拟机网络配置已成功。</p><p><font color="red">（八）、</font>有些虚拟系统可能没有启动ssh服务，查看ssh服务<code>service sshd status</code> 、重新启动ssh服务 <code>service sshd restart</code>;<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell11.png" alt=""></p><p><font color="red">（九）、</font>进入Xshell,选择 <strong>新建会话属性</strong>，输入你要远程登录的虚拟主机IP，ssh端口号默认为22。<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell8.png" alt=""></p><p><font color="red">十）、</font>（选择 <strong>用户身份验证</strong>，输入用户名和密码，选择确定后进行连接。此时XShell与虚拟linux系统连接成功。<br><img src="http://oy89aex8x.bkt.clouddn.com/xshell9.png" alt=""></p><p><img src="http://oy89aex8x.bkt.clouddn.com/xshell10.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMWare </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 设置防火墙</title>
      <link href="/2017-10-29/Linux%20%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2017-10-29/Linux%20%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="html"><![CDATA[<font color="red">（一）修改防火墙设置</font><p>在文件<code>/etc/sysconfig/iptables</code>中系统原始配置的:<code>RH-Firewall-1-INPUT</code>规则链增加类似这样的行：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A RH-Firewall-<span class="number">1</span>-INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">39764</span> -j ACCEPT</span><br><span class="line">-A RH-Firewall-<span class="number">1</span>-INPUT -m <span class="keyword">state</span> --state NEW -m udp -p udp --dport <span class="number">39764</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>如果发现原有<code>-j REJECT</code>一类的语句，上面两句要放在它的前面</p><p><font color="red">重启后永久性生效：</font><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开启： chkconfig iptables <span class="keyword">on</span> </span><br><span class="line">关闭： chkconfig iptables off 或者 /sbin/chkconfig <span class="comment">--level 2345 iptables off</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><font color="red">（二）即时生效，重启后失效</font><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">service 方式</span><br><span class="line">开启：<span class="built_in"> service </span>iptables start </span><br><span class="line">关闭：<span class="built_in"> service </span>iptables stop</span><br><span class="line">重启：<span class="built_in"> service </span>iptables stop</span><br><span class="line">查看：<span class="built_in"> service </span>iptables status  </span><br><span class="line">保存设置： serivce iptables save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iptables 方式</span><br><span class="line">查看防火墙状态：</span><br><span class="line">/etc/init.d/iptables status</span><br><span class="line">关闭防火墙：</span><br><span class="line">/etc/init.d/iptables stop</span><br><span class="line">重启防火墙:</span><br><span class="line">/etc/init.d/iptables restart</span><br></pre></td></tr></table></figure></p><p><font color="red">（三）其他</font><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">只打开<span class="number">22</span>端口</span><br><span class="line">iptables -A INPUT -p tcp –dport <span class="number">22</span> -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp –sport <span class="number">22</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">参数讲解：</span><br><span class="line">–A 参数就看成是添加一条规则</span><br><span class="line">–p 指定是什么协议，我们常用的tcp 协议，当然也有udp，例如<span class="number">53</span>端口的DNS</span><br><span class="line">–dport 就是目标端口，当数据从外部进入服务器为目标端口</span><br><span class="line">–sport 数据从服务器出去，则为数据源端口使用</span><br><span class="line">–j 就是指定是 ACCEPT -接收 或者 DROP 不接收</span><br><span class="line"></span><br><span class="line">禁止某个IP访问</span><br><span class="line">iptables -A INPUT -p tcp -s <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span> -j DROP</span><br><span class="line">–s 参数是来源（即<span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>）</span><br><span class="line">后面拒绝就是DROP</span><br><span class="line">删除规则</span><br><span class="line">iptables -D INPUT <span class="number">2</span></span><br><span class="line">删除INPUT链编号为<span class="number">2</span>的规则</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> 奇淫技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 添加应用到 service &amp; 设置自动启动.md</title>
      <link href="/2017-10-29/Linux%20%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E5%88%B0%20service%20&amp;%20%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/"/>
      <url>/2017-10-29/Linux%20%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E5%88%B0%20service%20&amp;%20%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<p>一般来说，服务器是极少重启的。如果必须重启，很多程序，如：<code>shadowsocks server</code>，还要重新远程启动，很麻烦的。所以将程序添加到开机运行中是件很方便的事情。</p><font color="red">（一）添加应用到 service</font><p>创建脚本 <strong>/etc/init.d/shadowsocks</strong> 文件（其实也是 <strong>/etc/rc.d/init.d/shadowsocks</strong>文件）：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/init.d/shadowsocks</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>添加以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># shadowsocks start/restart/stop shadowsocks</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 85 15</span></span><br><span class="line"><span class="comment"># description: start shadowsocks/ssserver at boot time</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">        ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">        ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">restart</span></span>()&#123;</span><br><span class="line">        ssserver -c /etc/shadowsocks.json -d restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">restart)</span><br><span class="line">        restart</span><br><span class="line">        ;;</span><br><span class="line">*)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|restart|stop&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p><p>懂bash，或者其他程序语言语法的，应该都看得懂是什么意思吧！其中：</p><ul><li><font color="red">前面的几行，看起来像注释，特别<code>chkconfig</code>那一行，不可删除，否则无法设置开机启动，会提示错误：<code>service shadowsocks does not support chkconfig</code></font></li><li><code>chkconfig: 2345 85 15</code>中，<code>2345</code>代表在设置在那个<code>level</code>中是<code>on</code>的。如果一个都不想<code>on</code>，那就写一个横线<code>&quot;-&quot;</code>，比如：<code>chkconfig: - 85 15</code>。后面两个数字代表S和K的默认排序号</li></ul><p>然后增加这个文件的可执行权限：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /etc/init.d/shadowsocks</span></span><br></pre></td></tr></table></figure></p><p>这样就可以在 shell 中直接运行下面的命令开启程序了（重启和停止同理）：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo<span class="built_in"> service </span>shadowsocks start</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><ul><li>这里以root权限运行的，如果不想以root权限运行可以用<font color="red"><code>sudo -u {user} {command}</code></font> 。</li><li>如果不给脚本文件加上其他用户的可执行权限，不带参数运行 <font color="red"><code>service shadowsocks</code></font>会提示 <code>unrecognized service</code>。</li></ul><font color="red">如果出现报错：<code>/etc/init.d/shadowsocks: No such file or directory</code></font><p>是因为编码方式不对，如你在win下编辑sh，然后直接复制到linux下面。</p><p><strong>解决方案</strong>：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有<span class="number">2</span>种方法可以解决这个。</span><br><span class="line"><span class="number">1</span>)在Windows下转换：</span><br><span class="line">利用一些编辑器如UltraEdit或EditPlus等工具先将脚本编码转换，再放到Linux中执行。转换方式如下(UltraEdit)：<span class="keyword">File</span>–&gt;Conversions–&gt;DOS-&gt;UNIX即可。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)用vim打开该sh文件，输入：</span><br><span class="line">:<span class="keyword">set</span> ff //回车，显示<span class="comment">fileformat=dos</span></span><br><span class="line">:<span class="keyword">set</span> <span class="comment">ff=unix</span> //重新设置下文件格式</span><br><span class="line">:wq //保存退出</span><br><span class="line">再执行，就不会再提示No <span class="comment">such file or directory</span>这个问题了。</span><br></pre></td></tr></table></figure><font color="red">（二）设置开机启动</font><p>在上面脚本没有问题（也就是保留了前面10行，并且语法正确）的情况下，通过下面的命令，就可以设置程序自动启动了：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig shadowsocks <span class="keyword">on</span></span><br></pre></td></tr></table></figure></p><p>这样程序就会自动启动了。</p><p>参考资料</p><ul><li><a href="http://blog.xavierskip.com/2015-02-02-shadowsocks-init/" target="_blank" rel="noopener">设置 shadowsocks server 开机启动</a></li><li><a href="http://blog.csdn.net/mlnotes/article/details/9676187" target="_blank" rel="noopener">编写linux service并设置开机启动(Ubuntu)</a></li><li>Ubuntu添加开机启动服务的官方文档：<a href="https://help.ubuntu.com/community/UbuntuBootupHowto" target="_blank" rel="noopener">UbuntuBootupHowto</a>。</li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> 奇淫技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VPS 定时重启 &amp; 清理内存</title>
      <link href="/2017-10-28/VPS%20%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AF%20&amp;%20%E6%B8%85%E7%90%86%E5%86%85%E5%AD%98/"/>
      <url>/2017-10-28/VPS%20%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AF%20&amp;%20%E6%B8%85%E7%90%86%E5%86%85%E5%AD%98/</url>
      <content type="html"><![CDATA[<font color="red">一、设置自动清理 Cache</font><p>建立脚本 god.sh：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> /home/god.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>脚本内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">free -m |grep -i mem |awk ‘&#123;<span class="keyword">if</span>(<span class="variable">$4</span> &lt; 100)&#123; <span class="built_in">printf</span>(“3”) &gt; “/proc/sys/vm/drop_caches”&#125;&#125;’;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>为防脚本无效、请先执行此<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /<span class="built_in">home</span>/god.sh</span><br></pre></td></tr></table></figure></p><p>设置每10分钟清理一次内存：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">crontab -e</span></span><br></pre></td></tr></table></figure><p>按<code>i  输入  Esc（返回） :wq（保存退出），reboot 生效</code> ：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*/10 *</span> <span class="bullet">* *</span> * /home/god.sh</span><br></pre></td></tr></table></figure></p><font color="red">二、定时重启</font><p>虽然经过清理内存以后，基本不会有啥问题了，但每天重启一次总归是有益无害的。</p><p>输入：<code>crontab -e</code>在文本的末尾加上</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">21</span> * * * /sbin/reboot</span><br></pre></td></tr></table></figure><p>（一般vps的时区是零时区，设置 21:00 时，相当于北京时间早上 5 点重启）</p>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks 的安装使用</title>
      <link href="/2017-10-28/Shadowsocks%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2017-10-28/Shadowsocks%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>&ensp; &ensp;&ensp; &ensp;&ensp; &ensp;<img src="http://oy89aex8x.bkt.clouddn.com/shadowsocks.png" alt=""></p><a id="more"></a><p>&ensp; &ensp;<br><code>Pip</code> 是安装<code>Python</code>包的工具，提供了安装、列举已安装包、升级以及卸载包的功能。<code>Pip</code> 是对<code>easy_install</code>的取代，提供了和<code>easy_install</code>相同的查找包的功能，因此可以使用<code>easy_install</code>安装的包也同样可以使用 <code>pip</code>进行安装。</p><p>&ensp; &ensp;目前有很多<code>Python</code>程序都是可以直接通过 <code>Pip</code>来一键安装了，比如众所周知的<code>Django、Markdown、Shadowsocks</code>等。</p><p>简要介绍一下Pip的用法（以安装Shadowsocks举例）：</p><font color="red">1、安装 package</font><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure><font color="red">2、列出已安装的 packages</font><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pip freeze</span></span><br></pre></td></tr></table></figure><font color="red">3、安装特定版本的 package</font><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks==<span class="number">1.3</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><font color="red">4、升级已安装的 package 到最新版本</font><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span>-U <span class="keyword">shadowsocks</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">pip </span><span class="keyword">install </span>--upgrade pip   <span class="comment"># pip 版本升级</span></span><br></pre></td></tr></table></figure><font color="red">5、卸载已安装的 package </font><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pip uninstall shadowsocks</span></span><br></pre></td></tr></table></figure><font color="red">6、查询已安装的 package </font><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="built_in">search</span> <span class="string">"shadowsocks"</span></span><br></pre></td></tr></table></figure><p>安装 Pip 之前必须要先安装扩展源 EPEL 。</p><p>EPEL (<a href="http://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">http://fedoraproject.org/wiki/EPEL</a>) 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。</p><font color="red">1、  安装epel扩展源</font><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y <span class="keyword">install</span> epel-<span class="keyword">release</span></span><br></pre></td></tr></table></figure><font color="red">2、  安装 pip</font><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo yum -y <span class="keyword">install</span> python-pip</span><br></pre></td></tr></table></figure><p>pip 默认安装到 <code>/usr/bin</code>目录下。</p><font color="red">3、  安装shadowsocks</font><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure><font color="red">Shadowsocks 的配置和使用</font><br><br><br><font color="red">1、  创建Shadowsocks的配置文件：</font><p>CentOS 下通过 vim 创建该配置，运行命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>shadowsocks.json</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"your_server_ip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8989</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"yourpassword"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">各字段的含义：</font><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server ：服务器<span class="built_in"> IP </span>(IPv4/IPv6)，注意这也将是服务端监听的<span class="built_in"> IP </span>地址</span><br><span class="line">server_port ：监听的服务器端口</span><br><span class="line">local_address ：本地监听的<span class="built_in"> IP </span>地址</span><br><span class="line">local_port ：本地端端口</span><br><span class="line">password ：用来加密的密码</span><br><span class="line">timeout ：超时时间（秒）</span><br><span class="line">method ：加密方法，可选择 “bf-cfb”, “aes-256-cfb”, “des-cfb”, “rc4”, 等等。默认是一种不安全的加密，推荐用 “aes-256-cfb”</span><br><span class="line">fast_open ：<span class="literal">true</span> 或 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">3</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/tcp_fastopen</span></span><br></pre></td></tr></table></figure><p>开启之后，将 fast_open 的配置设置为 true 即可。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">works：works数量，默认为 <span class="number">1</span></span><br></pre></td></tr></table></figure></p><font color="red">2、  安装M2Crypto</font><p>默认加密方法 table 速度很快，但很不安全。推荐使用 <code>aes-256-cfb</code>或者 <code>bf-cfb</code>。请不要使用 <code>rc4</code>，它不安全。如果选择 <code>table</code>之外的加密，需要安装 <code>M2Crypto</code>。<br>先安装依赖包：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum <span class="keyword">install </span>-y openssl-devel gcc <span class="keyword">swig </span>python-devel autoconf libtool</span><br></pre></td></tr></table></figure><p>安装setuptools：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.<span class="keyword">py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">python</span> ez_setup.<span class="keyword">py</span> install</span><br></pre></td></tr></table></figure><p>再通过pip安装 M2Crypto：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip <span class="keyword">install</span> M2Crypto</span><br></pre></td></tr></table></figure><font color="red">3、  安装 gevent</font><p>安装 gevent 可以提高 Shadowsocks 的性能。CentOS下安装gevent依赖libevent和greenlet。<br>安装libevent：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> -y libevent</span><br></pre></td></tr></table></figure><p>安装 greenlet：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip <span class="keyword">install</span> greenlet</span><br></pre></td></tr></table></figure><p>安装 gevent：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip <span class="keyword">install</span> gevent</span><br></pre></td></tr></table></figure><font color="red">4、  命令行参数（服务器端启动命令）</font><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c <span class="regexp">/etc/</span>shadowsocks.json</span><br></pre></td></tr></table></figure><font color="red"> ssserver 命令操作</font><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span>               前端启动</span><br><span class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d start      后端启动</span><br><span class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d stop       停止</span><br><span class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d restart    重启(修改配置要重启才生效)</span><br></pre></td></tr></table></figure><p>如果想在后台一直运行Shadowsocks，启动命令如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ssserver -c <span class="meta-keyword">/etc/</span>shadowsocks.json &gt; <span class="meta-keyword">/dev/</span>null <span class="number">2</span>&gt;<span class="variable">&amp;1</span> &amp;</span><br></pre></td></tr></table></figure><font color="red">备注：</font>关于 nohup，是可以让程序在后台运行的命令。<br><br>同时可以用命令行参数覆盖<code>/etc/shadowsocks.json</code> 里的设置：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sslocal -s 服务器地址 </span><br><span class="line">        -<span class="ruby">p 服务器端口 </span></span><br><span class="line"><span class="ruby">        -l 本地端端口 </span></span><br><span class="line"><span class="ruby">        -k 密码 </span></span><br><span class="line"><span class="ruby">        -m 加密方法</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">ssserver  -p 服务器端口 </span></span><br><span class="line"><span class="ruby">          -k 密码 </span></span><br><span class="line"><span class="ruby">          -m 加密方法</span></span><br></pre></td></tr></table></figure><br><br><font color="red">备注：</font><strong>sslocal</strong>是客户端程序；<strong>ssserver</strong>是服务端程序。<br><br><font color="red">5、  防火墙设置（如有）</font><br>编辑防火墙配置文件<code>/etc/sysconfig/iptables</code>，将服务器端口（<code>server_port</code>）放行。<br>新增一条防火墙规则：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">8989</span> -j ACCEPT</span><br></pre></td></tr></table></figure><br><br>重启防火墙 iptables：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service iptables restart</span></span><br></pre></td></tr></table></figure><br><br>至此，服务器端的 Shadowsocks 安装和配置完毕。<br><br><font color="red">6、客户端配置</font><p>Windows客户端有图形界面也有命令行，我们这里以配置图形化界面的shadowsocks-csharp为例说明。</p><p>下载客户端 <code>shadowsocks-csharp</code>（最新版1.1.2）：<br><a href="https://shadowsocks-csharp.googlecode.com/files/shadowsocks-csharp-1.1.2.zip" target="_blank" rel="noopener">https://shadowsocks-csharp.googlecode.com/files/shadowsocks-csharp-1.1.2.zip</a></p><p>解压至任意目录下，双击<code>shadowsocks-csharp.exe</code>运行程序，各参数选项填入：</p><p>&ensp; &ensp;&ensp; &ensp;&ensp; &ensp;<img src="http://oy89aex8x.bkt.clouddn.com/shadowsocks2.png" alt=""></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Server IP:   服务器<span class="built_in"> IP </span>(IPv4/IPv6)，填入在服务器端设置的IP地址（server）</span><br><span class="line"></span><br><span class="line">Server Port: 服务器端口，填入在服务器端设置的端口号（server_port）</span><br><span class="line"></span><br><span class="line">Password:    用来加密的密码，填入在服务器端设置的加密密码（password）</span><br><span class="line"></span><br><span class="line">Proxy Port:  本地端代理的端口，填入在服务器端设置的本地端端口（local_port）</span><br><span class="line"></span><br><span class="line">Encryptor:   加密方法，填入在服务器端设置的加密方法（method）</span><br></pre></td></tr></table></figure><font color="red">注意：</font>本地客户端填写的参数一定要与服务器端设置的一致才可以。<br><br>另有一款客户端 shadowsocks-gui （推荐）可供选择，下载地址：<br><br><a href="https://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="noopener">https://sourceforge.net/projects/shadowsocksgui/files/dist/</a><br><br>下面就可以利用浏览器插件无障碍浏览国外网站了。插件的设置过程这里略过。<br><br><code>AutoProxy</code>（用于Firefox）、<code>Proxy SwitchySharp</code>（用于Chrome）<br><br><font color="red">参考链接：</font><ul><li><p><a href="http://shadowsocks.org/en/download/servers.html" target="_blank" rel="noopener">http://shadowsocks.org/en/download/servers.html</a>（翻）</p></li><li><p><a href="https://pypi.python.org/pypi/shadowsocks" target="_blank" rel="noopener">https://pypi.python.org/pypi/shadowsocks</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks 一键安装脚本（四合一）</title>
      <link href="/2017-10-28/Shadowsocks%20%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017-10-28/Shadowsocks%20%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>&ensp; &ensp;&ensp; &ensp;&ensp; &ensp;<img src="http://oy89aex8x.bkt.clouddn.com/shadowsocks.png" alt=""></p><a id="more"></a><font color="red">本脚本适用环境 </font><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</p><p>内存要求：≥128M</p><p><font color="red">关于本脚本</font></p><hr><p>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；</p><p>2、各版本的启动脚本及配置文件名不再重合；</p><p>3、每次运行可安装一种版本；</p><p>4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；</p><p>5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</p><p>6、Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）。</p><p><font color="red">友情提示：</font><br>如果你有问题，请先阅读这篇《<a href="https://teddysun.com/399.html" target="_blank" rel="noopener">Shadowsocks Troubleshooting</a>》之后再询问。</p><p><font color="red">默认配置</font></p><p><hr><br>服务器端口：自己设定（如不设定，默认为 8989）</p><p>密码：自己设定（如不设定，默认为 teddysun.com）</p><p>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</p><p>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</p><p>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</p><p><strong>备注：</strong> 脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p><p><font color="red">客户端下载</font></p><p><hr><br>常规版 Windows 客户端</p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>ShadowsocksR 版 Windows 客户端</p><p><a href="https://github.com/shadowsocksr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksr/shadowsocksr-csharp/releases</a></p><p><font color="red">使用方法</font></p><hr><p>使用root用户登录，运行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate -O shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">./shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-<span class="keyword">all</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><font color="red">安装完成后，脚本提示如下</font></p><hr><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption <span class="function"><span class="keyword">Method</span>:</span>your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> visit:https:<span class="comment">//teddysun.com/486.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p><font color="red">卸载方法</font></p><hr><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p><p>使用root用户登录，运行以下命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks-all<span class="selector-class">.sh</span> uninstall</span><br></pre></td></tr></table></figure></p><p><font color="red">启动脚本</font></p><p><hr><br>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Python 版：</span><br><span class="line">/etc/rc.d/init.d/shadowsocks-python <span class="keyword">start</span> | <span class="keyword">stop</span> | restart | <span class="keyword">status</span></span><br><span class="line"></span><br><span class="line">ShadowsocksR 版：</span><br><span class="line">/etc/rc.d/init.d/shadowsocks-r <span class="keyword">start</span> | <span class="keyword">stop</span> | restart | <span class="keyword">status</span></span><br><span class="line"></span><br><span class="line">Shadowsocks-<span class="keyword">Go</span> 版：</span><br><span class="line">/etc/rc.d/init.d/shadowsocks-<span class="keyword">go</span> <span class="keyword">start</span> | <span class="keyword">stop</span> | restart | <span class="keyword">status</span></span><br><span class="line"></span><br><span class="line">Shadowsocks-libev 版：</span><br><span class="line">/etc/rc.d/init.d/shadowsocks-libev <span class="keyword">start</span> | <span class="keyword">stop</span> | restart | <span class="keyword">status</span></span><br></pre></td></tr></table></figure><p><font color="red">各版本默认配置文件</font></p><hr><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Python 版：</span><br><span class="line">/etc/shadowsocks-python/config.json</span><br><span class="line"></span><br><span class="line">ShadowsocksR 版：</span><br><span class="line">/etc/shadowsocks-r/config.json</span><br><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">/etc/shadowsocks-go/config.json</span><br><span class="line"></span><br><span class="line">Shadowsocks-libev 版：</span><br><span class="line">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks-go安装脚本</title>
      <link href="/2017-10-28/Shadowsocks-go%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
      <url>/2017-10-28/Shadowsocks-go%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>&ensp; &ensp;&ensp; &ensp;&ensp; &ensp;<img src="http://oy89aex8x.bkt.clouddn.com/shadowsocks.png" alt=""></p><a id="more"></a><font color="red">本脚本适用环境：</font><ul><li>系统支持：CentOS，Debian，Ubuntu</li><li>内存要求：≥64M</li></ul><h6 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h6><p>一键安装 Go 版的 shadowsocks 最新版本 1.2.1。与 Python 版不同的是，其客户端程序能使用多个服务端配置，本脚本安装的是服务端程序。</p><p><font color="red">友情提示：</font>如果你有问题，请先参考这篇<a href="https://teddysun.com/399.html" target="_blank" rel="noopener">《Shadowsocks Troubleshooting》</a>后再问。</p><h6 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h6><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器端口：自己设定（如不设定，默认为 <span class="number">8989</span>）</span><br><span class="line">密码：自己设定（如不设定，默认为 teddysun.com）</span><br><span class="line">加密方式：自己设定（如不设定，默认为 aes<span class="number">-256</span>-cfb）</span><br></pre></td></tr></table></figure><h6 id="Shadowsocks-for-Windows-客户端下载"><a href="#Shadowsocks-for-Windows-客户端下载" class="headerlink" title="Shadowsocks for Windows 客户端下载"></a>Shadowsocks for Windows 客户端下载</h6><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><p>使用root用户登录，运行以下命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate -O shadowsocks-<span class="keyword">go</span>.<span class="keyword">sh</span> http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks-<span class="keyword">go</span>.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks-<span class="keyword">go</span>.<span class="keyword">sh</span></span><br><span class="line">./shadowsocks-<span class="keyword">go</span>.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-<span class="keyword">go</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></p><p><font color="blue"></font>安装完成后，脚本提示如下：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, Shadowsocks-go server install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption <span class="function"><span class="keyword">Method</span>:</span>your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> visit:https:<span class="comment">//teddysun.com/392.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h6 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h6><p>使用 root 用户登录，运行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks-go<span class="selector-class">.sh</span> uninstall</span><br></pre></td></tr></table></figure><h6 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h6><p>客户端配置的参考链接：<a href="https://teddysun.com/339.html" target="_blank" rel="noopener">https://teddysun.com/339.html</a></p><p>安装完成后即已后台启动 Shadowsocks-go ，运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/shadowsocks status</span></span><br></pre></td></tr></table></figure><p>可以查看 Shadowsocks-go 进程是否已经启动。<br>本脚本安装完成后，已将 shadowsocks-go 加入开机自启动。</p><h6 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h6><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：<span class="meta-keyword">/etc/</span>init.d/shadowsocks start</span><br><span class="line">停止：<span class="meta-keyword">/etc/</span>init.d/shadowsocks stop</span><br><span class="line">重启：<span class="meta-keyword">/etc/</span>init.d/shadowsocks restart</span><br><span class="line">状态：<span class="meta-keyword">/etc/</span>init.d/shadowsocks status</span><br></pre></td></tr></table></figure><p>多用户多端口配置文件示例：<br>配置文件路径：<code>/etc/shadowsocks/config.json</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"my_server_ip"</span>,  <span class="comment">#填入你的IP地址</span></span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"port_password"</span>: &#123;</span><br><span class="line">        <span class="string">"8381"</span>: <span class="string">"foobar1"</span>,    <span class="comment">#端口号，密码</span></span><br><span class="line">        <span class="string">"8382"</span>: <span class="string">"foobar2"</span>,</span><br><span class="line">        <span class="string">"8383"</span>: <span class="string">"foobar3"</span>,</span><br><span class="line">        <span class="string">"8384"</span>: <span class="string">"foobar4"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">注意事项：</font><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">开放服务器端的端口：</span><br><span class="line"></span><br><span class="line">一、service 方式</span><br><span class="line">查看防火墙状态： </span><br><span class="line">[root@centos6 ~]#<span class="built_in"> service </span>iptables status</span><br><span class="line">iptables：未运行防火墙。</span><br><span class="line">开启防火墙：</span><br><span class="line">[root@centos6 ~]#<span class="built_in"> service </span>iptables start</span><br><span class="line">关闭防火墙：</span><br><span class="line">[root@centos6 ~]#<span class="built_in"> service </span>iptables stop</span><br><span class="line"></span><br><span class="line">二、iptables 方式</span><br><span class="line">先进入 init.d 目录，命令如下：</span><br><span class="line">[root@centos6 ~]# cd /etc/init.d/</span><br><span class="line">[root@centos6 init.d]# </span><br><span class="line">查看防火墙状态：</span><br><span class="line">[root@centos6 init.d]# /etc/init.d/iptables status</span><br><span class="line">暂时关闭防火墙：</span><br><span class="line">[root@centos6 init.d]# /etc/init.d/iptables stop</span><br><span class="line">重启iptables：</span><br><span class="line">[root@centos6 init.d]# /etc/init.d/iptables restart</span><br><span class="line"></span><br><span class="line">修改 vim /etc/init.d/iptables 文件</span><br><span class="line">    yy                  复制当前所在行</span><br><span class="line">    p                   粘贴</span><br><span class="line">    i                   插入</span><br><span class="line">    右键                粘贴（SSH客户端）</span><br><span class="line">    esc [shift + :] wq  保存退出</span><br></pre></td></tr></table></figure></p><p>官方版本的示例 ，详见 <a href="https://github.com/shadowsocks/shadowsocks-go/blob/master/sample-config/server-multi-port.json" target="_blank" rel="noopener">这里</a>。</p><p>更多版本 Shadowsocks 服务端一键安装脚本：</p><p><a href="https://shadowsocks.be/9.html" target="_blank" rel="noopener">ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）</a></p><p><a href="https://teddysun.com/342.html" target="_blank" rel="noopener">Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）</a></p><p><a href="https://teddysun.com/357.html" target="_blank" rel="noopener">CentOS 下 shadowsocks-libev 一键安装脚本</a></p><p><a href="https://teddysun.com/358.html" target="_blank" rel="noopener">Debian 下 shadowsocks-libev 一键安装脚本</a></p><p><font color="red">参考链接：</font><br><a href="https://github.com/shadowsocks/shadowsocks-go" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-go</a></p>]]></content>
      
      <categories>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建 Firekylin 个人网站</title>
      <link href="/2017-10-24/%E6%90%AD%E5%BB%BA%20Firekylin%20%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2017-10-24/%E6%90%AD%E5%BB%BA%20Firekylin%20%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<h3 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h3><h5 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h5><p>使用 yum 命令安装 Node.js</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> nodejs -y</span><br></pre></td></tr></table></figure><p>使用 NPM 安装 PM2</p><p>通过 NPM 安装进程管理模块 PM2。它是 Node.js 的一个进程管理模块，之后我们会使用它来管理我们的个人网站进程。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install pm2 -g  </span><br><span class="line"><span class="string">//</span>如果不成功先使用命令：</span><br><span class="line"><span class="string">//npm</span> <span class="params">--registry</span> https:<span class="string">//registry.npm.taobao.org</span> info underscore</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h5><p>&ensp; &ensp;使用 yum 安装 MySQL ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget http://dev.mysql.com/get/mysql-community-<span class="keyword">release</span>-el7<span class="number">-5.</span>noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-<span class="keyword">release</span>-el7<span class="number">-5.</span>noarch.rpm</span><br><span class="line">yum <span class="keyword">install</span> mysql-community-<span class="keyword">server</span> -y</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;启动<code>MySQL</code> 服务：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;设置 <code>MySQL</code> 账户 <strong>root 密码</strong>：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>bin/mysqladmin -u root password <span class="string">'Password4Firekylin'</span></span><br></pre></td></tr></table></figure><h5 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h5><p>&ensp; &ensp;在 <code>CentOS</code>上，可直接使用 <strong>yum</strong> 来安装 Nginx</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> nginx -y</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;如果是 <code>Debian/Ubuntu</code>则使用 <code>apt-get</code> 安装即可。</p><h3 id="安装并配置-Firekylin"><a href="#安装并配置-Firekylin" class="headerlink" title="安装并配置 Firekylin"></a>安装并配置 Firekylin</h3><h5 id="安装-Firekylin"><a href="#安装-Firekylin" class="headerlink" title="安装 Firekylin"></a>安装 Firekylin</h5><p>&ensp; &ensp;在服务器上下载安装包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>firekylin.org<span class="regexp">/release/</span>latest.tar.gz</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;解压安装包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tar zvxf latest<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;安装程序依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> firekylin</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;复制项目下的 <code>pm2_default.json</code>文件生成新文件 <code>pm2.json</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cp</span> <span class="selector-tag">pm2_default</span><span class="selector-class">.json</span> <span class="selector-tag">pm2</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;修改 <code>pm2.json</code>文件中的 <code>cwd</code> 配置值为项目的当前路径<code>/root/firekylin</code> ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>: [&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"firekylin"</span>,</span><br><span class="line">    <span class="attr">"script"</span>: <span class="string">"www/production.js"</span>,</span><br><span class="line">    <span class="attr">"cwd"</span>: <span class="string">"/root/firekylin"</span>,</span><br><span class="line">    <span class="attr">"exec_mode"</span>: <span class="string">"fork"</span>,</span><br><span class="line">    <span class="attr">"max_memory_restart"</span>: <span class="string">"1G"</span>,</span><br><span class="line">    <span class="attr">"autorestart"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"node_args"</span>: [],</span><br><span class="line">    <span class="attr">"args"</span>: [],</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;然后通过以下命令启动项目</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p<span class="name">m2</span> startOrReload p<span class="name">m2.</span>jso<span class="symbol">n</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;Firekylin 已经启动成功，使用浏览器直接访问 <code>http://&lt;您的 IP 地址&gt;:8360/</code>即可看到 Firekylin 的配置界面。</p><h5 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h5><p>&ensp; &ensp;通过访问 <code>http://&lt;您的 IP 地址&gt;:8360/</code>配置信息，配置过程输入参数如截图所示：<br><br><img src="http://oy89aex8x.bkt.clouddn.com/Firekylin%201.png" alt="配置信息"></p><p>&ensp; &ensp;其中数据库信息中的帐号字段设置为 <code>root</code>，密码字段设置为<code></code> Password4Firekylin`；<br></p><p>&ensp; &ensp;数据库名字段设置为 <code>firekylin</code>，主机字段设置为 <code>127.0.0.1</code>，其他字段使用默认值；<br></p><p>&ensp; &ensp;后台管理帐号中的帐号字段使用默认值 <code>admin</code>，密码字段设置为 <code>Password4Admin</code>：<br></p><p>&ensp; &ensp;配置完成后可以通过后台管理帐号设置的帐号和密码登录博客管理后台，其值分别为 <code>admin</code>和 <code>Password4Admin</code>，截图如下所示：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/Firekylin%202.png" alt="后台管理"></p><h5 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h5><p>&ensp; &ensp;下面我们就配置 Nginx 使用域名访问我们的网站了。</p><p>&ensp; &ensp;复制项目下的<code>nginx_default.conf</code>为 <code>nginx.conf</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">cp</span> nginx_default.<span class="keyword">conf</span> nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;修改<code>nginx.conf</code>文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.yourdomain.com; <span class="comment">#将 www.yourdomain.com 替换为之前注册并解析的域名</span></span><br><span class="line">    <span class="attribute">root</span> /root/firekylin;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$node_port</span> <span class="number">8360</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.js index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">      <span class="attribute">alias</span> /root/firekylin/ssl/challenges/;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> = <span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:<span class="variable">$node_port</span><span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /development.js &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> = /testing.js &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /production.js &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;将 <code>nginx.conf</code>文件软链到 nginx 配置目录下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -s /root/firekylin/nginx.<span class="keyword">conf</span> /etc/nginx/<span class="keyword">conf</span>.d/firekylin.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;重启 Nginx</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;<code>server_name</code> 的值为你的域名，<code>root</code>为你的项目所在路径，<code>$node_port</code> 的值为 <strong>Firekylin</strong> 启动端口，默认为 <code>8360</code>。</p><p>大功告成！</p><p>&ensp; &ensp;恭喜，您的 Firekylin 已经部署完成，尽情折腾吧：<br></p><p>&ensp; &ensp;博客访问地址：<strong>http://&lt;您的域名&gt;</strong><br></p><p>&ensp; &ensp;博客后台地址：<strong>http://&lt;您的域名&gt;/admin</strong><br></p>]]></content>
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firekylin </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建 Seafile 专属网盘</title>
      <link href="/2017-10-24/%E6%90%AD%E5%BB%BA%20Seafile%20%E4%B8%93%E5%B1%9E%E7%BD%91%E7%9B%98/"/>
      <url>/2017-10-24/%E6%90%AD%E5%BB%BA%20Seafile%20%E4%B8%93%E5%B1%9E%E7%BD%91%E7%9B%98/</url>
      <content type="html"><![CDATA[<h3 id="安装-Seafile"><a href="#安装-Seafile" class="headerlink" title="安装 Seafile"></a>安装 Seafile</h3><h5 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h5><p>&ensp; &ensp;使用 yum 安装 Python 及 MySQL：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum install <span class="keyword">python</span> <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-ldap <span class="keyword">python</span>-memcached MySQL-<span class="keyword">python</span> mariadb mariadb-server</span><br></pre></td></tr></table></figure><h5 id="启动-MariaDB-服务："><a href="#启动-MariaDB-服务：" class="headerlink" title="启动 MariaDB 服务："></a>启动 MariaDB 服务：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">mariadb</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">mariadb</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>&ensp; &ensp;配置 MySQL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;配置过程输入参数如截图所示，其中 <code>New password</code>和 <code>Re-enter new password</code>字段都设置为 <code>Password</code>，其他字段一路回车使用默认值：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/seaFile1.png" alt="配置 MySQL"></p><h5 id="安装-Seafile-1"><a href="#安装-Seafile-1" class="headerlink" title="安装 Seafile"></a>安装 Seafile</h5><p>&ensp; &ensp;下载 Seafile 安装包：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget https:<span class="regexp">//m</span>c.qcloudimg.com<span class="regexp">/static/</span>archive<span class="regexp">/3d8addbe52be88df4f6139ec7e35b453/</span>seafile-server_5.<span class="number">1.4</span>_x86-<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;解压 Seafile 安装包：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">seafile-server_5</span><span class="selector-class">.1</span><span class="selector-class">.4_x86-64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;安装 Seafile 安装包：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo mkdir -p /opt/seafile/installed</span><br><span class="line">sudo mv seafile-server_5<span class="number">.1</span><span class="number">.4</span>_x86<span class="number">-64.</span>tar.gz /opt/seafile/installed</span><br><span class="line">sudo mv seafile-server<span class="number">-5.1</span><span class="number">.4</span>/ /opt/seafile</span><br><span class="line">cd /opt/seafile/seafile-server<span class="number">-5.1</span><span class="number">.4</span></span><br><span class="line">sudo ./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;执行过程输入参数如截图所示，<code>server name</code> 字段输入 <strong>Seafile</strong>，<code>This server&#39;s ip or domain</code> 字段输入教程第一步申请的域名，<code>1 or 2</code> 字段选择 <strong>1</strong>，mysql 的 <code>root password</code> 字段输入 <strong>Password</strong>，其他字段一路回车使用默认值：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/seaFile2.png" alt="安装"></p><h3 id="启动-Seafile-及修改防火墙规则"><a href="#启动-Seafile-及修改防火墙规则" class="headerlink" title="启动 Seafile 及修改防火墙规则"></a>启动 Seafile 及修改防火墙规则</h3><h5 id="启动-Seafile"><a href="#启动-Seafile" class="headerlink" title="启动 Seafile"></a>启动 Seafile</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./seafile<span class="selector-class">.sh</span> start</span><br><span class="line">sudo ./seahub<span class="selector-class">.sh</span> start</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;执行过程输入参数如截图所示，其中 <code>admin email</code>设置为您登录网盘的帐号，如 <a href="mailto:**admin@qcloudlab.wang" target="_blank" rel="noopener">**admin@qcloudlab.wang</a><strong>，<code>admin password</code> 和 <code>admin password again</code> 设置为登录网盘的密码，如 </strong>admin_Password**：</p><p><img src="http://oy89aex8x.bkt.clouddn.com/seaFile3.png" alt="启动"></p><h5 id="修改防火墙规则"><a href="#修改防火墙规则" class="headerlink" title="修改防火墙规则"></a>修改防火墙规则</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo firewall-<span class="keyword">cmd</span><span class="bash"> --zone=public --permanent --add-port=8082/tcp</span></span><br><span class="line"><span class="bash">sudo firewall-cmd --zone=public --permanent --add-port=8000/tcp</span></span><br><span class="line"><span class="bash">sudo firewall-cmd --reload</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;大功告成！<br>&ensp; &ensp; Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。<br>&ensp; &ensp;可以通过 Ip 访问网盘：http://&lt;您的 Ip &gt;:8000</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，Seafile 开启了以下两个端口：</span><br><span class="line">Seahub           <span class="number">8000</span>       web访问 </span><br><span class="line">FileServer       <span class="number">8082</span>       文件上传下载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果你在 Nginx/Apache 下运行 Seafile，并且使用了 HTTPS, 开启 <span class="number">443</span> 端口即可。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Seafile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 常用操作命令</title>
      <link href="/2017-10-23/Linux%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2017-10-23/Linux%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><img src="http://oy89aex8x.bkt.clouddn.com/train.png" alt=""><br><a id="more"></a></p><h6 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a href="#0">目录</a></h6><ul><li><h6 id="Linux简介及Ubuntu安装"><a href="#Linux简介及Ubuntu安装" class="headerlink" title="Linux简介及Ubuntu安装"></a><a href="#1">Linux简介及Ubuntu安装</a></h6></li><li><h6 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a><a href="#2">常用指令</a></h6></li><li><h6 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a><a href="#3">系统管理命令</a></h6></li><li><h6 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a><a href="#4">打包压缩相关命令</a></h6></li><li><h6 id="关机-重启机器"><a href="#关机-重启机器" class="headerlink" title="关机/重启机器"></a><a href="#5">关机/重启机器</a></h6></li><li><h6 id="Linux管道"><a href="#Linux管道" class="headerlink" title="Linux管道"></a><a href="#6">Linux管道</a></h6></li><li><h6 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a><a href="#7">Linux软件包管理</a></h6></li><li><h6 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a><a href="#8">vim使用</a></h6></li><li><h6 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a><a href="#9">用户及用户组管理</a></h6></li><li><h6 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a><a href="#10">文件权限管理</a></h6></li><li><h6 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a><a href="#11">更改权限</a></h6></li><li><h6 id="更改权限-1"><a href="#更改权限-1" class="headerlink" title="更改权限"></a><a href="#12">更改权限</a></h6></li></ul><h3 id="1" style="color: red">Linux简介及Ubuntu安装</h3><p>&ensp; &ensp;Linux，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。<code>RedHat、Ubuntu、Debianaa</code><br>安装 <strong>VMware</strong>或 <strong>VirtualBox</strong>虚拟机。具体安装步骤，找百度。<br>再安装Ubuntu。具体安装步骤，找百度。</p><p>&ensp; &ensp;安装完后，可以看到Linux系统的目录结构，见<a href="http://www.weixuehao.com/archives/492" target="_blank" rel="noopener">链接</a></p><p>&ensp; &ensp; 输入进入<code>linux终端</code>，或<code>secureCRT</code>，可以操作linux了。输入<code>help</code>，可以看到所有命令！</p><p><img src="http://oy89aex8x.bkt.clouddn.com/l1.png" alt="命令"></p><h3 style="color: red" id="2">常用指令</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span>     显示文件或目录</span><br><span class="line">   -<span class="keyword">l</span>  列出文件详细信息<span class="keyword">l</span>(<span class="keyword">list</span>)</span><br><span class="line">   -<span class="keyword">a</span>  列出当前目录下所有文件及目录，包括隐藏的<span class="keyword">a</span>(<span class="keyword">all</span>)</span><br><span class="line"><span class="built_in">mkdir</span>  创建目录</span><br><span class="line">   -<span class="keyword">p</span>  创建目录，若无父目录，则创建<span class="keyword">p</span>(parent)   </span><br><span class="line"><span class="keyword">cd</span>     切换目录</span><br><span class="line">touch  创建空文件</span><br><span class="line"><span class="keyword">echo</span>   创建带有内容的文件。</span><br><span class="line"><span class="keyword">cat</span>    查看文件内容 或者tail</span><br><span class="line"><span class="keyword">cp</span>     拷贝</span><br><span class="line">mv     移动或重命名</span><br><span class="line">rm     删除文件</span><br><span class="line">   -r  递归删除，可删除子目录及文件</span><br><span class="line">   -<span class="keyword">f</span>  强制删除</span><br><span class="line"><span class="keyword">find</span>   在文件系统中搜索某文件</span><br><span class="line">wc     统计文本中行数、字数、字符数</span><br><span class="line"><span class="keyword">grep</span>   在文本文件中查找某个字符串</span><br><span class="line">rmdir  删除空目录</span><br><span class="line">tree   树形结构显示目录，需要安装tree包</span><br><span class="line"><span class="keyword">pwd</span>    显示当前目录</span><br><span class="line"><span class="keyword">ln</span>     创建链接文件</span><br><span class="line">more、less   分页显示文本文件内容</span><br><span class="line">head、tail   显示文件头、尾内容</span><br><span class="line">ctrl+alt+F1  命令行全屏模式</span><br></pre></td></tr></table></figure><h3 style="color: red" id="3">系统管理命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stat     显示指定文件的详细信息，比ls更详细</span><br><span class="line">who      显示在线登陆用户</span><br><span class="line">whoami   显示当前操作用户</span><br><span class="line">hostname 显示主机名</span><br><span class="line">uname    显示系统信息</span><br><span class="line">top      动态显示当前耗费资源最多进程信息</span><br><span class="line">ps       显示瞬间进程状态 ps -aux</span><br><span class="line">du       查看目录大小 du -h /home带有单位显示目录信息</span><br><span class="line">df       查看磁盘大小 df -h 带有单位显示磁盘信息</span><br><span class="line">ifconfig 查看网络情况</span><br><span class="line">ping     测试网络连通</span><br><span class="line">netstat  显示网络状态信息 `netstat -tunpl`  netstat -tupln</span><br><span class="line">man      命令不会用了，找男人? 如：man ls</span><br><span class="line">clear    清屏</span><br><span class="line">alias    对命令重命名 如：alias <span class="attribute">showmeit</span>=”ps -aux” ，另外解除使用unaliax showmeit</span><br><span class="line">kill     杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</span><br><span class="line">chkconfig   当前处于运行状态的服务，用如下语句过滤即可chkconfig --list |grep on</span><br><span class="line">lsb_release -a  列出所有版本信息，yum install -y redhat-lsb 或者cat /etc/issue</span><br></pre></td></tr></table></figure><h3 style="color: red" id="4">打包压缩相关命令</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gzip：</span><br><span class="line">bzip2：</span><br><span class="line">tar:     打包压缩</span><br><span class="line">   -<span class="ruby">c    归档文件</span></span><br><span class="line"><span class="ruby">   -x    压缩文件</span></span><br><span class="line"><span class="ruby">   -z    gzip压缩文件</span></span><br><span class="line"><span class="ruby">   -j    bzip2压缩文件</span></span><br><span class="line"><span class="ruby">   -v    显示压缩或解压缩过程 v(view)</span></span><br><span class="line"><span class="ruby">   -f    使用档名</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf /home/abc<span class="selector-class">.tar</span> /home/abc        只打包，不压缩</span><br><span class="line">tar -zcvf /home/abc<span class="selector-class">.tar</span><span class="selector-class">.gz</span> /home/abc    打包，并用gzip压缩</span><br><span class="line">tar -jcvf /home/abc<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> /home/abc   打包，并用bzip2压缩</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;当然，如果想解压缩，就直接替换上面的命令</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar  -cvf  /   tar  -zcvf  /  tar  -jcvf 中的“<span class="keyword">c</span>” 换成“<span class="keyword">x</span>” 就可以了。</span><br></pre></td></tr></table></figure><h3 style="color: red" id="5">关机/重启机器</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br><span class="line">    -<span class="ruby">r      关机重启</span></span><br><span class="line"><span class="ruby">    -h      关机不重启</span></span><br><span class="line"><span class="ruby">    now     立刻关机</span></span><br><span class="line"><span class="ruby">halt        关机</span></span><br><span class="line"><span class="ruby">reboot      重启</span></span><br></pre></td></tr></table></figure><h3 style="color: red" id="6">Linux管道</h3><p>&ensp; &ensp;将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p><p>&ensp; &ensp;例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r “<span class="built_in">close</span>” /<span class="built_in">home</span><span class="comment">/* | more</span></span><br></pre></td></tr></table></figure><p>&ensp; &ensp;在home目录下所有文件中查找，包括close的文件，并分页输出。</p><h3 style="color: red" id="7">Linux软件包管理</h3><p>&ensp; &ensp;<strong>dpkg(Debian Package)</strong>管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。<br>比如安装 <strong>tree</strong>命令的安装包，先将 <strong>tree.deb</strong>传到Linux系统中。再使用如下命令安装。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> tree_1.<span class="number">5.3</span>-<span class="number">1</span>_i386<span class="selector-class">.deb</span>  安装软件</span><br><span class="line">sudo dpkg -r tree             卸载软件</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;注：将 <strong>tree.deb</strong>传到Linux系统中，有多种方式。<strong>VMwareTool</strong>，使用挂载方式；使用winSCP工具等；</p><p>&ensp; &ensp;<strong>APT（Advanced Packaging Tool）</strong>高级软件工具。这种方法适合系统能够连接互联网的情况。<br>依然以tree为例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install tree     安装tree</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> tree      卸载tree</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> update           更新软件</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;将 <strong>.rpm</strong>文件转为 <strong>.deb</strong>文件<br><strong>.rpm</strong>为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">alien</span> <span class="selector-tag">abc</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><h3 style="color: red" id="8">vim使用</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">vim</span>三种模式：命令模式、插入模式、编辑模式。使用<span class="selector-tag">ESC</span>或<span class="selector-tag">i</span>或：来切换模式。</span><br><span class="line">命令模式下：</span><br><span class="line"><span class="selector-pseudo">:q</span>            退出</span><br><span class="line"><span class="selector-pseudo">:q</span>!           强制退出</span><br><span class="line"><span class="selector-pseudo">:wq</span>           保存并退出</span><br><span class="line"><span class="selector-pseudo">:set</span> <span class="selector-tag">number</span>   显示行号</span><br><span class="line"><span class="selector-pseudo">:set</span> <span class="selector-tag">nonumber</span> 隐藏行号</span><br><span class="line">/<span class="selector-tag">apache</span>       在文档中查找<span class="selector-tag">apache</span> 按<span class="selector-tag">n</span>跳到下一个，<span class="selector-tag">shift</span>+<span class="selector-tag">n</span>上一个</span><br><span class="line"><span class="selector-tag">yyp</span>           复制光标所在行，并粘贴</span><br><span class="line"><span class="selector-tag">h</span>(左移一个字符←)、<span class="selector-tag">j</span>(下一行↓)、<span class="selector-tag">k</span>(上一行↑)、<span class="selector-tag">l</span>(右移一个字符→)</span><br></pre></td></tr></table></figure><h3 style="color: red" id="9">用户及用户组管理</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd    存储用户账号</span><br><span class="line">/etc<span class="built_in">/group </span>    存储组账号</span><br><span class="line">/etc/shadow    存储用户账号的密码</span><br><span class="line">/etc/gshadow   存储用户组账号的密码</span><br><span class="line">useradd        添加用户名</span><br><span class="line">userdel        删除用户名</span><br><span class="line">adduser        添加用户名</span><br><span class="line">groupadd       添加组名</span><br><span class="line">groupdel       删除组名</span><br><span class="line">passwd root    给root设置密码</span><br><span class="line">su root</span><br><span class="line">su – root</span><br><span class="line">/etc<span class="built_in">/profile </span>  系统环境变量</span><br><span class="line">bash_profile   用户环境变量</span><br><span class="line">.bashrc        用户环境变量</span><br><span class="line">su<span class="built_in"> user </span>       切换用户，加载配置文件.bashrc</span><br><span class="line">su –<span class="built_in"> user </span>     切换用户，加载配置文件/etc<span class="built_in">/profile </span>，加载bash_profile</span><br></pre></td></tr></table></figure><h3 style="color: red" id="8">更改文件的用户及用户组</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo chown <span class="string">[-R]</span> owner<span class="string">[:group]</span> &#123;File|Directory&#125;</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户 <strong>hadoop</strong>，组 <strong>hadoop</strong><br>&ensp; &ensp;要想切换此文件所属的用户及组。可以使用命令。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">chown</span> <span class="selector-tag">root</span><span class="selector-pseudo">:root</span> <span class="selector-tag">jdk-7u21-linux-i586</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><h3 style="color: red" id="10">文件权限管理</h3><p><strong>三种基本权限</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R   读  数值表示为<span class="number">4</span></span><br><span class="line">W   写  数值表示为<span class="number">2</span></span><br><span class="line">X   可执行 数值表示为<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="http://oy89aex8x.bkt.clouddn.com/l2.png" alt="基本权限"></p><p>&ensp; &ensp;如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为 <strong>-rw-rw-r–-rw-rw-r–</strong>一共十个字符，分成四段。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一个字符  -  表示普通文件；这个位置还可能会出现  l 链接；  d 表示目录</span><br><span class="line"></span><br><span class="line">第二三四个字符  rw-  表示当前所属用户的权限。     所以用数值表示为<span class="number">4</span>+<span class="number">2</span>=<span class="number">6</span></span><br><span class="line"></span><br><span class="line">第五六七个字符  rw-  表示当前所属组的权限。        所以用数值表示为<span class="number">4</span>+<span class="number">2</span>=<span class="number">6</span></span><br><span class="line"></span><br><span class="line">第八九十个字符  r–  表示其他用户权限。                 所以用数值表示为<span class="number">2</span></span><br><span class="line"></span><br><span class="line">所以操作此文件的权限用数值表示为<span class="number">662</span>?</span><br></pre></td></tr></table></figure><h3 style="color: red" id="11">更改权限</h3><p>&ensp; &ensp;</p><h6>sudo chmod [u所属用户  g所属组  o其他用户   a所有用户]    [+增加权限   -减少权限]   [r   w   x]   目录名 </h6><p></p><p>&ensp; &ensp;例如：有一个文件filename，权限为 <strong>-rw-r—-x</strong> ,将权限值改为 <strong>-rwxrw-r-x</strong>，用数值表示为765<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+<span class="keyword">x</span> g+w o+r filename</span><br></pre></td></tr></table></figure></p><p>&ensp; &ensp;上面的例子可以用数值表示</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">765</span> filename</span><br></pre></td></tr></table></figure><h3 style="color: red" id="12">其他命令</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">linux nc</span><br><span class="line"></span><br><span class="line"><span class="built_in">tree</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> 奇淫技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建 FTP 文件服务</title>
      <link href="/2017-10-23/%E6%90%AD%E5%BB%BA%20FTP%20%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
      <url>/2017-10-23/%E6%90%AD%E5%BB%BA%20FTP%20%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h3 id="（一）安装并启动-FTP-服务"><a href="#（一）安装并启动-FTP-服务" class="headerlink" title="（一）安装并启动 FTP 服务"></a>（一）安装并启动 FTP 服务</h3><h5 id="安装-VSFTPD"><a href="#安装-VSFTPD" class="headerlink" title="安装 VSFTPD"></a>安装 VSFTPD</h5><p>使用 yum 安装 vsftpd：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> vsftpd -y</span><br></pre></td></tr></table></figure><p>vsftpd 是在 Linux 上被广泛使用的 FTP 服务器，根据其 <a href="https://security.appspot.com/vsftpd.html" target="_blank" rel="noopener">官网介绍</a>，它可能是 <code>UNIX-like</code>系统下最安全和快速的 FTP 服务器软件。</p><a id="more"></a><h5 id="启动-VSFTPD"><a href="#启动-VSFTPD" class="headerlink" title="启动 VSFTPD"></a>启动 VSFTPD</h5><p>安装完成后，启动 FTP 服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd <span class="literal">start</span></span><br></pre></td></tr></table></figure><p>启动后，可以看到系统已经[监听了 21 端口]：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltp <span class="string">| grep 21</span></span><br></pre></td></tr></table></figure><p>此时，访问 ftp://&lt;服务器 IP 地址&gt; 可浏览机器上的 <code>/var/ftp</code>目录了。</p><blockquote><p>FTP 协议默认使用 21 端口作为服务端口</p></blockquote><h3 id="（二）配置-FTP-权限"><a href="#（二）配置-FTP-权限" class="headerlink" title="（二）配置 FTP 权限"></a>（二）配置 FTP 权限</h3><p>目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限</p><h5 id="了解-VSFTP-配置"><a href="#了解-VSFTP-配置" class="headerlink" title="了解 VSFTP 配置"></a>了解 VSFTP 配置</h5><p>vsftpd 的配置目录为 <code>/etc/vsftpd</code>，包含下列的配置文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vsftpd<span class="selector-class">.conf</span>  为主要配置文件</span><br><span class="line">ftpusers  配置禁止访问 FTP 服务器的用户列表</span><br><span class="line">user_list  配置用户访问控制</span><br></pre></td></tr></table></figure><p>阅读上述配置以了解更多信息。如果您准备好了，点击下一步开始修改配置来设置权限。</p><h5 id="阻止匿名访问和切换根目录"><a href="#阻止匿名访问和切换根目录" class="headerlink" title="阻止匿名访问和切换根目录"></a>阻止匿名访问和切换根目录</h5><p>匿名访问和切换根目录都会给服务器带来 <strong>安全风险</strong>，我们把这两个功能关闭。</p><p>编辑 <code>/etc/vsftpd/vsftpd.conf</code>，找到下面两处配置并修改：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用匿名用户</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止切换根目录</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure><p>编辑完成后，按 Ctrl + S 保存配置，重新启动 FTP 服务，如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service vsftpd restart</span></span><br></pre></td></tr></table></figure><blockquote><p>匿名访问让所有人都可以上传文件到服务器上而无需鉴权，而允许切换根目录则可能产生越权访问问题。</p><p>在代码编辑器中，用 Ctrl + F 进行搜索，Mac 用户用 Cmd + F 进行搜索</p></blockquote><h5 id="创建-FTP-用户"><a href="#创建-FTP-用户" class="headerlink" title="创建 FTP 用户"></a>创建 FTP 用户</h5><p>创建一个用户 ftpuser ：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">useradd ftpuser</span></span><br></pre></td></tr></table></figure><p>为用户 ftpuser 设置密码 [?]：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"Password"</span> | passwd ftpuser <span class="params">--stdin</span></span><br></pre></td></tr></table></figure><h5 id="限制该用户仅能通过-FTP-访问"><a href="#限制该用户仅能通过-FTP-访问" class="headerlink" title="限制该用户仅能通过 FTP 访问"></a>限制该用户仅能通过 FTP 访问</h5><p>限制用户 ftpuser 只能通过 FTP 访问服务器，而不能直接登录服务器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s <span class="regexp">/sbin/</span>nologin ftpuser</span><br></pre></td></tr></table></figure><h5 id="为用户分配主目录"><a href="#为用户分配主目录" class="headerlink" title="为用户分配主目录"></a>为用户分配主目录</h5><p>为用户 <code>ftpuser</code>创建 <strong>主目录</strong>并约定：</p><p><code>/data/ftp</code>为主目录, 该目录不可上传文件</p><p><code>/data/ftp/pub</code>文件只能上传到该目录下</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/ftp/pub</span></span><br></pre></td></tr></table></figure><p>创建登录欢迎文件：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">echo</span> <span class="string">"Welcome to use FTP service."</span> &gt; /<span class="class"><span class="keyword">data</span>/ftp/welcome.txt</span></span><br></pre></td></tr></table></figure></p><p>设置访问权限：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">chmod</span> a-w /<span class="class"><span class="keyword">data</span>/ftp &amp;&amp; chmod 777 -<span class="type">R</span> /<span class="keyword">data</span>/ftp/pub</span></span><br></pre></td></tr></table></figure><p>设置为用户的主目录：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">usermod</span> -d /<span class="class"><span class="keyword">data</span>/ftp ftpuser</span></span><br></pre></td></tr></table></figure><blockquote><p>用户的主目录是用户通过 FTP 登录后看到的根目录</p><p>方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。</p></blockquote><h3 id="（三）访问-FTP-服务"><a href="#（三）访问-FTP-服务" class="headerlink" title="（三）访问 FTP 服务"></a>（三）访问 FTP 服务</h3><p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务</p><h5 id="访问-FTP-服务"><a href="#访问-FTP-服务" class="headerlink" title="访问 FTP 服务"></a>访问 FTP 服务</h5><p>根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p><h5 id="通过-Windows-资源管理器访问"><a href="#通过-Windows-资源管理器访问" class="headerlink" title="通过 Windows 资源管理器访问"></a>通过 Windows 资源管理器访问</h5><p>Windows 用户可以复制下面的[链接]到资源管理器的地址栏访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ftp:</span><span class="comment">//ftpuser:Password@&lt;您的 CVM IP 地址&gt;</span></span><br></pre></td></tr></table></figure><h5 id="通过-FTP-客户端工具访问"><a href="#通过-FTP-客户端工具访问" class="headerlink" title="通过 FTP 客户端工具访问"></a>通过 FTP 客户端工具访问</h5><p>FTP 客户端工具众多，下面推荐两个常用的：</p><ul><li>WinSCP - Windows 下的 FTP 和 SFTP 连接客户端</li><li>FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac</li></ul><p>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：</p><p><strong>主机：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;您的 CVM<span class="built_in"> IP </span>地址&gt;</span><br></pre></td></tr></table></figure><p><strong>用户：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ftpuser</span></span><br></pre></td></tr></table></figure><p><strong>密码：</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Password</span></span><br></pre></td></tr></table></figure><p>如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！</p><p>接下来，请上传任意一张图片到您的 FTP 服务器上的pub目录下，然后，就可以在 <code>/data/ftp/pub</code> 中看到了。</p><p><strong>注意: 请不要直接上传文件到根目录下，您应该选择上传到 pub 目录下</strong></p><blockquote><p>如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务</p><p>如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据</p></blockquote>]]></content>
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里云搭建 WordPress 站点</title>
      <link href="/2017-10-21/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA%20Wordpress%20%E7%AB%99%E7%82%B9/"/>
      <url>/2017-10-21/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA%20Wordpress%20%E7%AB%99%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="（一）-一键部署Web环境"><a href="#（一）-一键部署Web环境" class="headerlink" title="（一） 一键部署Web环境"></a>（一） 一键部署Web环境</h3><h5 id="1-搭建条件"><a href="#1-搭建条件" class="headerlink" title="1. 搭建条件"></a>1. 搭建条件</h5><p>&ensp; &ensp;在Web环境的 ECS 实例中，已保存并解压本次实验所需的一键安装包。通过如下的实验操作步骤，可以快速搭建Web环境。<br>&ensp; &ensp;<strong>说明：本实验使用Linux系统的一键安装压缩包，一键安装包目前仅支持 <code>CentOS 6.5</code>以上版本、<code>Ubuntu 12.04</code> 以上版本以及 <code>Aliyun Linux</code> 所有版本。</strong></p><h5 id="2-远程登录到-ECS-服务器。"><a href="#2-远程登录到-ECS-服务器。" class="headerlink" title="2. 远程登录到 ECS 服务器。"></a>2. 远程登录到 ECS 服务器。</h5><p>&ensp; &ensp;需要 ECS 服务器的 <code>弹性IP ，用户名和密码</code> 。</p><p>&ensp; &ensp;<strong>说明：远程登录 Linux 系统ECS实例的详细步骤，请参考云中沙箱<a href="https://edu.cloudcare.cn/help?menuId=2-0&amp;docName=doc-remote-connect" target="_blank" rel="noopener">帮助文档</a></strong></p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp1.png" alt="远程登录"></p><a id="more"></a><h5 id="3-查看解压"><a href="#3-查看解压" class="headerlink" title="3. 查看解压"></a>3. 查看解压</h5><p>&ensp; &ensp;使用 <code>ls</code>命令，查看到当前根目录下有一个压缩包和一个文件夹<code>sh-1.5.5</code> 。<code>sh-1.5.5</code> 就是解压后的一键安装包的目录。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp2.png" alt="目录"></p><h5 id="4-修改权限"><a href="#4-修改权限" class="headerlink" title="4. 修改权限"></a>4. 修改权限</h5><p>&ensp; &ensp;修改一键安装包的权限，用户必须修改一键安装包目录的读写权限，否则，一键安装会因为权限不足而失败，修改命令为：<code>chmod -R 777 sh-1.5.5</code> 。执行命令 <code>cd sh-1.5.5/</code>，进入 <code>sh-1.5.5</code>目录中，开始执行一键部署 Web 环境。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp3.png" alt="修改一键安装包的权限"></p><h5 id="5-运行安装文件"><a href="#5-运行安装文件" class="headerlink" title="5. 运行安装文件"></a>5. 运行安装文件</h5><p>运行命令 <code>./install.sh</code> ，输入如下信息：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）选择Web使用的服务器为apache还是nignx，本实验使用nginx服务，选择“<span class="number">1</span>”。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）选择nginx版本，直接“回车”，默认为nginx的<span class="number">1.4</span><span class="number">.4</span>版本。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）本实验使用php环境，所以选择“<span class="number">1</span>”；</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）php版本选择最新版“<span class="number">5.5</span><span class="number">.7</span>”，选择“<span class="number">4</span>”。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>）本实验使用的数据库mysql最新版，选择“<span class="number">3</span>”。</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;完成后，显示安装的版本信息，确认无误，选择 y ，开始安装Web环境。说明：由于安装的软件较多，因此，运行的时间会较长，大约需要20分钟，建议学员可以查看后续的实验内容，或者了解 <code>wordpress</code>网站的使用技巧。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp4.png" alt="运行安装文件"></p><h5 id="6-完成安装"><a href="#6-完成安装" class="headerlink" title="6. 完成安装"></a>6. 完成安装</h5><p>&ensp; &ensp;窗口显示 &lt;软件&gt; ok 。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp5.png" alt="完成安装"></p><p>&ensp; &ensp;Web 环境安装完成，但不一定安装成功。因此，输入命令： netstat -tunpl 。查看当前 tcp 和 udp 协议相关的程序监听服务状态：<code>80 端口是 nginx 服务；21 端口是 ftp 服务；9000 端口是 php 服务；3306 端口是mysql 服务</code>，证明 Web 环境搭建成功。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp6.png" alt="环境搭建成功"></p><h5 id="7-验证-Nginx-服务器。"><a href="#7-验证-Nginx-服务器。" class="headerlink" title="7. 验证 Nginx 服务器。"></a>7. 验证 Nginx 服务器。</h5><p>&ensp; &ensp;打开浏览器，在新页面中，输入 Web环境(Linux) 的 弹性IP ，页面显示 phpwind 安装页面，这是由于一键安装包中默认安装 phpwind 站点。</p><p>&ensp; &ensp;说明：此步操作的目的仅用于验证 Nginx 服务是否可用，而不是介绍如何在一键安装包中部署 phpwind 论坛网站。在下一节中，介绍如何在一键安装的 web 环境中，安装部署 wordpress 网站。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/wp7.png" alt="phpwind 安装页面"></p><h3 id="（二）-Wordpress站点安装部署"><a href="#（二）-Wordpress站点安装部署" class="headerlink" title="（二） Wordpress站点安装部署"></a>（二） Wordpress站点安装部署</h3><h5 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h5><p>&ensp; &ensp;在一键安装的 Web 环境下安装 Wordpress 站点之前，首先，需要修改 nginx 服务的配置文件，否则，客户将无法通过 ECS 外网IP 访问 wordpress 站点、安装 wordpress。</p><h5 id="2-www-目录修改"><a href="#2-www-目录修改" class="headerlink" title="2. www 目录修改"></a>2. www 目录修改</h5><p>&ensp; &ensp;首先，在 Web(Linux) 实例的 shell 远程访问窗口，解压 wordpress 安装包到网站 www 目录下。执行命令：<code>cd</code>，返回到 root 目录。执行命令：<code>unzip wordpress-4.5.1-zh_CN.zip -d /alidata/www/</code> ，解压 wordpress安装包到 <code>/alidata/www</code>下。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp8.png" alt="解压 wordpress安装包"></p><p>&ensp; &ensp;完成解压后，执行命令：<code>cd /alidata/www/</code> ，进入 www 目录。使用 <code>ls</code>命令，查看 wordpress 已解压到 www 目录下。修改目录 www 的所属组，执行命令：<code>chown www /alidata/www/wordpress -R</code>  ，将网站目录设为 wordpress 。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp9.png" alt="网站目录设为 wordpress"></p><h5 id="3-服务配置"><a href="#3-服务配置" class="headerlink" title="3.服务配置"></a>3.服务配置</h5><p>&ensp; &ensp;必须修改 nignx 服务配置文件，客户才可以通过外网IP 地址访问 wordpress 。首先，执行命令：<code>cd /alidata/server/nginx/conf/vhosts</code>  ，进入一键安装包 nignx 服务配置目录。然后，执行命令： <code>cp -p phpwind.conf wordpress.conf</code> ，复制一份 phpwind 的配置文件，并命名为 wordpress.conf ，此文件用于修改配置信息为 wordpress 站点。使用<code>ls</code>  ，可以查看到 wordpress.conf 和 phpwind.conf 两个配置文件。执行命令：<code>mv phpwind.conf phpwind.conf.bk</code> ，修改 phpwind 配置文件的文件属性，确保 nginx 服务器下仅有一个网站的配置文件</p><p>&ensp; &ensp;<strong>说明：修改phpwind文件属性是因为nginx下仅能有一个配置文件，若有两个不同网站的配置文件会导致端口冲突，而导致客户无法正常访问网站。</strong></p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp10.png" alt="配置文件"></p><h5 id="4-wordpress-conf-配置"><a href="#4-wordpress-conf-配置" class="headerlink" title="4. wordpress.conf 配置"></a>4. wordpress.conf 配置</h5><p>&ensp; &ensp;修改 wordpress.conf 配置文件的信息，用户可以访问 wordpress 站点。执行命令： <code>vim wordpress.conf</code>，进入 wordpress.conf 的修改页面。修改如下信息：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root的值为<span class="meta-keyword">/alidata/</span>www/wordpress；访问的站点目录。</span><br><span class="line"></span><br><span class="line">倒数第二行中的include处，改为：<span class="meta-keyword">/alidata/</span>server<span class="meta-keyword">/nginx/</span>conf<span class="meta-keyword">/rewrite/</span>wordpress.conf；此处为站点伪静态规则。</span><br><span class="line"></span><br><span class="line">access_log处，改为：<span class="meta-keyword">/alidata/</span>log<span class="meta-keyword">/nginx/</span>access/wordpress.log；此处指定站点的日志文件。</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;完成后，按 esc 键退出编辑状态，然后输入命令<code>:wq</code> ，保存修改并退出文件。说明：本实验使用的访问地址为 ECS 实例的外网IP 地址，所以 server_name 为默认值 localhost ,真实的工作环境中，用户请根据自己网站的域名地址，修改 <code>server_name</code>为相应的域名值。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp11.png" alt="wordpress.conf "></p><h5 id="5-重启-nginx"><a href="#5-重启-nginx" class="headerlink" title="5. 重启 nginx"></a>5. 重启 nginx</h5><p>&ensp; &ensp;完成文件的修改后，执行命令： <code>service nginx restart</code>，重启 nginx 服务，wordpress.conf 的配置生效。在浏览器的新建页面中，输入 Web环境(Linux) 的 外网地址 ，页面显示 wordpress 网站的安装页面。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp12.png" alt="重启 nginx"></p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp13.png" alt=" wordpress 网站"></p><h5 id="6-外网访问"><a href="#6-外网访问" class="headerlink" title="6.  外网访问"></a>6.  外网访问</h5><p>&ensp; &ensp;至此，可以通过外网IP ，<code>ip/wp-admin/setup-config.php</code>访问 wordpress 。接下来，在开始安装 wordpress 之前，创建 wordpress 网站使用的 mysql 数据。</p><p>&ensp; &ensp;<strong>说明：如上的配置内容，也可用于网站迁移，只需将网站的根目录迁移到 <code>/alidata/www</code>下就可以，其余的步骤类似。</strong></p><h3 id="（三）-使用PhpmyAdmin创建wordpress数据库"><a href="#（三）-使用PhpmyAdmin创建wordpress数据库" class="headerlink" title="（三） 使用PhpmyAdmin创建wordpress数据库"></a>（三） 使用PhpmyAdmin创建wordpress数据库</h3><h5 id="1-创建wordpress数据库"><a href="#1-创建wordpress数据库" class="headerlink" title="1. 创建wordpress数据库"></a>1. 创建wordpress数据库</h5><p>&ensp; &ensp;在开始安装 wordpress 之前，在mysql中创建一个 wordpress 数据库，用于存储 wordpress 网站的数据。</p><h5 id="2-迁移"><a href="#2-迁移" class="headerlink" title="2. 迁移"></a>2. 迁移</h5><p>&ensp; &ensp;首先，将一键安装包安装的 phpmyadmin 迁移到 wordpress 网站的根目录下。phpmyadmin 默认是安装在 phpwind 网站的根目录下，因此，执行命令： <code>mv /alidata/www/phpwind/phpmyadmin/ /alidata/www/wordpress/</code>，将 phpmyadmin 部署到 wordpress 网站中。使用命令： <code>cd /alidata/www/wordpress</code>和 <code>ls</code>，查看到已将phpmyadmin 迁移到 wordpress 网站的根目录下。</p><p>&ensp; &ensp;<strong>说明：一键安装包默认将 phpmyadmin 部署到 phpwind 网站的根目录中。因此，本实验不再介绍 phpmyadmin 安装部署。若要了解如何安装 phpmyadmin 软件，请参考链接：<a href="https://edu.cloudcare.cn/help?menuId=2-0&amp;docName=doc-remote-connect" target="_blank" rel="noopener">https://edu.cloudcare.cn/help?menuId=2-0&amp;docName=doc-remote-connect</a></strong></p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp14.png" alt="安装的 phpmyadmin"></p><h5 id="3-访问-phpmyadmin"><a href="#3-访问-phpmyadmin" class="headerlink" title="3. 访问 phpmyadmin"></a>3. 访问 phpmyadmin</h5><p>&ensp; &ensp;在浏览器中的新页面中，输入 Web环境(Linux) 的 外网<code>IP/phpmyadmin/</code>。访问 phpmyadmin 。在语言选择栏，选择 中文 。</p><p>&ensp; &ensp;<strong>注意：若在地址栏的结尾处不输入 / ，也就是地址栏输入信息为 <code>外网IP/phpmyadmin</code> 时,页面显示为空，无法进入 phpmyadmin 的页面进行访问。</strong></p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp15.png" alt="访问 phpmyadmin"></p><p>&ensp; &ensp;登录 phpmyadmin 的用户名和密码，也就是 mysql 的用户名和密码。返回 Web(Linux)  ECS 实例的 shell 登录窗口， <code>cat ~/sh-1.5.5/account.log</code>，查看 mysql 的用户名和密码。返回浏览器 phpmyadmin 登录页面，输入用户名和密码，并点击 执行 。</p><p>&ensp; &ensp;<strong>说明：<code>account.log</code>不仅保存 mysql 的登录信息，也保存 ftp 的登录信息。若用户使用 ftp，则可通过此文件查看登录信息。</strong></p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp16.png" alt="account.log"></p><h5 id="4-创建wordpress数据库"><a href="#4-创建wordpress数据库" class="headerlink" title="4. 创建wordpress数据库"></a>4. 创建wordpress数据库</h5><p>&ensp; &ensp;进入 phpmyadmin 的页面后，选择顶层栏的 数据库 ，进入 mysql 数据库的管理页面。在 新建数据库 下，输入 数据库名 为 wordpress ，并点击 创建 ，为 wordpress 创建一个数据库。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp17.png" alt="phpmyadmin"></p><h5 id="5-部署-phpmyadmin"><a href="#5-部署-phpmyadmin" class="headerlink" title="5. 部署 phpmyadmin"></a>5. 部署 phpmyadmin</h5><p>&ensp; &ensp;至此，已成功部署 phpmyadmin ，用户可以通过 phpmyadmin 管理 wordpress 站点的数据库中的信息。并创建 wordpress 使用的数据库。</p><h3 id="（四）-安装wordpress站点"><a href="#（四）-安装wordpress站点" class="headerlink" title="（四） 安装wordpress站点"></a>（四） 安装wordpress站点</h3><h5 id="1-开始部署"><a href="#1-开始部署" class="headerlink" title="1. 开始部署"></a>1. 开始部署</h5><p>&ensp; &ensp;在浏览器中的新页面中，输入 <strong>Web环境(Linux)</strong> 的 <strong>外网IP</strong> （或者也可以刷新上一章节中访问 Web ECS 实例的外网IP 的页面）。此时，页面变为 wordpress 安装页面。点击 <strong>现在就开始</strong> ，开始部署安装 Wordpress。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp18.png" alt=""></p><h5 id="2-数据库连接"><a href="#2-数据库连接" class="headerlink" title="2. 数据库连接"></a>2. 数据库连接</h5><p>&ensp; &ensp;首先，部署 wordpress 网站的数据库信息，在数据库连接信息页面中，输入如下信息：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)     数据库名：wordpress；</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)     用户名：root；mysql的登录用户名，可在account.log文件中查看。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)     密码：mysql的登录密码，可在account.log文件中查看。</span><br></pre></td></tr></table></figure><p>&ensp; &ensp; 其余设置保持默认值，完成后，点击<strong> 提交 </strong> 。完成 wordpress 数据库连接。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp19.png" alt=""></p><h5 id="3-进行安装"><a href="#3-进行安装" class="headerlink" title="3. 进行安装"></a>3. 进行安装</h5><p>&ensp; &ensp;提示数据库连接成功，点击 <strong>进行安装</strong> ，开始在 Web 环境中，部署 wordpress 网站。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp20.png" alt=""></p><p>&ensp; &ensp; 在欢迎页面，输入 wordpress 的如下信息，用户可自定义：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)     站点标题：自助实验SL051；</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)     用户名：admin；注意命名规则</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)     密码：admin；可使用系统默认提供的，但请保存到本地，之后在登录admin是使用。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>)     勾选“确认使用弱密码”；</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>)     电子邮件：admin@jiagouyun.com；此处请填写真实的个人邮箱，在忘记admin密码时，可通过邮箱找回。</span><br></pre></td></tr></table></figure><p>&ensp; &ensp;完成如上信息后，点击 <strong>安装WordPress</strong> ，完成 Wordpress 网站安装。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp21.png" alt=""></p><p>&ensp; &ensp;页面提示安装成功，点击 登录 。进入 Wordpress 站点。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp22.png" alt=""></p><h5 id="4-登录"><a href="#4-登录" class="headerlink" title="4.  登录"></a>4.  登录</h5><p>&ensp; &ensp;弹出登录的页面，输入用户名 <strong>admin </strong>和密码 <strong>admin</strong> 。访问 wordpress 仪表盘管理页面。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp23.png" alt=""></p><h5 id="5-站点首页"><a href="#5-站点首页" class="headerlink" title="5. 站点首页"></a>5. 站点首页</h5><p>&ensp; &ensp; 点击仪表盘左上角的 <strong>自助实验SL051 </strong>中的 <strong>查看站点</strong> ，进入 wordpress 站点首页。</p><p><img src="http://oy89aex8x.bkt.clouddn.com/wp24.png" alt=""></p><h5 id="6-完成安装-1"><a href="#6-完成安装-1" class="headerlink" title="6. 完成安装"></a>6. 完成安装</h5><p>&ensp; &ensp; 至此，已成功完成本次实验的所有内容：使用一键安装包搭建 ECS 实例的 Web 环境，并安装 Wordpress 站点。</p>]]></content>
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 逗号和点号的区别</title>
      <link href="/2017-10-18/PHP-%E9%80%97%E5%8F%B7%E5%92%8C%E7%82%B9%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017-10-18/PHP-%E9%80%97%E5%8F%B7%E5%92%8C%E7%82%B9%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>比如:</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> echo 'abc<span class="string">'.'</span><span class="function"><span class="keyword">def</span>'</span>; <span class="comment">//用点号连接字符串 </span></span><br><span class="line"><span class="number">2.</span> echo 'abc<span class="string">','</span><span class="function"><span class="keyword">def</span>'</span>; <span class="comment">//用逗号连接字符串</span></span><br></pre></td></tr></table></figure><p>也许很多人都知道逗号要比点号快.但是不知道为什么.更不知道这两者到底有什么区别.<br>那么下面我们就举一些例子.来认清楚他们之前的区别.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> echo '<span class="number">1</span>+<span class="number">5</span>=' . <span class="number">1</span>+<span class="number">5</span>;</span><br></pre></td></tr></table></figure></p><p>看看上面的.输出的结果是6..而不是1+5=6.有些神奇吧?<br>更神奇的是你看下面的例子.<br><a id="more"></a> </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> echo <span class="string">"1+5="</span> . <span class="number">5</span>+<span class="number">1</span>;    <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><p>结果十分奇怪.我们看到.我们把5和1换下位置.结果就变成2了.<br>为什么会这样.难道在PHP中加法是没有交换律的?当然不是..<br>我们先不去想为什么.如果我把上面的点号换成逗号试下.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> echo '<span class="number">1</span>+<span class="number">5</span>=' , <span class="number">5</span>+<span class="number">1</span>;    <span class="comment">//输出 1+5=6 </span></span><br><span class="line"><span class="number">2.</span> echo '<span class="number">1</span>+<span class="number">5</span>=' , <span class="number">1</span>+<span class="number">5</span>;    <span class="comment">//输出 1+5=6</span></span><br></pre></td></tr></table></figure></p><p>可以看出.只有使用逗号我们才可以得到意料中的结果.<br>那为什么点号就不行呢?逗号为什么就行呢?<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> echo ('<span class="number">1</span>+<span class="number">5</span>' . <span class="number">5</span>)+<span class="number">1</span>; <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure></p><p>我们给前面的加个括号后.得到的结果是一样的.证明PHP是先连接字符串再进行加法计算了.按照从左向右的方向进行的.<br>那么好.既然是先连接的字符串.那么就应该是”1+55”了.然后再用这个字符串加上1.那为什么就会输出2呢?<br>这个跟PHP中字符串变成数字的机制是相关的.我们来看下面的例子<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">echo</span> (<span class="keyword">int</span>)<span class="string">'abc1'</span>;   <span class="comment">//输出0 </span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">echo</span> (<span class="keyword">int</span>)<span class="string">'1abc'</span>; <span class="comment">//输出1 </span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">echo</span> (<span class="keyword">int</span>)<span class="string">'2abc'</span>; <span class="comment">//输出2 </span></span><br><span class="line"><span class="number">4.</span> <span class="keyword">echo</span> (<span class="keyword">int</span>)<span class="string">'22abc'</span>; <span class="comment">//输出22</span></span><br></pre></td></tr></table></figure></p><p>从上面的例子我们可以看出.如果将一个字符串强制转换成一个数字.PHP会去搜索这个字符串的开头.如果开头是数字就转换.如果不是就直接返回0.<br>回到刚才的1+55.既然这个字符串是1+55.所以强制类型转换后就应该是1了.在此基础上加1.当然是2了.<br>为了证明我们的猜想.我们来验证一下.<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> echo '<span class="number">5</span>+<span class="number">1</span>=' . <span class="number">1</span>+<span class="number">5</span>; <span class="comment">//输出10 </span></span><br><span class="line"><span class="number">2.</span> echo '<span class="number">5</span>+<span class="number">1</span>=' . <span class="number">5</span>+<span class="number">1</span>; <span class="comment">//输出6 </span></span><br><span class="line"><span class="number">3.</span> echo '<span class="number">1</span>+<span class="number">5</span>=' . <span class="number">1</span>+<span class="number">5</span>; <span class="comment">//输出6 </span></span><br><span class="line"><span class="number">4.</span> echo '<span class="number">1</span>+<span class="number">5</span>=' . <span class="number">5</span>+<span class="number">1</span>; <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure></p><p>结果证明.我们的设想是正确的.<br>那么为什么使用逗号就没有上面的问题了呢?<br>手册上说了.用逗号是multiple parameters.<br>也就是说是多参数.换句话说.<br>逗号分隔开的就相当于是N个参数.也就是说把echo当个函数用.<br>这样的话.echo会对每个参数先进行计算.最后再进行连接后输出.所以我们用逗号就不存在上面的问题了</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP-微信API接口类</title>
      <link href="/2017-10-14/PHP-%E5%BE%AE%E4%BF%A1API%E6%8E%A5%E5%8F%A3%E7%B1%BB/"/>
      <url>/2017-10-14/PHP-%E5%BE%AE%E4%BF%A1API%E6%8E%A5%E5%8F%A3%E7%B1%BB/</url>
      <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line">/**</span><br><span class="line"> * wechat php test</span><br><span class="line"><span class="php"> */</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"><span class="comment">//define your token</span></span></span><br><span class="line"><span class="php"><span class="comment">//定义TOKEN秘钥</span></span></span><br><span class="line"><span class="php">define(<span class="string">"TOKEN"</span>, <span class="string">"weixin"</span>);</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"><span class="comment">//实例化微信对象</span></span></span><br><span class="line"><span class="php">$wechatObj = <span class="keyword">new</span> wechatCallbackapiTest();</span></span><br><span class="line"><span class="php"><span class="comment">//验证成功后注释valid方法</span></span></span><br><span class="line"><span class="php"><span class="comment">//$wechatObj-&gt;valid();</span></span></span><br><span class="line"><span class="php"><span class="comment">//开启自动回复功能</span></span></span><br><span class="line"><span class="php">$wechatObj-&gt;responseMsg();</span></span><br></pre></td></tr></table></figure><a id="more"></a> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wechatCallbackapiTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//实现valid验证方法:实现对接微信公众平台</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//接受随机字符串</span></span><br><span class="line">    $echoStr = $_GET[<span class="string">"echostr"</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//valid signature , option</span></span><br><span class="line">    <span class="comment">//进行用户数字签名验证</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checkSignature())&#123;</span><br><span class="line">      <span class="comment">//如果成功,则返回接受到的随机字符串</span></span><br><span class="line">      <span class="keyword">echo</span> $echoStr;</span><br><span class="line">      <span class="comment">//退出</span></span><br><span class="line">      <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义自动回复功能</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">responseMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//get post data, May be due to the different environments</span></span><br><span class="line">    <span class="comment">//接受用户端发送过来的xml数据</span></span><br><span class="line">    $postStr = $GLOBALS[<span class="string">"HTTP_RAW_POST_DATA"</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//extract post data</span></span><br><span class="line">    <span class="comment">//判断xml数据是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($postStr))&#123;</span><br><span class="line">        <span class="comment">/* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection,</span></span><br><span class="line"><span class="comment">          the best way is to check the validity of xml by yourself */</span></span><br><span class="line">        libxml_disable_entity_loader(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//通过simplexml进行xml解析</span></span><br><span class="line">        $postObj = simplexml_load_string($postStr, <span class="string">'SimpleXMLElement'</span>, LIBXML_NOCDATA);</span><br><span class="line">        <span class="comment">//接受微信的手机端</span></span><br><span class="line">        $fromUsername = $postObj-&gt;FromUserName;</span><br><span class="line">        <span class="comment">//微信公众平台</span></span><br><span class="line">        $toUsername = $postObj-&gt;ToUserName;</span><br><span class="line">        <span class="comment">//接受用户发送的关键词</span></span><br><span class="line">        $keyword = trim($postObj-&gt;Content);</span><br><span class="line">        <span class="comment">//1.接受用户消息类型</span></span><br><span class="line">        $msgType = $postObj -&gt; MsgType;</span><br><span class="line">        <span class="comment">//时间戳</span></span><br><span class="line">        $time = time();</span><br><span class="line">        <span class="comment">//文本发送模板</span></span><br><span class="line">        $textTpl = <span class="string">"&lt;xml&gt;</span></span><br><span class="line"><span class="string">              &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;</span></span><br><span class="line"><span class="string">              &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;</span></span><br><span class="line"><span class="string">              &lt;CreateTime&gt;%s&lt;/CreateTime&gt;</span></span><br><span class="line"><span class="string">              &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;</span></span><br><span class="line"><span class="string">              &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;</span></span><br><span class="line"><span class="string">              &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;</span></span><br><span class="line"><span class="string">              &lt;/xml&gt;"</span>; </span><br><span class="line">        <span class="comment">//////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="comment">//如果用户发送的是文本类型文件,执行以下</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">'text'</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!<span class="keyword">empty</span>( $keyword ))</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">/*这是一个实例</span></span><br><span class="line"><span class="comment">              //如果发送文本信息</span></span><br><span class="line"><span class="comment">              $msgType = "text";</span></span><br><span class="line"><span class="comment">              //回复内容</span></span><br><span class="line"><span class="comment">              if($keyword == "李楠")&#123;</span></span><br><span class="line"><span class="comment">                $contentStr = "叫我干嘛";</span></span><br><span class="line"><span class="comment">              &#125;else&#123;</span></span><br><span class="line"><span class="comment">                $contentStr = "叫我干嘛";</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">              //格式化xml模板,参数与上面的模板是一一对应的.fromUsername和头Username是相反的,只写带%s的</span></span><br><span class="line"><span class="comment">              $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">              //将xml信息返回给客户端</span></span><br><span class="line"><span class="comment">              echo $resultStr;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>($keyword == <span class="string">"?"</span> || $keyword == <span class="string">"？"</span>)&#123;</span><br><span class="line">              $msgType = <span class="string">"text"</span>;</span><br><span class="line">              $contentStr = <span class="string">"1.特种服务号码\n2.通讯服务号码"</span>;</span><br><span class="line">              $resultStr = sprintf($textTpl,$fromUsername,$toUsername,$time,$msgType,$contentStr);</span><br><span class="line">              <span class="keyword">echo</span> $resultStr;</span><br><span class="line">            &#125;<span class="keyword">elseif</span>($keyword == <span class="number">1</span>)&#123;</span><br><span class="line">              $msgType = <span class="string">"text"</span>;</span><br><span class="line">              $contentStr = <span class="string">"1.匪警:110\n2.火警:119\n3.急救:120"</span>;</span><br><span class="line">              $resultStr = sprintf($textTpl,$fromUsername,$toUsername,$time,$msgType,$contentStr);</span><br><span class="line">              <span class="keyword">echo</span> $resultStr;</span><br><span class="line">            &#125;<span class="keyword">elseif</span>($keyword == <span class="number">2</span>)&#123;</span><br><span class="line">              $msgType = <span class="string">"text"</span>;</span><br><span class="line">              $contentStr = <span class="string">"1.中国移动:10086\n2.中国联通:10010"</span>;</span><br><span class="line">              $resultStr = sprintf($textTpl,$fromUsername,$toUsername,$time,$msgType,$contentStr);</span><br><span class="line">              <span class="keyword">echo</span> $resultStr;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"不能不说话"</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="comment">//接受图片信息</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">"image"</span>)&#123;</span><br><span class="line">            <span class="comment">//如果发送文本信息</span></span><br><span class="line">            $msgType = <span class="string">"text"</span>;</span><br><span class="line">            <span class="comment">//回复内容</span></span><br><span class="line">            $contentStr = <span class="string">"你发送的是图片文件"</span>;</span><br><span class="line">            <span class="comment">//格式化字符串</span></span><br><span class="line">            $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">            <span class="comment">//将xml信息返回给客户端</span></span><br><span class="line">            <span class="keyword">echo</span> $resultStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">"voice"</span>)&#123;</span><br><span class="line">            <span class="comment">//如果发送文本信息</span></span><br><span class="line">            $msgType = <span class="string">"text"</span>;</span><br><span class="line">            <span class="comment">//回复内容</span></span><br><span class="line">            $contentStr = <span class="string">"你发送的是语音文件"</span>;</span><br><span class="line">            <span class="comment">//格式化字符串</span></span><br><span class="line">            $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">            <span class="comment">//将xml信息返回给客户端</span></span><br><span class="line">            <span class="keyword">echo</span> $resultStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">"video"</span>)&#123;</span><br><span class="line">            <span class="comment">//如果发送文本信息</span></span><br><span class="line">            $msgType = <span class="string">"text"</span>;</span><br><span class="line">            <span class="comment">//回复内容</span></span><br><span class="line">            $contentStr = <span class="string">"你发送的是视频文件"</span>;</span><br><span class="line">            <span class="comment">//格式化字符串</span></span><br><span class="line">            $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">            <span class="comment">//将xml信息返回给客户端</span></span><br><span class="line">            <span class="keyword">echo</span> $resultStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">"shortvideo"</span>)&#123;</span><br><span class="line">            <span class="comment">//如果发送文本信息</span></span><br><span class="line">            $msgType = <span class="string">"text"</span>;</span><br><span class="line">            <span class="comment">//回复内容</span></span><br><span class="line">            $contentStr = <span class="string">"你发送的是小视频文件"</span>;</span><br><span class="line">            <span class="comment">//格式化字符串</span></span><br><span class="line">            $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">            <span class="comment">//将xml信息返回给客户端</span></span><br><span class="line">            <span class="keyword">echo</span> $resultStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">"location"</span>)&#123;</span><br><span class="line">            <span class="comment">//如果发送文本信息</span></span><br><span class="line">            $msgType = <span class="string">"text"</span>;</span><br><span class="line">            <span class="comment">//回复内容</span></span><br><span class="line">            $contentStr = <span class="string">"你发送的是地理位置文件"</span>;</span><br><span class="line">            <span class="comment">//格式化字符串</span></span><br><span class="line">            $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">            <span class="comment">//将xml信息返回给客户端</span></span><br><span class="line">            <span class="keyword">echo</span> $resultStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>($msgType == <span class="string">"link"</span>)&#123;</span><br><span class="line">            <span class="comment">//如果发送文本信息</span></span><br><span class="line">            $msgType = <span class="string">"text"</span>;</span><br><span class="line">            <span class="comment">//回复内容</span></span><br><span class="line">            $contentStr = <span class="string">"你发送的是连接文件"</span>;</span><br><span class="line">            <span class="comment">//格式化字符串</span></span><br><span class="line">            $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span><br><span class="line">            <span class="comment">//将xml信息返回给客户端</span></span><br><span class="line">            <span class="keyword">echo</span> $resultStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //判断用户发送关键词是否为空      </span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        if(!empty( $keyword ))</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          //如果发送文本信息</span></span><br><span class="line"><span class="comment">          $msgType = "text";</span></span><br><span class="line"><span class="comment">          //回复内容</span></span><br><span class="line"><span class="comment">          $contentStr = "大家好,我是hero";</span></span><br><span class="line"><span class="comment">          //格式化字符串</span></span><br><span class="line"><span class="comment">          $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</span></span><br><span class="line"><span class="comment">          //将xml信息返回给客户端</span></span><br><span class="line"><span class="comment">          echo $resultStr;</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">          echo "Input something...";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">     </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// you must define TOKEN by yourself</span></span><br><span class="line">    <span class="comment">//判断是否定义了TOKEN,如果没有就抛出一个异常</span></span><br><span class="line">    <span class="keyword">if</span> (!defined(<span class="string">"TOKEN"</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'TOKEN is not defined!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    $signature = $_GET[<span class="string">"signature"</span>];<span class="comment">//接受微信加密签名</span></span><br><span class="line">    $timestamp = $_GET[<span class="string">"timestamp"</span>];<span class="comment">//接受时间戳</span></span><br><span class="line">    $nonce = $_GET[<span class="string">"nonce"</span>];<span class="comment">//接受随机数</span></span><br><span class="line">         </span><br><span class="line">    $token = TOKEN;<span class="comment">//把TOKEN常量赋值给$token</span></span><br><span class="line">    <span class="comment">//把相关参数组装成数组</span></span><br><span class="line">    $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</span><br><span class="line">    <span class="comment">// use SORT_STRING rule</span></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    sort($tmpArr, SORT_STRING);</span><br><span class="line">    <span class="comment">//把排序后的数组转换成字符串</span></span><br><span class="line">    $tmpStr = implode( $tmpArr );</span><br><span class="line">    <span class="comment">//通过哈希算法加密</span></span><br><span class="line">    $tmpStr = sha1( $tmpStr );</span><br><span class="line">    <span class="comment">//与加密签名进行对比</span></span><br><span class="line">    <span class="keyword">if</span>( $tmpStr == $signature )&#123;</span><br><span class="line">      <span class="comment">//相同返回true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//不同返回false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>去掉PHP的中警告(warning)、deprecate等提示</title>
      <link href="/2017-09-18/%E5%8E%BB%E6%8E%89PHP%E7%9A%84%E4%B8%AD%E8%AD%A6%E5%91%8A-warning-%E3%80%81deprecate%E7%AD%89%E6%8F%90%E7%A4%BA/"/>
      <url>/2017-09-18/%E5%8E%BB%E6%8E%89PHP%E7%9A%84%E4%B8%AD%E8%AD%A6%E5%91%8A-warning-%E3%80%81deprecate%E7%AD%89%E6%8F%90%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>需要打开 <code>php/php.ini</code>文件<br>修改第一行代码为第二行<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">error_reporting</span> = E_ALL &amp; ~E_NOTICE &amp; ~E_DEPRECATED</span><br><span class="line"><span class="attr">error_reporting</span> = E_ALL &amp; ~E_NOTICE &amp; ~E_DEPRECATED &amp; ~E_WARNING</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> Seer - Windows 文件预览神器</title>
      <link href="/2017-06-28/Seer-Windows-%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88%E7%A5%9E%E5%99%A8/"/>
      <url>/2017-06-28/Seer-Windows-%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88%E7%A5%9E%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><code>Mac OS</code>中有一个「快速查看」功能：选中文件、敲击空格、就能在不打开程序的情况下快速预览文件。在<code>Windows</code> 实现快速预览，需要借助<code>Seer</code>这款软件，使用空格键轻松实现预览文件功能。</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul><li>下载地址：  <a href="https://pan.baidu.com/s/1gfHYGMJ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfHYGMJ</a>     密码: kkkk</li><li>官方下载地址：<a href="https://sourceforge.net/projects/ccseer/" target="_blank" rel="noopener">https://sourceforge.net/projects/ccseer/</a></li><li>官方网站：<a href="http://1218.io/" target="_blank" rel="noopener">http://1218.io/</a></li></ul><a id="more"></a><h3 id="设置-Seer"><a href="#设置-Seer" class="headerlink" title="设置 Seer"></a>设置 <code>Seer</code></h3><p>安装完成之后，运行软件，在状态栏选择 Seer 图标，选择<code>Setting</code>选择进入设置页面，设置<code>Language</code>成中文模式后，软件将自动重启。<br><img src="http://oqiflua2i.bkt.clouddn.com/seer1.png" alt="语言设置"></p><p>几种常用的插件，扩展Seer预览功能 </p><ul><li><code>MSOffice</code>：Office文件预览</li><li><code>code_highlight</code>：代码高亮显示</li><li><code>font</code>：预览字体文件<br><img src="http://oqiflua2i.bkt.clouddn.com/seer2.png" alt="插件设置"></li></ul>]]></content>
      
      <categories>
          
          <category> 工具助手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Seer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sublime Text3中Markdown Editing插件的安装与快捷操作</title>
      <link href="/2017-06-27/Sublime%20Text3%E4%B8%ADMarkdown%20Editing%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
      <url>/2017-06-27/Sublime%20Text3%E4%B8%ADMarkdown%20Editing%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="Markdown-Editing的功能：语法增强"><a href="#Markdown-Editing的功能：语法增强" class="headerlink" title="Markdown Editing的功能：语法增强"></a><a href="https://github.com/ttscoff/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a>的功能：语法增强</h3><ul><li>星号 *、下划线 _ 和反引号 ` 自动配对</li><li>如输入的自动配对符号中间内容为空时，删除第一个符号时将直接删除整对符号</li><li>如输入自动配对符号后直接输入空格，则自动删除后面自动配对的符号</li><li>波浪线 ~ 包围的内容将转换为HTML中的 <code>&lt;del&gt;&lt;/del&gt;</code>标签</li><li>当创建了列表后，回车将自动添加一个列表项。如列表项为空，再次回车将删除该列表项</li></ul><a id="more"></a><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>打开<code>Sublime Text3</code>，通过 <code>Preferences -&gt; Browse Packages...</code>进入<code>Packages</code>目录后，然后右键选择在终端中打开，在终端输入命令：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/ttscoff/MarkdownEditing.git</span><br></pre></td></tr></table></figure></p><p>然后重启<code>Sublime Text3</code>完成安装。</p><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><p>根据自行修改的<code>Default (Windows).sublime-keymap</code>列出</p><p><code>MarkdownEditing</code>在<code>Windows</code>下面的快捷键需要自行根据<code>Default (OSX).sublime-keymap</code>中的内容进行修改，添加到<code>Default (Windows).sublime-keymap</code>中。</p><p><code>Ctrl+Win+V</code> 选中的内容将自动转换为行内式超链接，链接到剪贴板中的内容</p><p><code>Ctrl+Win+R</code> 选中的内容将自动转换为参考式超链接，链接到剪贴板中的内容</p><p><code>Ctrl+Alt+R</code>弹出提示框插入一个参考式超链接，在提示框中输入链接内容和定义参考ID[\^3]</p><p><code>Ctrl+Win+K</code> 插入一个标准的行内式超链接</p><p><code>Win+Shift+K</code> 插入一个标准的行内式图片（此快捷键可能与输入法有冲突）</p><p><code>Ctrl+1</code> 至 <code>Ctrl+6</code> 插入一级至六级标题</p><p><code>Win+Alt+i</code> 选中的内容转换为斜体</p><p><code>Win+Alt+b</code> 选中的内容转换为粗体[^1]</p><p><code>Ctrl+Shift+6</code> 自动插入一个脚注，并跳转到该脚注的定义中。</p><p><code>Alt+Shift+F</code> 查找没有定义的脚注并自动添加其定义链接</p><p><code>Alt+Shift+G</code> 查找没有定义的参考式超链接并自动添加其定义链接</p><p><code>Ctrl+Alt+S</code> 脚注排序</p><p><code>Ctrl+Shift+.</code> 缩进当前内容</p><p><code>Ctrl+Shift+,</code> 提前当前内容</p>]]></content>
      
      <categories>
          
          <category> Sublime Text3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text3 </tag>
            
            <tag> Markdown Editing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Yii 2.0 框架的下载与安装</title>
      <link href="/2017-06-27/Yii%202.0-%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>/2017-06-27/Yii%202.0-%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>Yii 是一个高性能的，适用开发 <code>WEB 2.0</code> 应用的 <code>PHP 框架</code>。</p><p>Yii 自带了丰富的功能，包括 <code>MVC，DAO/ActiveRecord，I18N/L10N，</code>缓存，身份验证和基于角色的访问控制，脚手架，测试等，可显著缩短开发时间。</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><ul><li><a href="http://www.yiiframework.com/download/" target="_blank" rel="noopener">Yii Framework 官方下载地址</a></li><li><a href="http://www.yiichina.com/download" target="_blank" rel="noopener">Yii Framework 中文社区下载地址</a></li></ul><p>任选其中一种方式进行下载，比如：进入<a href="http://www.yiichina.com/download" target="_blank" rel="noopener">Yii Framework 中文社区下载地址</a>，在 <strong>从归档文件安装中下载</strong>中提供了两种安装方式。</p><ul><li><a href="https://github.com/yiisoft/yii2/releases/download/2.0.12/yii-basic-app-2.0.12.tgz" target="_blank" rel="noopener">Yii2的基本应用程序模板</a></li><li><a href="https://github.com/yiisoft/yii2/releases/download/2.0.12/yii-advanced-app-2.0.12.tgz" target="_blank" rel="noopener">Yii2的高级应用程序模板</a></li></ul><a id="more"></a><h3 id="安装框架"><a href="#安装框架" class="headerlink" title="安装框架"></a>安装框架</h3><ul><li><p>下载<a href="https://github.com/yiisoft/yii2/releases/download/2.0.12/yii-basic-app-2.0.12.tgz" target="_blank" rel="noopener">Yii2的基本应用程序模板</a>得到源码<code>yii-basic-app-2.0.12.tgz</code>。</p></li><li><p>解压缩后打开文件目录<code>\basic\requirements.php</code> <strong>（注意：<code>basic</code>目录要位于网站的根目录）</strong>，开启本地服务器，在浏览器地址栏中输入<code>127.0.0.1/basic/requirements.php</code>，该文件会检测当前系统是否能够启动 Yii 框架，若出现<code>Faile</code>，需要修改当前的系统配置。</p></li><li><p>打开文件目录<code>\basic\config\web.php</code>，修改<code>cookieValidationKey</code>的值（可设置为任意值，为了防止<code>Cookie</code>攻击）。</p></li></ul><ul><li>开启本地服务器，在浏览器地址栏中输入<code>127.0.0.1/basic/web/index.php</code>，验证是否成功安装，若出现 <code>Congratulations</code>，则安装成功。</li></ul>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> Yii 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Yii 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 异常处理参考</title>
      <link href="/2017-06-26/PHP-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%82%E8%80%83/"/>
      <url>/2017-06-26/PHP-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%82%E8%80%83/</url>
      <content type="html"><![CDATA[<h3 id="异常处理简介"><a href="#异常处理简介" class="headerlink" title="异常处理简介"></a>异常处理简介</h3><p>从PHP5开始，PHP支持异常处理，异常处理是面向对象一个重要特性，PHP代码中的异常通过throw抛出，异常抛出之后，后面的代码将不会再被执行。</p><p>异常抛出被用于在遇到未知错误，或者不符合预先设定的条件时，通知客户程序，以便进行其他相关处理，不至于使程序直接报错中断。</p><p>当代码中使用了try catch的时候，抛出的异常会在catch中捕获，否则会直接中断。</p><p>1、基本语法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现错误或异常的代码</span></span><br><span class="line">    <span class="comment">//catch表示捕获，Exception是php已定义好的异常类</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="comment">//对异常处理，方法：</span></span><br><span class="line">        <span class="comment">//1、自己处理</span></span><br><span class="line">        <span class="comment">//2、不处理，将其再次抛出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2、处理处理程序应当包括：<br><code>Try</code>  - 使用异常的函数应该位于 “try”  代码块内。如果没有触发异常，则代码将照常继续执行。但是如果异常被触发，会抛出一个异常。<br><code>Throw</code>    - 这里规定如何触发异常。注意：每一个 “throw” 必须对应至少一个 “catch”，当然可以对应多个”catch”<br><code>Catch</code>    - “catch” 代码块会捕获异常，并创建一个包含异常信息的对象。</p><p>示例：<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建可抛出一个异常的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNum</span><span class="params">($number)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>($number&gt;<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"异常提示-数字必须小于等于1"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 "try" 代码块中触发异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> checkNum(<span class="number">2</span>);</span><br><span class="line"> <span class="comment">//如果异常被抛出，那么下面一行代码将不会被输出</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'如果能看到这个提示，说明你的数字小于等于1'</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line"> <span class="comment">//捕获异常</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'捕获异常: '</span> .$e-&gt;getMessage();</span><br><span class="line"> <span class="comment">//运行结果：捕获异常: 异常提示-数字必须小于等于1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例子解释：<br>上面的代码抛出了一个异常，并捕获了它：<br>创建  <code>checkNum() 函数</code>。它检测数字是否大于 1。如果是，则抛出一个异常。<br>在 “try” 代码块中调用 <code>checkNum() 函数</code>。checkNum() 函数中的异常被抛出” catch “ 代码块接收到该异常，并创建一个包含异常信息的对象<code>($e)</code> 。<br>通过从这个 <code>exception 对象</code>调用<code>$e-&gt;getMessage()</code> ，输出来自该异常的错误消息。</p><h3 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h3><p>PHP具有很多异常处理类，其中Exception是所有异常处理的基类。<br>Exception具有几个基本属性与方法，其中包括了：</p><ul><li>message 异常消息内容</li><li>code 异常代码</li><li>file 抛出异常的文件名</li><li>line 抛出异常在该文件的行数</li></ul><p>其中常用的方法有：</p><ul><li>getTrace 获取异常追踪信息</li><li>getTraceAsString 获取异常追踪信息的字符串</li><li>getMessage 获取出错信息</li></ul><p>如果必要的话，可以通过继承Exception类来建立自定义的异常处理类。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的异常类，继承了PHP的异常基类Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'自定义错误信息'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//使用异常的函数应该位于 "try"  代码块内。如果没有触发异常，则代码将照常继续执行。但是如果异常被触发，会抛出一个异常。</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">'error'</span>);</span><br><span class="line">    <span class="comment">//这里规定如何触发异常。注意：每一个 "throw" 必须对应至少一个 "catch"，当然可以对应多个"catch"</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    <span class="comment">//"catch" 代码块会捕获异常，并创建一个包含异常信息的对象</span></span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getInfo();<span class="comment">//获取自定义的异常信息</span></span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();<span class="comment">//获取继承自基类的getMessage信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="捕获异常信息"><a href="#捕获异常信息" class="headerlink" title="捕获异常信息"></a>捕获异常信息</h3><p>一般的异常处理流程代码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'wrong'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Error:'</span>.$ex-&gt;getMessage().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $ex-&gt;getTraceAsString().<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'异常处理后，继续执行其他代码'</span>;</span><br></pre></td></tr></table></figure><h3 id="获取错误发生的所在行"><a href="#获取错误发生的所在行" class="headerlink" title="获取错误发生的所在行"></a>获取错误发生的所在行</h3><p>可以将报错的文件名、行号、错误信息、异常追踪信息等记录到日志中，以便调试与修复问题。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'wrong'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $ex) &#123;</span><br><span class="line">    $msg = <span class="string">'Error:'</span>.$ex-&gt;getMessage().<span class="string">"\n"</span>;</span><br><span class="line">    $msg.= $ex-&gt;getTraceAsString().<span class="string">"\n"</span>;</span><br><span class="line">    $msg.= <span class="string">'异常行号：'</span>.$ex-&gt;getLine().<span class="string">"\n"</span>;</span><br><span class="line">    $msg.= <span class="string">'所在文件：'</span>.$ex-&gt;getFile().<span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">//将异常信息记录到日志中</span></span><br><span class="line">    file_put_contents(<span class="string">'error.log'</span>, $msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 图形操作之GD库</title>
      <link href="/2017-06-25/PHP-%E5%9B%BE%E5%BD%A2%E6%93%8D%E4%BD%9C%E4%B9%8BGD%E5%BA%93/"/>
      <url>/2017-06-25/PHP-%E5%9B%BE%E5%BD%A2%E6%93%8D%E4%BD%9C%E4%B9%8BGD%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="GD库简介"><a href="#GD库简介" class="headerlink" title="GD库简介"></a>GD库简介</h3><p>GD 指的是<code>Graphic Device</code>，PHP的GD库是用来处理图形的扩展库，通过GD库提供的一系列API，可以对图像进行处理或者直接生成新的图片。</p><p>PHP除了能进行文本处理以外，通过GD库，可以对JPG、PNG、GIF、SWF等图片进行处理。GD库常用在图片加水印，验证码生成等方面。</p><p>PHP默认已经集成了GD库，只需要在安装的时候开启就行。<br>示例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">header("content-type: image/png");</span><br><span class="line"><span class="meta">$</span><span class="bash">img=imagecreatetruecolor(100, 100);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">red=imagecolorallocate(<span class="variable">$img</span>, 0xFF, 0x00, 0x00);</span></span><br><span class="line"><span class="meta">imagefill($</span><span class="bash">img, 0, 0, <span class="variable">$red</span>);</span></span><br><span class="line"><span class="meta">imagepng($</span><span class="bash">img);</span></span><br><span class="line"><span class="meta">imagedestroy($</span><span class="bash">img);</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="绘制线条"><a href="#绘制线条" class="headerlink" title="绘制线条"></a>绘制线条</h3><p>对图形进行操作，首先要新建一个画布，通过<code>imagecreatetruecolor函数</code>可以创建一个真彩色的空白图片<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$img</span> = imagecreatetruecolor(100, 100);</span></span><br></pre></td></tr></table></figure></p><p>GD库中对于画笔所用的颜色，需要通过 <code>imagecolorallocate函数</code>进行分配，通过参数设定RGB的颜色值来确定画笔的颜色：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$red = imagecolorallocate($img, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>);</span><br></pre></td></tr></table></figure></p><p>然后我们通过调用绘制线段<code>函数imageline</code>进行线条的绘制，通过指定起点跟终点来最终得到线条。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageline($img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, $red);</span><br></pre></td></tr></table></figure></p><p>线条绘制好以后，通过header与imagepng进行图像的输出。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">header</span>(<span class="string">"content-type: image/png"</span>);</span><br><span class="line">imagepng($img);</span><br></pre></td></tr></table></figure></p><p>最后可以调用imagedestroy释放该图片占用的内存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">imagedestroy($</span><span class="bash">img);</span></span><br></pre></td></tr></table></figure><p>通过上面的步骤，可以发现PHP绘制图形非常的简单，但很多时候我们不只是需要输出图片，可能我们还需要得到一个图片文件，可以通过imagepng函数指定文件名将绘制后的图像保存到文件中。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">imagepng($</span><span class="bash">img, <span class="string">'img.png'</span>);</span></span><br></pre></td></tr></table></figure></p><p>绘制线条代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">img = imagecreatetruecolor(100, 100);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">red = imagecolorallocate(<span class="variable">$img</span>, 0xFF, 0x00, 0x00);</span></span><br><span class="line">//在这里使用imageline绘制线条</span><br><span class="line"><span class="meta">imageline($</span><span class="bash">img,0,0,100,100,<span class="variable">$red</span>);</span></span><br><span class="line"></span><br><span class="line">header("content-type: image/png");</span><br><span class="line"><span class="meta">imagepng($</span><span class="bash">img);</span></span><br><span class="line"><span class="meta">imagedestroy($</span><span class="bash">img);</span></span><br></pre></td></tr></table></figure></p><h3 id="在图像中绘制文字"><a href="#在图像中绘制文字" class="headerlink" title="在图像中绘制文字"></a>在图像中绘制文字</h3><p>GD库可以进行多种图形的基本操作，常用的有绘制线条，背景填充，画矩形，绘制文字等。<br>跟绘制线条类似，首先需要新建一个图片与初始化颜色。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$img = imagecreatetruecolor(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">$red = imagecolorallocate($img, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>);</span><br></pre></td></tr></table></figure></p><p>然后使用imagestring函数来进行文字的绘制，这个函数的参数很多：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imagestring (<span class="built_in"> resource </span><span class="variable">$image</span> , int <span class="variable">$font</span> , int <span class="variable">$x</span> , int <span class="variable">$y</span> , string <span class="variable">$s</span> , int <span class="variable">$col</span> )，</span><br></pre></td></tr></table></figure></p><p>可以通过 <code>$ font</code>来设置字体的大小，<code>x,y</code>设置文字显示的位置，<code>$s</code>是要绘制的文字,<code>$col</code>是文字的颜色。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">imagestring($</span><span class="bash">img, 5, 0, 0, <span class="string">"Hello world"</span>, <span class="variable">$red</span>);</span></span><br><span class="line">header("content-type: image/png");</span><br><span class="line"><span class="meta">imagepng($</span><span class="bash">img);</span></span><br><span class="line"><span class="meta">imagedestroy($</span><span class="bash">img);</span></span><br></pre></td></tr></table></figure><p>图像中绘制文字代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">img = imagecreatetruecolor(100, 100);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">red = imagecolorallocate(<span class="variable">$img</span>, 0xFF, 0x00, 0x00);</span></span><br><span class="line">//在这里绘制文字</span><br><span class="line"><span class="meta">imagestring($</span><span class="bash">img,6,0,0,<span class="string">"hello world"</span>,<span class="variable">$red</span>);</span></span><br><span class="line">header("content-type: image/png");</span><br><span class="line"><span class="meta">imagepng($</span><span class="bash">img);</span></span><br><span class="line"><span class="meta">imagedestroy($</span><span class="bash">img);</span></span><br></pre></td></tr></table></figure></p><h3 id="输出图像文件"><a href="#输出图像文件" class="headerlink" title="输出图像文件"></a>输出图像文件</h3><p>通过指定路径参数将图像保存到文件中。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">filename = <span class="string">'img.png'</span>;</span></span><br><span class="line"><span class="meta">imagepng($</span><span class="bash">img, <span class="variable">$filename</span>);</span></span><br></pre></td></tr></table></figure></p><p>使用<code>imagepng</code>可以将图像保存成png格式，如果要保存成其他格式需要使用不同的函数，使用<code>imagejpeg</code>将图片保存成jpeg格式，<code>imagegif</code>将图片保存成gif格式，需要说明的是，imagejpeg会对图片进行压缩，因此还可以设置一个质量参数。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="string">'img.jpg'</span><span class="comment">;</span></span><br><span class="line">​imagejpeg($img, $filename, <span class="number">80</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h3 id="生成图像验证码"><a href="#生成图像验证码" class="headerlink" title="生成图像验证码"></a>生成图像验证码</h3><p>简单的验证码其实就是在图片中输出了几个字符，使用 <code>imagestring函数</code> 就能实现。<br>但是在处理上，为了使验证码更加的安全，防止其他程序自动识别，因此常常需要对验证码进行一些干扰处理，通常会采用绘制一些噪点，干扰线段，对输出的字符进行倾斜、扭曲等操作。</p><p>可以使用imagesetpixel绘制点来实现噪点干扰，但是只绘制一个点的作用不大，因此这里常常会使用循环进行随机绘制。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">50</span>;$i++) &#123;</span><br><span class="line">  imagesetpixel($im, <span class="keyword">rand</span>(<span class="number">0</span>, <span class="number">100</span>) , <span class="keyword">rand</span>(<span class="number">0</span>, <span class="number">100</span>) , $black); </span><br><span class="line">  imagesetpixel($im, <span class="keyword">rand</span>(<span class="number">0</span>, <span class="number">100</span>) , <span class="keyword">rand</span>(<span class="number">0</span>, <span class="number">100</span>) , $green);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成图像验证码代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">img = imagecreatetruecolor(100, 40);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">black = imagecolorallocate(<span class="variable">$img</span>, 0x00, 0x00, 0x00);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">green = imagecolorallocate(<span class="variable">$img</span>, 0x00, 0xFF, 0x00);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">white = imagecolorallocate(<span class="variable">$img</span>, 0xFF, 0xFF, 0xFF);</span></span><br><span class="line"><span class="meta">imagefill($</span><span class="bash">img,0,0,<span class="variable">$white</span>);</span></span><br><span class="line">//生成随机的验证码</span><br><span class="line"><span class="meta">$</span><span class="bash">code = <span class="string">''</span>;</span></span><br><span class="line"><span class="meta">for($</span><span class="bash">i = 0; <span class="variable">$i</span> &lt; 4; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line">    $code .= rand(0, 9);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">imagestring($</span><span class="bash">img, 5, 10, 10, <span class="variable">$code</span>, <span class="variable">$black</span>);</span></span><br><span class="line">//加入噪点干扰</span><br><span class="line"><span class="meta">for($</span><span class="bash">i=0;<span class="variable">$i</span>&lt;50;<span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="meta">  imagesetpixel($</span><span class="bash">img, rand(0, 100) , rand(0, 100) , <span class="variable">$black</span>); </span></span><br><span class="line"><span class="meta">  imagesetpixel($</span><span class="bash">img, rand(0, 100) , rand(0, 100) , <span class="variable">$green</span>);</span></span><br><span class="line">&#125;</span><br><span class="line">//输出验证码</span><br><span class="line">header("content-type: image/png");</span><br><span class="line"><span class="meta">imagepng($</span><span class="bash">img);</span></span><br><span class="line"><span class="meta">imagedestroy($</span><span class="bash">img);</span></span><br></pre></td></tr></table></figure></p><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><p>给图片添加水印的方法一般有两种</p><ul><li>一种是在图片上面加上一个字符串</li><li>一种是在图片上加上一个logo或者其他的图片。</li></ul><p>因为这里处理的是已经存在的图片，所以可以直接从已存在的图片建立画布，通过<code>imagecreatefromjpeg</code>可以直接从图片文件创建图像。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">im = imagecreatefromjpeg(<span class="variable">$filename</span>);</span></span><br></pre></td></tr></table></figure></p><p>创建图像对象以后，我们就可以通过前面的GD函数，绘制字符串到图像上。如果要加的水印是一个logo图片，那么就需要再建立一个图像对象，然后通过GD函数<code>imagecopy</code>将logo的图像复制到源图像中。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">logo = imagecreatefrompng(<span class="variable">$filename</span>);</span></span><br><span class="line"><span class="meta">imagecopy($</span><span class="bash">im, <span class="variable">$logo</span>, 15, 15, 0, 0, <span class="variable">$width</span>, <span class="variable">$height</span>);</span></span><br></pre></td></tr></table></figure></p><p>当将logo图片复制到原图片上以后，将加水印后的图片输出保存就完成了加水印处理。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">imagejpeg($</span><span class="bash">im, <span class="variable">$filename</span>);</span></span><br></pre></td></tr></table></figure></p><p>图片添加水印代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//这里仅仅是为了案例需要准备一些素材图片</span><br><span class="line"><span class="meta">$</span><span class="bash">url = <span class="string">'http://www.iyi8.com/uploadfile/2014/0521/20140521105216901.jpg'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">content = file_get_contents(<span class="variable">$url</span>);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">filename = <span class="string">'tmp.jpg'</span>;</span></span><br><span class="line"><span class="meta">file_put_contents($</span><span class="bash">filename, <span class="variable">$content</span>);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">url = <span class="string">'http://wiki.ubuntu.org.cn/images/3/3b/Qref_Edubuntu_Logo.png'</span>;</span></span><br><span class="line">file_put_contents('logo.png', file_get_contents($url));</span><br><span class="line">//开始添加水印操作</span><br><span class="line"><span class="meta">$</span><span class="bash">im = imagecreatefromjpeg(<span class="variable">$filename</span>);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">logo = imagecreatefrompng(<span class="string">'logo.png'</span>);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">size = getimagesize(<span class="string">'logo.png'</span>);</span></span><br><span class="line"><span class="meta">imagecopy($</span><span class="bash">im, <span class="variable">$logo</span>, 15, 15, 0, 0, <span class="variable">$size</span>[0], <span class="variable">$size</span>[1]); </span></span><br><span class="line"> </span><br><span class="line">header("content-type: image/jpeg");</span><br><span class="line"><span class="meta">imagejpeg($</span><span class="bash">im);</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> GD库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 日期和时间参考</title>
      <link href="/2017-06-25/PHP-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%8F%82%E8%80%83/"/>
      <url>/2017-06-25/PHP-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%8F%82%E8%80%83/</url>
      <content type="html"><![CDATA[<h3 id="获取当前的Unix时间戳"><a href="#获取当前的Unix时间戳" class="headerlink" title="获取当前的Unix时间戳"></a>获取当前的Unix时间戳</h3><p>UNIX 时间戳（英文叫做：timestamp）是 PHP 中关于时间与日期的一个很重要的概念，它表示从 1970年1月1日 00:00:00 到当前时间的秒数之和。</p><p>PHP提供了内置函数 time() 来取得服务器当前时间的时间戳。那么获取当前的UNIX时间戳就很简单了。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in">time</span> = <span class="built_in">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $<span class="built_in">time</span>;<span class="comment">//1396193923，这个数字表示从1970年1月1日 00:00:00 到输出这个脚本时经历了1396193923秒</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="获取当前的日期"><a href="#获取当前的日期" class="headerlink" title="获取当前的日期"></a>获取当前的日期</h3><p>PHP内置了<code>date()函数</code>，来取得当前的日期。</p><p>函数说明：date（时间戳的格式, 规定时间戳【默认是当前的日期和时间，可选】）</p><p>返回值：函数日期和时间</p><p>例子：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//date函数，第二个参数取默认值的情况</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">date</span>(<span class="string">"Y-m-d"</span>);<span class="comment">//2014-03-30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//date函数，第二个参数有值的情况</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">date</span>(<span class="string">"Y-m-d"</span>,<span class="string">'1396193923'</span>);<span class="comment">//2014-03-30,1396193923表示2014-03-30的unix时间戳</span></span><br></pre></td></tr></table></figure></p><h3 id="获取日期的Unix时间戳"><a href="#获取日期的Unix时间戳" class="headerlink" title="获取日期的Unix时间戳"></a>获取日期的Unix时间戳</h3><p>PHP提供了内置函数strtotime实现功能：获取某个日期的时间戳，或获取某个时间的时间戳。例如：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo strtotime('<span class="number">2014-04-29</span>');<span class="comment">//1398700800，这个数字表示从1970年1月1日 00:00:00 到2014年4月29号经历了1398700800秒</span></span><br><span class="line"></span><br><span class="line">echo strtotime('<span class="number">2014-04-29</span> 00:00:01');<span class="comment">//1398700801，这个数字表示从1970年1月1日 00:00:00 到2014-04-29 00:00:01时经历了1398700801秒</span></span><br></pre></td></tr></table></figure></p><p>其实 <code>strtotime(&#39;2014-04-29&#39;)</code> 相当于 <code>strtotime(&#39;2014-04-29 00:00:00&#39;)</code></p><h3 id="将格式化的日期字符串转换为Unix时间戳"><a href="#将格式化的日期字符串转换为Unix时间戳" class="headerlink" title="将格式化的日期字符串转换为Unix时间戳"></a>将格式化的日期字符串转换为Unix时间戳</h3><p><code>strtotime 函数</code>预期接受一个包含美国英语日期格式的字符串并尝试将其解析为 Unix 时间戳。</p><p>函数说明：strtotime（要解析的时间字符串, 计算返回值的时间戳【默认是当前的时间，可选】）<br>返回值：成功则返回时间戳，否则返回 FALSE</p><p>比如<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">echo <span class="title">strtotime</span><span class="params">(<span class="string">"now"</span>)</span></span>;<span class="comment">//相当于将英文单词now直接等于现在的日期和时间，并把这个日期时间转化为unix时间戳。这个效果跟echo time();一样。</span></span><br><span class="line"><span class="function">echo <span class="title">strtotime</span><span class="params">(<span class="string">"+1 seconds"</span>)</span></span>;<span class="comment">//相当于将现在的日期和时间加上了1秒，并把这个日期时间转化为unix时间戳。这个效果跟echo time()+1;一样。</span></span><br><span class="line"><span class="function">echo <span class="title">strtotime</span><span class="params">(<span class="string">"+1 day"</span>)</span></span>;<span class="comment">//相当于将现在的日期和时间加上了1天。</span></span><br><span class="line"><span class="function">echo <span class="title">strtotime</span><span class="params">(<span class="string">"+1 week"</span>)</span></span>;<span class="comment">//相当于将现在的日期和时间加上了1周。</span></span><br><span class="line"><span class="function">echo <span class="title">strtotime</span><span class="params">(<span class="string">"+1 week 3 days 7 hours 5 seconds"</span>)</span></span>;<span class="comment">//相当于将现在的日期和时间加上了1周3天7小时5秒。</span></span><br></pre></td></tr></table></figure></p><h3 id="格式化格林威治（GMT）标准时间"><a href="#格式化格林威治（GMT）标准时间" class="headerlink" title="格式化格林威治（GMT）标准时间"></a>格式化格林威治（GMT）标准时间</h3><p>gmdate 函数能格式化一个GMT的日期和时间，返回的是格林威治标准时（GMT）。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">举个例子，我们现在所在的中国时区是东八区，领先格林威治时间<span class="number">8</span>个小时，有时候也叫GMT+<span class="number">8</span>，那么服务器运行以下脚本返回的时间应该是这样的：</span><br><span class="line">当前时间假定是<span class="number">2014</span>-<span class="number">05</span>-<span class="number">01</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">22</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">date</span>(<span class="string">'Y-m-d H:i:s'</span>, <span class="built_in">time</span>()); <span class="comment">//输出为：2014-05-01 15:15:22 </span></span><br><span class="line"><span class="built_in">echo</span> gmdate(<span class="string">'Y-m-d H:i:s'</span>, <span class="built_in">time</span>()); <span class="comment">//输出为：2014-05-01 07:15:22 因为格林威治时间是现在中国时区的时间减去8个小时，所以相对于现在时间要少8个小时</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 文件系统参考</title>
      <link href="/2017-06-25/PHP-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8F%82%E8%80%83/"/>
      <url>/2017-06-25/PHP-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8F%82%E8%80%83/</url>
      <content type="html"><![CDATA[<h3 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h3><p>最简单的读取文件的函数为<code>file_get_contents</code>，可以将整个文件全部读取到一个字符串中。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">content = file_get_contents(<span class="string">'./test.txt'</span>);</span></span><br></pre></td></tr></table></figure></p><p><code>file_get_contents</code>也可以通过参数控制读取内容的开始点以及长度。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content = file_get_contents(<span class="string">'./test.txt'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">100</span>, <span class="number">500</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>PHP也提供类似于C语言操作文件的方法，使用fopen，fgets，fread等方法，fgets可以从文件指针中读取一行，freads可以读取指定长度的字符串。</p><a id="more"></a><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$fp = <span class="keyword">fopen</span>(<span class="string">'./text.txt'</span>, <span class="string">'rb'</span>);</span><br><span class="line"><span class="keyword">while</span>(!<span class="keyword">feof</span>($fp)) &#123;</span><br><span class="line">    echo fgets($fp); <span class="comment">//读取一行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fclose</span>($fp);</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$fp = <span class="keyword">fopen</span>(<span class="string">'./text.txt'</span>, <span class="string">'rb'</span>);</span><br><span class="line">$contents = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="keyword">feof</span>($fp)) &#123;</span><br><span class="line">    $contents .= <span class="keyword">fread</span>($fp, <span class="number">4096</span>); <span class="comment">//一次读取4096个字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fclose</span>($fp);</span><br></pre></td></tr></table></figure><p>使用fopen打开的文件，最好使用fclose关闭文件指针，以避免文件句柄被占用。</p><h3 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h3><p>一般情况下在对文件进行操作的时候需要先判断文件是否存在，PHP中常用来判断文件存在的函数有两个<code>is_file</code> 与<code>file_exists</code>。</p><p>如果只是判断文件存在，使用file_exists就行，file_exists不仅可以判断文件是否存在，同时也可以判断目录是否存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="string">'./test.txt'</span>;</span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is_file是确切的判断给定的路径是否是一个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="string">'./test.txt'</span>;</span><br><span class="line"><span class="keyword">if</span> (is_file(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更加精确的可以使用is_readable与is_writeable在文件是否存在的基础上，判断文件是否可读与可写。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="string">'./test.txt'</span>;</span><br><span class="line"><span class="keyword">if</span> (is_writeable($filename)) &#123;</span><br><span class="line">    file_put_contents($filename, <span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_readable($filename)) &#123;</span><br><span class="line">    echo file_get_contents($filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取文件的修改时间"><a href="#获取文件的修改时间" class="headerlink" title="获取文件的修改时间"></a>获取文件的修改时间</h3><p>文件有很多元属性，包括：文件的所有者、创建时间、修改时间、最后的访问时间等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fileowner：获得文件的所有者</span><br><span class="line">filectime：获取文件的创建时间</span><br><span class="line">filemtime：获取文件的修改时间</span><br><span class="line">fileatime：获取文件的访问时间</span><br></pre></td></tr></table></figure><p>其中最常用的是文件的修改时间，通过文件的修改时间，可以判断文件的时效性，经常用在静态文件或者缓存数据的更新。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mtime</span> = filemtime(<span class="variable">$filename</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'修改时间：'</span>.date(<span class="string">'Y-m-d H:i:s'</span>, filemtime(<span class="variable">$filename</span>));</span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="string">'/data/webroot/usercode/code/resource/test.txt'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'所有者：'</span>.fileowner($filename).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'创建时间：'</span>.filectime($filename).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'修改时间：'</span>.filemtime($filename).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'最后访问时间：'</span>.fileatime($filename).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给$mtime赋值为文件的修改时间</span></span><br><span class="line">$mtime = filemtime($filename); </span><br><span class="line"><span class="comment">//通过计算时间差 来判断文件内容是否有效</span></span><br><span class="line"><span class="keyword">if</span> (time() - $mtime &gt; <span class="number">3600</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;缓存已过期'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取文件的大小"><a href="#获取文件的大小" class="headerlink" title="获取文件的大小"></a>获取文件的大小</h3><p>通过<code>filesize函数</code>可以取得文件的大小，文件大小是以字节数表示的。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="string">'/data/webroot/usercode/resource/test.txt'</span>;</span><br><span class="line">$size = filesize($filename);</span><br><span class="line">如果要转换文件大小的单位，可以自己定义函数来实现。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getsize</span><span class="params">($size, $format = <span class="string">'kb'</span>)</span> </span>&#123;</span><br><span class="line">    $p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ($format == <span class="string">'kb'</span>) &#123;</span><br><span class="line">        $p = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($format == <span class="string">'mb'</span>) &#123;</span><br><span class="line">        $p = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($format == <span class="string">'gb'</span>) &#123;</span><br><span class="line">        $p = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $size /= pow(<span class="number">1024</span>, $p);</span><br><span class="line">    <span class="keyword">return</span> number_format($size, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'/data/webroot/usercode/code/resource/test.txt'</span>;</span><br><span class="line">$size = filesize($filename);</span><br><span class="line"></span><br><span class="line">$size = getsize($size, <span class="string">'kb'</span>); <span class="comment">//进行单位转换</span></span><br><span class="line"><span class="keyword">echo</span> $size.<span class="string">'kb'</span>;</span><br></pre></td></tr></table></figure></p><p> 注释 ：</p><ul><li>pow() 函数返回 x 的 y 次方。</li><li>number_format() 函数通过千位分组来格式化数字</li></ul><p>值得注意的是，没法通过简单的函数来取得目录的大小，目录的大小是该目录下所有子目录以及文件大小的总和，因此需要通过递归的方法来循环计算目录的大小。</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 参考教程系列</title>
      <link href="/2017-06-25/Hexo-%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/"/>
      <url>/2017-06-25/Hexo-%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h3 id="Hexo-建站全过程"><a href="#Hexo-建站全过程" class="headerlink" title="Hexo 建站全过程"></a>Hexo 建站全过程</h3><ul><li><a href="http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="noopener">Github建站系列教程</a></li><li><a href="http://blog.shijinrong.cn/a/16010316/" target="_blank" rel="noopener">如何使用10个小时搭建出个人域名而又Geek的独立博客？</a></li><li><a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">Hexo Seo优化让你的博客在google搜索排名第一</a></li><li><a href="http://opiece.me/tags/hexo/" target="_blank" rel="noopener">Hexo 标签</a></li><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">Hexo 你的博客</a></li><li><a href="http://www.joryhe.com/2016-06-06-hexo_wordcount_setting_your_post.html#" target="_blank" rel="noopener">HEXO-建站系列</a></li><li><a href="http://www.joryhe.com/2016-06-06-hexo_wordcount_setting_your_post.html#" target="_blank" rel="noopener">HEXO-优化系列</a></li><li><a href="http://www.joryhe.com/categories/ittech/%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF/hexo/HEXO%E8%BF%9B%E9%98%B6/" target="_blank" rel="noopener">HEXO进阶 分类</a></li><li><a href="https://neveryu.github.io/categories/Hexo/" target="_blank" rel="noopener">Never_yu’s Blog</a></li><li><a href="http://www.ixirong.com/2016/08/17/hexo-next-plugin-test/" target="_blank" rel="noopener">hexo/next常见插件使用技巧</a></li><li><a href="http://blog.junyu.io/posts/0010-hexo-learn-from-Never-yu.html" target="_blank" rel="noopener">Hexo博客设置进阶</a></li><li><a href="http://qianpm.com/tags/Hexo/" target="_blank" rel="noopener">停云馆</a></li></ul><a id="more"></a><h3 id="Hexo-建站之Next优化"><a href="#Hexo-建站之Next优化" class="headerlink" title="Hexo 建站之Next优化"></a>Hexo 建站之Next优化</h3><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener"> NexT 官方教程</a></li><li><a href="http://www.jianshu.com/p/f869d1940985" target="_blank" rel="noopener">玩转Hexo博客之Next</a></li><li><a href="http://www.jianshu.com/p/5d5931289c09" target="_blank" rel="noopener">Next主题(Hexo)</a></li><li><a href="http://jinfang.life/tags/hexo/" target="_blank" rel="noopener">NexT主题优化合级</a></li><li><a href="http://blog.shijinrong.cn/a/16062510/" target="_blank" rel="noopener">Next 使用技巧</a></li><li><a href="https://notes.wanghao.work/tags/Hexo/" target="_blank" rel="noopener">Hexo 标签</a></li><li><a href="http://svend.cc/tags/Hexo/" target="_blank" rel="noopener">Svend Hexo 标签</a></li><li><a href="https://clearsky.me/hexo-gulp-compress.html" target="_blank" rel="noopener">使用 gulp 压缩 hexo 静态资源</a></li></ul>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于 PHP 中 Cookie 与 Session 基础使用</title>
      <link href="/2017-06-25/%E5%85%B3%E4%BA%8E%20PHP%20%E4%B8%AD%20Cookie%20%E4%B8%8E%20Session%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2017-06-25/%E5%85%B3%E4%BA%8E%20PHP%20%E4%B8%AD%20Cookie%20%E4%B8%8E%20Session%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><code>Cookie</code> 是存储在客户端浏览器中的数据，通过<code>HTTP headers</code>从服务端返回到客户端，用来跟踪与存储用户数据。 </p><p><code>PHP</code>通过 <code>setcookie函数</code> 进行Cookie的设置，任何从浏览器发回的Cookie，PHP都会自动的将他存储在<code>$_COOKIE</code>的全局变量之中，因此我们可以通过 <code>$_COOKIE[&#39;key&#39;]</code> 的形式来读取某个Cookie值。Cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除。同时为了进行安全控制，Cookie还可以设置域跟路径。<br><a id="more"></a></p><h3 id="setcookie函数"><a href="#setcookie函数" class="headerlink" title="setcookie函数"></a>setcookie函数</h3><p><code>setcookie</code>具有7个可选参数，常用到的为前5个：</p><ul><li>name  （Cookie名）可以通过$_COOKIE[‘name’] 进行访问</li><li>value （Cookie的值）</li><li>expire（过期时间）Unix时间戳格式，默认为0，表示浏览器关闭即失效</li><li>path  （有效路径）如果路径设置为’/‘，则整个网站都有效</li><li>domain（有效域）默认整个域名都有效，如果设置了’<a href="http://www.imooc.com&#39;,则只在www子域中有效" target="_blank" rel="noopener">www.imooc.com&#39;,则只在www子域中有效</a></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span> = <span class="string">'test'</span>;</span><br><span class="line">setcookie(<span class="string">"TestCookie"</span>, <span class="variable">$value</span>);</span><br><span class="line">setcookie(<span class="string">"TestCookie"</span>, <span class="variable">$value</span>, time()+<span class="number">3600</span>);  <span class="regexp">//</span>有效期一小时</span><br><span class="line">setcookie(<span class="string">"TestCookie"</span>, <span class="variable">$value</span>, time()+<span class="number">3600</span>, <span class="string">"/path/"</span>, <span class="string">"imooc.com"</span>); <span class="regexp">//</span>设置路径与域</span><br></pre></td></tr></table></figure><h3 id="setrawcookie函数"><a href="#setrawcookie函数" class="headerlink" title="setrawcookie函数"></a>setrawcookie函数</h3><p><code>setrawcookie</code> 跟 <code>setcookie</code>基本一样，唯一的不同就是value值不会自动的进行 <code>urlencode</code>，因此在需要的时候要手动的进行urlencode。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setrawcookie('cookie_name', rawurlencode($value), time()<span class="number">+60</span>*60*<span class="number">24</span>*365);</span><br></pre></td></tr></table></figure><h3 id="header方法"><a href="#header方法" class="headerlink" title="header方法"></a>header方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Set-Cookie:cookie_name=value"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="cookie的删除与过期时间"><a href="#cookie的删除与过期时间" class="headerlink" title="cookie的删除与过期时间"></a>cookie的删除与过期时间</h3><p>在PHP中删除cookie也是采用setcookie函数来实现。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">setcookie</span>(<span class="string">'test'</span>, <span class="string">''</span>, time()-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>也可直接通过header来删除cookie。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Set-Cookie:test=1393832059; </span></span><br><span class="line"><span class="string">expires="</span>.gmdate('D, d M Y H<span class="symbol">:i</span><span class="symbol">:s</span> \G\M\T', time()<span class="number">-1</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>gmdate : 用来生成格林威治标准时间，以便排除时差的影响。</p><h3 id="cookie的有效路径"><a href="#cookie的有效路径" class="headerlink" title="cookie的有效路径"></a>cookie的有效路径</h3><p>cookie中的路径用来控制设置的cookie在哪个路径下有效，默认为’/‘，在所有路径下都有效，当设定了其他路径之后，则只在设定的路径以及子路径下有效。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie('test', time(), <span class="number">0</span>, '/path')<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="session与cookie的异同"><a href="#session与cookie的异同" class="headerlink" title="session与cookie的异同"></a>session与cookie的异同</h3><p>cookie将数据存储在客户端，建立起用户与服务器之间的联系，通常可以解决很多问题，但是cookie仍然具有一些局限：</p><blockquote><p>  cookie相对不是太安全，容易被盗用导致cookie欺骗；<br>  单个cookie的值最大只能存储4k；<br>  每次请求都要进行网络传输，占用带宽；</p></blockquote><p>session是将用户的会话数据存储在服务端，没有大小限制，通过一个<code>session_id</code>进行用户识别，PHP默认情况下session id是通过cookie来保存的，因此从某种程度上来说，seesion依赖于cookie。但这不是绝对的，session id也可以通过参数来实现，只要能将session id传递到服务端进行识别的机制都可以使用session。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始使用session</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="comment">//设置一个session</span></span><br><span class="line">$_SESSION[<span class="string">'test'</span>] = time();</span><br><span class="line"><span class="comment">//显示当前的session_id</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"session_id:"</span>.session_id();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取session值</span></span><br><span class="line"><span class="keyword">echo</span> $_SESSION[<span class="string">'test'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁一个session</span></span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'test'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">var_dump($_SESSION);</span><br></pre></td></tr></table></figure><h3 id="session的使用"><a href="#session的使用" class="headerlink" title="session的使用"></a>session的使用</h3><p><code>session_start</code>方法开启session，然后通过全局变量<code>$_SESSION</code>进行session的读写。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="meta">$</span><span class="bash">_SESSION[<span class="string">'test'</span>] = time();</span></span><br><span class="line"><span class="meta">var_dump($</span><span class="bash">_SESSION);</span></span><br></pre></td></tr></table></figure></p><p>session会自动的对要设置的值进行encode与decode，因此session可以支持任意数据类型，包括数据与对象等。默认情况下，session是以文件形式存储在服务器上的。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'ary'</span>] = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'jobs'</span>);</span><br><span class="line">$_SESSION[<span class="string">'obj'</span>] = <span class="keyword">new</span> stdClass();</span><br><span class="line">var_dump($_SESSION);</span><br></pre></td></tr></table></figure></p><h3 id="删除与销毁session"><a href="#删除与销毁session" class="headerlink" title="删除与销毁session"></a>删除与销毁session</h3><p>删除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'jobs'</span>;</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">echo</span> $_SESSION[<span class="string">'name'</span>]; <span class="comment">//提示name不存在</span></span><br></pre></td></tr></table></figure></p><p>如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="meta">$</span><span class="bash">_SESSION[<span class="string">'name'</span>] = <span class="string">'jobs'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">_SESSION[<span class="string">'time'</span>] = time();</span></span><br><span class="line">session_destroy();</span><br></pre></td></tr></table></figure></p><p>值得注意的是，session_destroy并不会立即的销毁全局变量<code>$_SESSION</code>中的值，只有当下次再访问的时候，<code>$_SESSION</code>才为空，因此如果需要立即销毁<code>$_SESSION</code>，可以使用<code>unset函数</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="meta">$</span><span class="bash">_SESSION[<span class="string">'name'</span>] = <span class="string">'jobs'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">_SESSION[<span class="string">'time'</span>] = time();</span></span><br><span class="line"><span class="meta">unset($</span><span class="bash">_SESSION);</span></span><br><span class="line">session_destroy(); </span><br><span class="line"><span class="meta">var_dump($</span><span class="bash">_SESSION); //此时已为空</span></span><br></pre></td></tr></table></figure></p><p>如果需要同时销毁cookie中的session_id，通常在用户退出的时候可能会用到，则还需要显式的调用setcookie方法删除session_id的cookie值。</p><h3 id="使用session来存储用户的登录信息"><a href="#使用session来存储用户的登录信息" class="headerlink" title="使用session来存储用户的登录信息"></a>使用session来存储用户的登录信息</h3><p>一般来说，登录信息既可以存储在sessioin中，也可以存储在cookie中，他们之间的差别在于session可以方便的存取多种数据类型，而cookie只支持字符串类型，同时对于一些安全性比较高的数据，cookie需要进行格式化与加密存储，而session存储在服务端则安全性较高。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="comment">//假设用户登录成功获得了以下用户数据</span></span><br><span class="line">$userinfo = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'uid'</span>  =&gt; <span class="number">10000</span>,</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'spark'</span>,</span><br><span class="line">    <span class="string">'email'</span> =&gt; <span class="string">'spark@imooc.com'</span>,</span><br><span class="line">    <span class="string">'sex'</span>  =&gt; <span class="string">'man'</span>,</span><br><span class="line">    <span class="string">'age'</span>  =&gt; <span class="string">'18'</span></span><br><span class="line">);</span><br><span class="line">header(<span class="string">"content-type:text/html; charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将用户信息保存到session中 */</span></span><br><span class="line">$_SESSION[<span class="string">'uid'</span>] = $userinfo[<span class="string">'uid'</span>];</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = $userinfo[<span class="string">'name'</span>];</span><br><span class="line">$_SESSION[<span class="string">'userinfo'</span>] = $userinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//* 将用户数据保存到cookie中的一个简单方法 */</span></span><br><span class="line">$secureKey = <span class="string">'imooc'</span>; <span class="comment">//加密密钥</span></span><br><span class="line">$str = serialize($userinfo); <span class="comment">//将用户信息序列化</span></span><br><span class="line"><span class="comment">//用户信息加密前</span></span><br><span class="line">$str = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($secureKey), $str, MCRYPT_MODE_ECB));</span><br><span class="line"><span class="comment">//用户信息加密后</span></span><br><span class="line"><span class="comment">//将加密后的用户数据存储到cookie中</span></span><br><span class="line">setcookie(<span class="string">'userinfo'</span>, $str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当需要使用时进行解密</span></span><br><span class="line">$str = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($secureKey), base64_decode($str), MCRYPT_MODE_ECB);</span><br><span class="line">$uinfo = unserialize($str);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"解密后的用户信息：&lt;br&gt;"</span>;</span><br><span class="line">print_r($uinfo);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-个性化设置</title>
      <link href="/2017-06-02/Hexo-%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
      <url>/2017-06-02/Hexo-%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="1-新建文章后自动打开文件"><a href="#1-新建文章后自动打开文件" class="headerlink" title="1.新建文章后自动打开文件"></a>1.新建文章后自动打开文件</h3><p>版本配置：</p><ul><li>Hexo 3 版本</li><li>Windows 10 操作系统</li></ul><p>在 <code>hexo\scripts</code> 目录新建文件 <code>open_new.js</code>，在其中捕获<code>new</code>事件，若<code>scripts</code> 文件夹不存在可手动创建。<br>添加如下代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//hexo new <span class="string">"post"</span>后自动用默认编辑器打开文件</span><br><span class="line">var exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line">/* Hexo <span class="number">2.</span>x</span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(path)</span></span>&#123;</span><br><span class="line">  exec(<span class="string">'start'</span> + <span class="built_in">path</span>);</span><br><span class="line">&#125;);</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// Hexo <span class="number">3</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span><br><span class="line">  exec(<span class="string">'start '</span> + data.<span class="built_in">path</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>Hexo 2.x</code> 版本尚未测试，猜想可能代码差不多是这样吧，安装 <code>2.x版本</code> 的朋友可以试试。</p><h3 id="2-添加Fork-Me-On-Github"><a href="#2-添加Fork-Me-On-Github" class="headerlink" title="2. 添加Fork Me On Github"></a>2. 添加Fork Me On Github</h3><p><code>Fork Me On Github</code> 挂件在博客左上角，<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">官网可选样式</a></p><p><strong>复制如下Github挂件样式代：</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https://gfigure.github.io/"</span>&gt;&lt;img <span class="attribute">style</span>=<span class="string">"position: absolute; top: 0; left: 0; border: 0;"</span> <span class="attribute">src</span>=<span class="string">"https://camo.githubusercontent.com/8b6b8ccc6da3aa5722903da7b58eb5ab1081adee/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6f72616e67655f6666373630302e706e67"</span> <span class="attribute">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attribute">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_left_orange_ff7600.png"</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>修改上述代码中<code>&lt;a href=&quot;https://gfigure.github.io/&quot;&gt;</code>的 <code>href</code> 地址为自己的<code>github</code>地址。</p><p>将代码添加至<code>/themes/next/layout/_layout.swig</code> 文件中，如下 ：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; container_class &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"> </span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> page_class %&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag"><span class="string"> "</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">     </span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!----------- add Fork me on Github ------------&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://gfigure.github.io/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 500; left: 0; border: 0;"</span> <span class="attr">src</span>=<span class="string">"https://camo.githubusercontent.com/8b6b8ccc6da3aa5722903da7b58eb5ab1081adee/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6f72616e67655f6666373630302e706e67"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_left_orange_ff7600.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!----------- add Fork me on Github ------------&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/WPHeader"</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-inner"</span>&gt;</span> </span><span class="template-tag">&#123;%- <span class="name"><span class="name">include</span></span> '_partials/header.swig' %&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="添加-Flagcounter-挂件"><a href="#添加-Flagcounter-挂件" class="headerlink" title="添加 Flagcounter 挂件"></a>添加 <code>Flagcounter</code> 挂件</h3><p><code>Flagcounter</code> 这个小工具可以帮你统计你的博客访问量及访客的国家分布，展示效果如下：</p><p><a href="http://s05.flagcounter.com/more/yiW7" target="_blank" rel="noopener"><img src="http://s05.flagcounter.com/count2/yiW7/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_10/viewers_0/labels_1/pageviews_1/flags_0/percent_0/" alt="Flag Counter" border="0"></a></p><p>登录 <a href="http://www.flagcounter.com/" target="_blank" rel="noopener"> Flagcounter官网 </a>，设置自己喜欢的样式，点击<code>GET YOUR FLAG COUNTER</code>并填写你的email之后就可以得到类似下面的一段代码：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"http://s05.flagcounter.com/more/yiW7"</span>&gt;&lt;img <span class="attribute">src</span>=<span class="string">"http://s05.flagcounter.com/count2/yiW7/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_10/viewers_0/labels_1/pageviews_1/flags_0/percent_0/"</span> <span class="attribute">alt</span>=<span class="string">"Flag Counter"</span> <span class="attribute">border</span>=<span class="string">"0"</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>这段代码可以放在你的博客页面的任意位置（比如直接放在md文件，侧边栏布局文件等等，看你自己怎么用了）</p><p>参考链接：</p><p><a href="https://neveryu.github.io" target="_blank" rel="noopener">Never_yu’s Blog</a></p><p><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p><p><a href="http://tc9011.com/2016/12/24/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E3%80%81high%E4%B8%80%E4%B8%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%9D%91/" target="_blank" rel="noopener">hexo添加音乐、high一下及一些坑</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next 添加网易云跟贴及问题解决</title>
      <link href="/2017-06-02/Next-%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E8%B7%9F%E8%B4%B4%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2017-06-02/Next-%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E8%B7%9F%E8%B4%B4%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h3 id="登陆网易云跟帖-，-获取-gentie-productKey"><a href="#登陆网易云跟帖-，-获取-gentie-productKey" class="headerlink" title="登陆网易云跟帖 ， 获取 gentie_productKey"></a>登陆<a href="">网易云跟帖</a> ， 获取 gentie_productKey</h3><p><code>网易云跟贴</code> 然后从 <code>获取代码</code> 中的 <code>WEB代码</code>找到<code>productKey</code> 显示如下：</p><p><img src="http://oqiflua2i.bkt.clouddn.com/网易云-min.png" alt="网易云密钥"></p><a id="more"></a><h3 id="编辑主题配置文件"><a href="#编辑主题配置文件" class="headerlink" title="编辑主题配置文件"></a>编辑主题配置文件</h3><p>编辑 <code>gentie_productKey</code> 字段，设置如下： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gentie_productKey:</span> <span class="comment">#your-gentie-product-key</span></span><br></pre></td></tr></table></figure><p>然后执行命令 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>注意事项：</p><pre><code>- ` Next 5.1.1 `版本- 在云跟帖管理后台设置的域名必须跟站点的域名一致。- `hexo s `本地预览不显示，是需要配置本地host文件：参照 [#1506](https://github.com/iissnan/hexo-theme-next/issues/1506)</code></pre><h3 id="解决网易云跟帖不显示问题"><a href="#解决网易云跟帖不显示问题" class="headerlink" title="解决网易云跟帖不显示问题"></a>解决网易云跟帖不显示问题</h3><p>在主题文件夹中查看<code>/themes/next/layout/_partials/comments.swig</code> 中的代码，找到下面代码：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &#123;% elseif theme.gentie_productKey %&#125;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"cloud-tie-wrapper"</span> <span class="built_in">class</span>=<span class="string">"cloud-tie-wrapper"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">##添加上面标记的 web 代码</span></span><br><span class="line"></span><br><span class="line">&#123;% elseif theme.youyan_uid %&#125;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"uyan_frame"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>重新执行命令 <code>hexo clean &amp;&amp; hexo g &amp;&amp;  hexo d</code> ，再进入自己的博客就可以了（反正我是这样的，哈哈哈！！！）。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next-主题美化设置</title>
      <link href="/2017-05-31/Next-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BE%8E%E5%8C%96/"/>
      <url>/2017-05-31/Next-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BE%8E%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="在文档中增加图标"><a href="#在文档中增加图标" class="headerlink" title="在文档中增加图标"></a>在文档中增加图标</h3><p><a href="https://neveryu.github.io/2016/09/03/hexo-next-one/" target="_blank" rel="noopener"> Hexo-NexT搭建个人博客（一）</a>有符合主题色调的图标搭配文字，效果如下： </p><ul><li><i class="fa fa-pencil"></i> <h6 style="display: inline;">　支持 Markdown </h6><br><i> Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress  的大多数插件。</i></li><li><i class="fa fa-cloud-upload"></i><h6 style="display: inline;">　一件部署 </h6><br><i> 只需一条指令即可部署到 Github Pages，或其他网站 </i></li><li><i class="fa fa-cog"></i><h6 style="display: inline;">　丰富的插件 </h6><br><i> Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript 。</i></li></ul><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">h6</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span>　支持 Markdown <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress  的大多数插件。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cloud-upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">h6</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span>　一件部署 <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> 只需一条指令即可部署到 Github Pages，或其他网站 <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">- <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">h6</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span>　丰富的插件 <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript 。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是在Markdown中插入了html的语句。至于图标，采用 <a href="http://fontawesome.io/" target="_blank" rel="noopener"> Font Awesome </a> 提供的默认图标，语法格式如下：</p><p><i class="fa fa-github"></i>    <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i>  <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i>  <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p><p>Font Awesome 提供了<a href="http://fontawesome.io/examples/" target="_blank" rel="noopener"> 大量的应用方法说明 </a>，可以参考设置自己的博客内容。</p><h3 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a>文字增加背景色块</h3><p>相信大家对下面的文字增加背景色块的显示方式并不陌生。</p><blockquote><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方文档</a>开篇：为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件。<br>Github仓库的<a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.md" target="_blank" rel="noopener">Readme.md</a>中的小图标（如下图）：</p></blockquote><p><img src="" alt=""></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown 语法手册</title>
      <link href="/2017-05-29/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/"/>
      <url>/2017-05-29/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h2 id="index_1">1- 斜体和粗体</h2><p><strong>代码：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*斜体*</span>或<span class="emphasis">_斜体_</span></span><br><span class="line">*<span class="strong">*粗体*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*加粗斜体*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">~~删除线~~</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong><br><em>这是一段斜体</em><br><strong>这是一段粗体</strong><br><strong><em>这是一段加粗斜体</em></strong><br><del>这是一段删除线</del></p><a id="more"></a><hr><h2 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2- 分级标题"></a>2- 分级标题</h2><p><strong>第一种写法：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>第二种写法：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><hr><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3- 超链接"></a>3- 超链接</h2><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。</p><h3 id="3-1-行内式"><a href="#3-1-行内式" class="headerlink" title="3-1- 行内式"></a>3-1- 行内式</h3><p><strong>语法说明：</strong></p><blockquote><p>[ ] 里写链接文字，( )里写链接地址, ( )中的””中可以为链接指定 title 属性，title 属性可加可不加。</p></blockquote><blockquote><p>title 属性的效果是鼠标悬停在链接上会出现指定的 title文字。[ 链接文字 ]( 链接地址 “链接标题” )这样的形式。链接地址与链接标题前有一个空格。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">欢迎访问 [<span class="string">卖姑娘的小火柴</span>](<span class="link">https://gfigure.github.io/</span>)</span><br><span class="line"></span><br><span class="line">欢迎访问 [<span class="string">卖姑娘的小火柴</span>](<span class="link">https://gfigure.github.io/ "卖姑娘的小火柴"</span>)</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>欢迎访问 <a href="https://gfigure.github.io/" target="_blank" rel="noopener">卖姑娘的小火柴</a></p><p>欢迎访问 <a href="https://gfigure.github.io/" title="卖姑娘的小火柴" target="_blank" rel="noopener">卖姑娘的小火柴</a></p><hr><h3 id="3-2-参考式"><a href="#3-2-参考式" class="headerlink" title="3-2- 参考式"></a>3-2- 参考式</h3><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p><strong>语法说明：</strong></p><blockquote><p>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</p></blockquote><blockquote><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">友情链接：[<span class="string">Google</span>][<span class="symbol">1</span>]、[<span class="string">知乎</span>][<span class="symbol">2</span>] 以及 [<span class="string">卖姑娘的小火柴</span>][<span class="symbol">3</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">知乎网站</span>][<span class="symbol">2</span>] ：与世界分享你的知识、经验和见解</span><br><span class="line"></span><br><span class="line">[<span class="string">点击</span>][<span class="symbol"></span>]开始分享</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]:<span class="link">http://www.google.com "Google"</span></span><br><span class="line">[<span class="symbol">2</span>]:<span class="link">https://www.zhihu.com/ "知乎"</span></span><br><span class="line">[<span class="symbol">3</span>]:<span class="link">https://gfigure.github.io/ "梵居闹市"</span></span><br><span class="line">[<span class="symbol">点击</span>]:<span class="link">https://www.zhihu.com/people/geng-dong-fei/activities</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>友情链接：<a href="http://www.google.com" title="Google" target="_blank" rel="noopener">Google</a>、<a href="https://www.zhihu.com/" title="知乎" target="_blank" rel="noopener">知乎</a> 以及 <a href="https://gfigure.github.io/" title="卖姑娘的小火柴" target="_blank" rel="noopener">卖姑娘的小火柴</a></p><p><a href="https://www.zhihu.com/" title="知乎" target="_blank" rel="noopener">知乎网站</a> ：与世界分享你的知识、经验和见解</p><p><a href="https://www.zhihu.com/people/geng-dong-fei/activities" target="_blank" rel="noopener">点击</a> 开始分享</p><hr><h3 id="3-3-自动链接"><a href="#3-3-自动链接" class="headerlink" title="3-3- 自动链接"></a>3-3- 自动链接</h3><p><strong>语法说明：</strong></p><blockquote><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown  就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p></blockquote><p><strong>代码：</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="string">http:</span><span class="comment">//example.com/&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;address<span class="meta">@example</span>.com&gt;</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><p><a href="mailto:&#x61;&#x64;&#x64;&#114;&#101;&#115;&#x73;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#x61;&#x64;&#x64;&#114;&#101;&#115;&#x73;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><hr><h2 id="4-锚点"><a href="#4-锚点" class="headerlink" title="4- 锚点"></a>4- 锚点</h2><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。</p><blockquote><p>注意：<br>Markdown 似乎不支持锚点，但是可以通过插入HTML实现锚点。 </p></blockquote><p><strong>语法描述：</strong></p><blockquote><p>使用 <code>h1 / h2</code> ( # 个数对应相应级别的 HTML 样式标题)，且使用 id 属性命名锚。<code>&lt;h1 id=&quot;锚点名称&quot;&gt; 锚点 &lt;/h1&gt;</code> ，链接至标题 [ 标题 ](# 锚点名称 )<br>使用 a 标签： <code>&lt;a name=&quot;锚点名称&quot;&gt; 标题 &lt;/a&gt;</code>，链接至标题<code>&lt;a href=&quot;锚点名称&quot;&gt; 锚点 &lt;/a&gt;</code></p></blockquote><p><strong>代码：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span> = <span class="string">"目录"</span>&gt;</span></span>0. 目录<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">跳转到[<span class="string">目录</span>](<span class="link">#目录</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## &lt;a name="index_1"&gt; 1. 斜体和粗体 &lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#index_1"</span>&gt;</span></span> 跳转到 1. 斜体和粗体 <span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>跳转到 <a href="#index_1">1 - 斜体和粗体</a></p><p>注意 a 标签它具有自身的样式，在这里就不示范了。</p><hr><h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5- 列表"></a>5- 列表</h2><h3 id="5-1-无序列表"><a href="#5-1-无序列表" class="headerlink" title="5-1- 无序列表"></a>5-1- 无序列表</h3><p>使用  <code>*，+，-</code> 表示无序列表。</p><p><strong>代码：</strong><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 无序列表项 一</span></span><br><span class="line"><span class="ruby">- 无序列表项 二</span></span><br><span class="line"><span class="ruby">- 无序列表项 三</span></span><br></pre></td></tr></table></figure></p><p><strong>显示效果：</strong></p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三 </li></ul><hr><h3 id="5-2-有序列表"><a href="#5-2-有序列表" class="headerlink" title="5-2- 有序列表"></a>5-2- 有序列表</h3><p>有序列表则使用数字接着一个英文句点。</p><p><strong>代码：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表项 一</span><br><span class="line"><span class="bullet">2. </span>有序列表项 二</span><br><span class="line"><span class="bullet">3. </span>有序列表项 三</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><hr><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6- 引用"></a>6- 引用</h2><p><strong>语法说明：</strong></p><blockquote><p>引用需要在被引用的文本前加上 &gt; 符号。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 这是一个有两段文字的引用,</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 无意义的占行文字1.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 无意义的占行文字2.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 无意义的占行文字3.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 无意义的占行文字4.</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><blockquote><p>这是一个有两段文字的引用,<br>无意义的占行文字1.<br>无意义的占行文字2.</p><p>无意义的占行文字3.<br>无意义的占行文字4.</p></blockquote><hr><h3 id="6-1-引用的多层嵌套"><a href="#6-1-引用的多层嵌套" class="headerlink" title="6-1- 引用的多层嵌套"></a>6-1- 引用的多层嵌套</h3><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><p>代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 请问 Markdwon 怎么用？ - 小白</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; 自己看教程！ - 愤青</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 教程在哪？ - 小白</span></span><br></pre></td></tr></table></figure></p><p>显示效果：</p><blockquote><blockquote><blockquote><p>请问 Markdwon 怎么用？ - 小白<br>自己看教程！ - 愤青<br>教程在哪？ - 小白</p></blockquote></blockquote></blockquote><hr><h2 id="7-插入图像"><a href="#7-插入图像" class="headerlink" title="7- 插入图像"></a>7- 插入图像</h2><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><h3 id="7-1-行内式"><a href="#7-1-行内式" class="headerlink" title="7-1- 行内式"></a>7-1- 行内式</h3><p><strong>语法说明：</strong></p><blockquote><p>![图片Alt](图片地址 “图片Title”)<br>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">卖姑娘的小火柴 ：</span><br><span class="line"></span><br><span class="line">![<span class="string">卖姑娘的小火柴</span>](<span class="link">http://oqiflua2i.bkt.clouddn.com/avatar.png "卖姑娘的小火柴"</span>)</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>卖姑娘的小火柴 ：</p><p><img src="http://oqiflua2i.bkt.clouddn.com/avatar.png" alt="卖姑娘的小火柴" title="卖姑娘的小火柴"></p><h3 id="7-2-参考式"><a href="#7-2-参考式" class="headerlink" title="7-2- 参考式"></a>7-2- 参考式</h3><p><strong>语法说明：</strong></p><blockquote><p>在文档要插入图片的地方写  ! [ 图片Alt ] [ 标记] </p></blockquote><blockquote><p>在文档的最后写上 [ 标记 ] : 图片地址 “Title”</p></blockquote><p><strong>代码：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">卖姑娘的小火柴 ：</span><br><span class="line">![<span class="string">卖姑娘的小火柴</span>][<span class="symbol">flower</span>]</span><br><span class="line">[<span class="symbol">flower</span>]:<span class="link">http://oqiflua2i.bkt.clouddn.com/avatar.png   "卖姑娘的小火柴"</span></span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><p>卖姑娘的小火柴 ：</p><p><img src="http://oqiflua2i.bkt.clouddn.com/avatar.png" alt="卖姑娘的小火柴" title="卖姑娘的小火柴"></p><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8- 表格"></a>8- 表格</h2><p><strong>语法说明：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</span><br><span class="line"></span><br><span class="line">列于列之间用管道符<span class="string">|隔开。原生方式的表格每一行的两边也要有管道符。</span></span><br><span class="line"></span><br><span class="line">第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><p>简单方式写表格：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学号|<span class="string">姓名</span>|<span class="string">分数</span></span><br><span class="line"><span class="string">-</span>|<span class="string">-</span>|<span class="string">-</span></span><br><span class="line"><span class="string">小明</span>|<span class="string">男</span>|75</span><br><span class="line">小红|<span class="string">女</span>|79</span><br><span class="line">小陆|<span class="string">男</span>|92</span><br></pre></td></tr></table></figure><p>原生方式写表格：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|<span class="string">学号</span>|<span class="string">姓名</span>|<span class="string">分数</span>|</span><br><span class="line">|<span class="string">-</span>|<span class="string">-</span>|<span class="string">-</span>|</span><br><span class="line">|<span class="string">小明</span>|<span class="string">男</span>|<span class="string">75</span>|</span><br><span class="line">|<span class="string">小红</span>|<span class="string">女</span>|<span class="string">79</span>|</span><br><span class="line">|<span class="string">小陆</span>|<span class="string">男</span>|<span class="string">92</span>|</span><br></pre></td></tr></table></figure><p>显示效果：<br>简单方式写表格：</p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><p>原生方式写表格：</p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><h2 id="9-分隔线"><a href="#9-分隔线" class="headerlink" title="9- 分隔线"></a>9- 分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><p><strong>代码：</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="strong">*****</span></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><p><strong>显示效果 ：</strong></p><hr><hr><h2 id="10-代码"><a href="#10-代码" class="headerlink" title="10- 代码"></a>10- 代码</h2><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进( Tab )， 另一种是利用 “ ` “ 符号（一般在ESC键下方）包裹代码。</p><p>语法说明：</p><blockquote><p>插入行内代码，即插入一个单词或者一句代码的情况，使用  `code`  这样的形式插入。<br>插入多行代码，可以使用缩进或者 ``` code ``` ，具体看示例。<br>注意： 缩进式插入前方必须有空行</p></blockquote><h3 id="10-1-行内式"><a href="#10-1-行内式" class="headerlink" title="10-1- 行内式"></a>10-1- 行内式</h3><p><strong>代码：</strong><br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`PHP`  是世界上最好的语言</span><br></pre></td></tr></table></figure></p><p><strong>显示效果：</strong></p><p><code>PHP</code> 是世界上最好的语言</p><h3 id="10-2-缩进式多行代码"><a href="#10-2-缩进式多行代码" class="headerlink" title="10-2- 缩进式多行代码"></a>10-2- 缩进式多行代码</h3><p>缩进 4 个空格或是 1 个制表符</p><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>显示效果：</strong></p><pre><code>#include &lt;stdio.h&gt;int main(void){    printf(&quot;Hello world\n&quot;);}</code></pre><h3 id="10-3-用六个-包裹多行代码"><a href="#10-3-用六个-包裹多行代码" class="headerlink" title="10-3- 用六个 ` 包裹多行代码"></a>10-3- 用六个 ` 包裹多行代码</h3><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ` ` `</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> ` ` `</span><br></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qiniu-image-tool 实现图片一键上传七牛云</title>
      <link href="/2017-05-28/Qiniu-image-tool-%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E4%B8%83%E7%89%9B%E4%BA%91/"/>
      <url>/2017-05-28/Qiniu-image-tool-%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%80%E9%94%AE%E4%B8%8A%E4%BC%A0%E4%B8%83%E7%89%9B%E4%BA%91/</url>
      <content type="html"><![CDATA[<p><code>qiniu-image-tool</code>是一个提升 markdown 贴图体验的实用小工具，支持<code>windows</code> 及 <code>mac</code>。其中 <code>qiniu-image-tool-win</code> 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li>复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片</li><li>切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）</li></ol><h3 id="预览效果图："><a href="#预览效果图：" class="headerlink" title="预览效果图："></a>预览效果图：</h3><ul><li>本地图片文件上传</li></ul><p><img src="https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/local.gif?raw=true" alt="本地图片文件上传"></p><a id="more"></a><ul><li>截图上传 </li></ul><p><img src="https://github.com/jiwenxing/qiniu-image-tool-win/blob/master/res/screenshot.gif?raw=true" alt="截图上传"></p><ul><li>其它文件上传 </li></ul><p><img src="https://raw.githubusercontent.com/jiwenxing/qiniu-image-tool-win/master/res/file.gif" alt="其它文件上传"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>首先从 <a href="https://github.com/jiwenxing/qiniu-image-tool-win/releases" target="_blank" rel="noopener">github</a> 下载release版本（有两个版本：<code>2.0 正式版</code>和<code>1.0 正式版</code>，推荐使用2.0 正式版）并解压到任意目录 </p><p><strong>1.0 正式版</strong> 目录结构应如下：</p><p><img src="http://oqiflua2i.bkt.clouddn.com/1.0正式版.png" alt="1.0 正式版"></p><p><strong>2.0 正式版</strong> 目录结构应如下：</p><p><img src="http://oqiflua2i.bkt.clouddn.com/2.0正式版.png" alt="2.0 正式版"></p><p>其中<code>dump-clipboard-png.ps1</code>是保存截图的<code>powershell</code>脚本，<code>qiniu-image-upload.ahk</code> 即完成文件上传的<code>AutoHotkey</code>脚本。</p><h3 id="安装-AutoHotkey"><a href="#安装-AutoHotkey" class="headerlink" title="安装 AutoHotkey"></a>安装 AutoHotkey</h3><p><a href="https://autohotkey.com/" target="_blank" rel="noopener">AutoHotkey官网</a> 下载安装最新版本，这是一款免费的、Windows平台下开放源代码的热键脚本语言，利用其通过自定义热键触发一系列系统调用从而完成自动化操作。</p><h3 id="注册七牛账号并创建一个-bucket"><a href="#注册七牛账号并创建一个-bucket" class="headerlink" title="注册七牛账号并创建一个 bucket"></a>注册七牛账号并创建一个 <code>bucket</code></h3><p>参照 <a href="https://gfigure.github.io/2017/05/27/Markdown%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/" target="_blank" rel="noopener">Markdown配置七牛云作为图床</a></p><h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><h3 id="1-0-正式版配置"><a href="#1-0-正式版配置" class="headerlink" title="1.0 正式版配置"></a>1.0 正式版配置</h3><p>文件夹中选中<code>qiniu-image-upload.ahk</code>文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;;;; config start, you need to replace them by yours</span></span><br><span class="line"><span class="attr">ACCESS_KEY</span> = G4T2TrlRFLf2-Da-IUrHJKSbVYbJTGpcwBVFbz3Da</span><br><span class="line"><span class="attr">SECRET_KEY</span> = <span class="number">0</span>wgbpmquurY_BndFuPvDGqzlnfWHCdL8YHjz_fHJa</span><br><span class="line"><span class="attr">BUCKET_NAME</span> = fortest  ;qiniu bucket name</span><br><span class="line"><span class="attr">BUCKET_DOMAIN</span> = http://<span class="number">7</span>xry05.com1.z0.glb.clouddn.com/  ;qiniu domain for the image</span><br><span class="line"><span class="attr">WORKING_DIR</span> = E:\GIT\qiniu-image-tool-win\  ;directory that you put the qshell.exe </span><br><span class="line"><span class="comment">;;;; config end</span></span><br></pre></td></tr></table></figure><h3 id="2-0-正式版配置"><a href="#2-0-正式版配置" class="headerlink" title="2.0 正式版配置"></a>2.0 正式版配置</h3><p>文件夹中选中打开<code>settings.ini</code>文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ACCESS_KEY</span> = G4T2TrlRFLf2-Da-IUrHJKSbVYbJTGpcwBVFbz3Da</span><br><span class="line"><span class="attr">SECRET_KEY</span> = <span class="number">0</span>wgbpmquurY_BndFuPvDGqzlnfWHCdL8YHjz_fHJf</span><br><span class="line"><span class="attr">BUCKET_NAME</span> = fortest</span><br><span class="line"><span class="attr">BUCKET_DOMAIN</span> = http://<span class="number">7</span>xry05.com1.z0.glb.clouddn.com</span><br><span class="line"></span><br><span class="line"><span class="comment">;optional settings</span></span><br><span class="line"><span class="attr">UP_HOST</span> = http://up.qiniu.com</span><br><span class="line"><span class="attr">DEBUG_MODE</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：</p><p><strong>ACCESS_KEY &amp; SECRET_KEY</strong></p><p>这是qshell操作个人账号的账号凭证，登陆七牛账号后在<code>个人面板-&gt;密钥管理</code>中查看，或者直接访问<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener"></a>查看。</p><p><strong>BUCKET_NAME &amp; BUCKET_DOMAIN</strong></p><p>在<code>对象存储-&gt;存储空间列表</code>中选择或新建一个存储空间即<code>bucket</code>，点击该<code>bucket</code>在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 <strong><em>http头</em></strong> 和最后的那个 <strong><em>斜杠</em></strong>。</p><p><strong>WORKING_DIR</strong></p><p>这是设置您的工作目录，即这些脚本所在的目录，比如我将从github上下载的release压缩包解压到了<code>E:\TOOLS</code>目录下，那我的<code>WORKING_DIR</code>就是<code>E:\TOOLS\qiniu-image-tool-win\</code>。<strong><em>注意不要少了最后那个反斜杠 。另外需要特别注意的是路径中不能包含中文，而且不能有类似Program Files这类包含空格的路径。</em></strong></p><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><h3 id="1-0-正式版运行"><a href="#1-0-正式版运行" class="headerlink" title="1.0 正式版运行"></a>1.0 正式版运行</h3><p>至此所有的安装和配置过程都结束了，右键点击 <code>qiniu-image-upload.ahk</code>文件选择运行脚本（<code>Run Script</code>），这时便可以在任务栏看到一个H字母的绿色图标在运行。这时便可以使用<code>ctrl+alt+v</code>尝试上传图片了。</p><h3 id="2-0-正式版运行"><a href="#2-0-正式版运行" class="headerlink" title="2.0 正式版运行"></a>2.0 正式版运行</h3><p>配置完成以后以管理员身份运行<code>qImage.exe</code>，这时便可以使用<code>ctrl+alt+v</code>尝试上传图片了。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数<code>DEBUG_MODE = false</code> 改为<code>DEBUG_MODE = true</code>打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。</p><h2 id="修改默认项"><a href="#修改默认项" class="headerlink" title="修改默认项"></a>修改默认项</h2><p>以下操作非必需，是对一些默认设置的修改，请根据喜好自行选择。</p><h3 id="修改快捷键"><a href="#修改快捷键" class="headerlink" title="修改快捷键"></a>修改快捷键</h3><p>脚本中默认的快捷键是<code>^!V</code>，即<code>ctrl+alt+v</code>(^代表ctrl，!为alt)，如果您希望修改为其它自己习惯的快捷键，直接修改并reload脚本即可生效。<br>关于<code>hotkey</code>的符号与按键对应关系请参考 <a href="https://autohotkey.com/docs/Hotkeys.htm" target="_blank" rel="noopener">You can use the following modifier symbols to define hotkeys</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>参照：</p><ul><li><a href="http://jverson.com/2017/05/28/qiniu-image-v2/" target="_blank" rel="noopener">windows版本markdown一键贴图工具</a></li><li><a href="https://github.com/jiwenxing/qiniu-image-tool-win/issues" target="_blank" rel="noopener">AutoHotkey&amp;qshell实现图片一键上传七牛并返回markdown引用（适用1.x版本）</a></li></ul>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown-配置七牛云作为图床</title>
      <link href="/2017-05-27/Markdown-%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2017-05-27/Markdown-%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</url>
      <content type="html"><![CDATA[<p>Hexo在使用Markdown编辑发布博客时，经常要上传本地图片，渲染加载图片的效果很不理想。推荐使用云平台作为图床，提高编辑效率和图片效果。</p><p>在这里推荐使用七牛云，身份认证完成后，免费额度高：</p><p><img src="http://oqiflua2i.bkt.clouddn.com/七牛优惠.png" alt="七牛优惠"></p><a id="more"></a><h3 id="注册配置七牛云"><a href="#注册配置七牛云" class="headerlink" title="注册配置七牛云"></a>注册配置七牛云</h3><p><a href="https://portal.qiniu.com/signup/choice" target="_blank" rel="noopener">注册地址</a></p><p>注册完成之后，在<code>资源主页</code>中的<code>对象存储</code>里添加对象，如添加<code>image</code>，但不能为<code>Bucket</code><br><img src="http://oqiflua2i.bkt.clouddn.com/资源主页.png" alt="资源主页"></p><p><img src="http://oqiflua2i.bkt.clouddn.com/添加对象.png" alt="添加对象"></p><p>注意选择的地区可能会影响到图片能否加载成功，如果出错修改地区重试。</p><h3 id="简单的上传图片，复制外链"><a href="#简单的上传图片，复制外链" class="headerlink" title="简单的上传图片，复制外链"></a>简单的上传图片，复制外链</h3><p><img src="http://oqiflua2i.bkt.clouddn.com/上传文件.gif" alt="上传文件"></p><p>如果每次都要进入七牛云网页上传图片，有点麻烦，下面推荐使用插件快速上传图片</p><h3 id="在chrome安装qiniu-upload-files插件"><a href="#在chrome安装qiniu-upload-files插件" class="headerlink" title="在chrome安装qiniu upload files插件"></a>在chrome安装<a href="https://chrome.google.com/webstore/search/qiniu?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">qiniu upload files</a>插件</h3><p>安装成功后打开，显示如下界面 :<br><img src="http://oqiflua2i.bkt.clouddn.com/七牛插件.png" alt="七牛插件"></p><p>配置qiniu-upload-files插件，进入七牛云<code>个人中心</code>的<code>密钥管理</code>，获取<code>AccessKey</code>和<code>SecretKey</code><br><img src="http://oqiflua2i.bkt.clouddn.com/密钥管理.png" alt="密钥管理"></p><p>在建立的存储对象中的<code>空间概览</code>里获取<code>测试域名</code>，<code>bucket</code>指的是之前添加的存储对象名称<code>image</code></p><p>配置完成后返回，将本地图片拖拽到此窗口即可上传文件，复制外链。</p><p><img src="http://oqiflua2i.bkt.clouddn.com/拖拽文件.png" alt="拖拽文件"></p><p>提示：若上传的图片占的空间大，最好要<code>在线压缩</code>后再上传。避免网站访问量大，请求的次数多，额度消耗的太快。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django 系列问题集锦</title>
      <link href="/2017-03-24/Django%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2017-03-24/Django%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p><strong>应用FAQ</strong></p><ul><li><a href="http://happyprince.iteye.com/blog/2229613" target="_blank" rel="noopener">Django 模板过滤器列表</a> <a id="more"></a></li></ul><p><strong>部署</strong></p><ul><li><a href="https://delcoding.github.io/2018/01/django-nginx-uwsgi/#2" target="_blank" rel="noopener">部署Django项目</a></li><li><a href="http://wongbingming.me/2017/9/10/Django-Nginx-Uwsgi-Supervisor-Blog.html" target="_blank" rel="noopener">使用Django+Nginx+Uwsgi+Supervisor部署博客 | MING’s Blog</a></li><li><a href="http://python.usyiyi.cn/translate/django_182/index.html" target="_blank" rel="noopener">Django 文档 — Django 1.8.2 中文文档</a></li><li><a href="https://www.imooc.com/article/23052?block_id=tuijian_wz" target="_blank" rel="noopener">部署Django uwsgi nginx应用_慕课手记</a></li><li><a href="https://www.centos.bz/2017/07/centos7-uwsgi-nginx-django-app/" target="_blank" rel="noopener">CentOS7系统安装uWSGI Nginx运行Django应用</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 系列问题集锦</title>
      <link href="/2017-02-24/Python%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2017-02-24/Python%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p><strong>摘要</strong></p><p>VirtualEnv 创建虚拟环境报错：<code>AttributeError: &#39;module&#39; object has no attribute &#39;F_GETFD&#39;</code></p><p>将 pyhton 27 安装目录下的 <code>Lib -&gt; fcntl.py</code> 重命名为 <code>fcntl_ex.py</code></p><ul><li><a href="http://blog.csdn.net/wireless_com/article/details/52713868" target="_blank" rel="noopener">一行 Python 代码</a></li><li><a href="https://anjingwd.github.io/AnJingwd.github.io/2017/08/05/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BE%93%E5%87%BApython%E5%AD%97%E5%85%B8/" target="_blank" rel="noopener">如何优雅的输出 Python 字典| Json 数据</a></li></ul><p><strong>参考文档</strong></p><ul><li><a href="http://pyzh.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">PyZh — 一起写Python文章，一起看Python文章</a></li><li><a href="https://www.gitbook.com/book/yuanbin/algorithm/details" target="_blank" rel="noopener">Data Structure and Algorithm notes</a></li><li><a href="https://www.gitbook.com/book/ictar/python-doc-zh/details" target="_blank" rel="noopener">Python Chinese documents</a></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 系列问题集锦</title>
      <link href="/2017-01-24/CentOS%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2017-01-24/CentOS%20%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<p><strong>环境搭建</strong></p><ul><li><a href="https://segmentfault.com/a/1190000009922582" target="_blank" rel="noopener">在 CentOS 7 上安装并配置 Python 3.6 环境 - TaoBeier</a></li></ul><a id="more"></a><p><strong>系统操作</strong></p><ul><li><a href="http://blog.csdn.net/r13929847477/article/details/52336925" target="_blank" rel="noopener">CentOS查看进程、杀死进程、启动进程等常用命令</a></li><li><a href="https://www.cnblogs.com/apexchu/p/4193117.html" target="_blank" rel="noopener">查看centos中的用户和用户组</a></li><li><a href="http://blog.csdn.net/ronmy/article/details/66475039" target="_blank" rel="noopener">CentOS查看与用户、用户组相关文件命令</a></li><li><a href="https://www.bobcoder.cc/Post/detail/id/95.html" target="_blank" rel="noopener">Liunx(Centos 7.2) 定时清理Nginx日志文件</a></li><li><a href="https://www.cnblogs.com/jianqingwang/p/6726589.html" target="_blank" rel="noopener">Centos7:利用crontab定时执行任务</a></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
